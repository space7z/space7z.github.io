<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>github相关</title>
      <link href="/2023/08/29/github%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/08/29/github%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h1><p>…or create a new repository on the command line</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# syt&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:space7z/syt.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><br><p>…or push an existing repository from the command line</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:space7z/syt.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><br><p>…or import code from another repository</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化脚本编程之CMD/DOS命令行</title>
      <link href="/2023/08/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E4%B9%8BCMD-DOS%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2023/08/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E4%B9%8BCMD-DOS%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="cmd命令"><a href="#cmd命令" class="headerlink" title="cmd命令"></a>cmd命令</h1><h2 id="mkdir创建文件夹"><a href="#mkdir创建文件夹" class="headerlink" title="mkdir创建文件夹"></a>mkdir创建文件夹</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> d:\<span class="built_in">ping</span></span><br></pre></td></tr></table></figure><br><h2 id="dir查看目录列表"><a href="#dir查看目录列表" class="headerlink" title="dir查看目录列表"></a>dir查看目录列表</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> d:\</span><br></pre></td></tr></table></figure><br><h2 id="cmd变量"><a href="#cmd变量" class="headerlink" title="cmd变量"></a>cmd变量</h2><p>设置变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set 变量名 = 值</span><br></pre></td></tr></table></figure><p>删除变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set 变量名=</span><br></pre></td></tr></table></figure><p>获取变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set 变量名</span><br></pre></td></tr></table></figure><br><p>运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set /a 1+2</span><br><span class="line">set /a var = 1+2</span><br></pre></td></tr></table></figure><br><p>bat脚本文件</p><p>运算进行输出</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /a var=<span class="number">4</span>*<span class="number">5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></span><br><span class="line"><span class="built_in">pause</span> &gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure><br><p>接收用户输入</p><p>需要编码为ansi</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p var=请输入一个数字：</span><br><span class="line"><span class="built_in">echo</span> 您输入的数字是：<span class="variable">%var%</span></span><br><span class="line"><span class="built_in">pause</span> &gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure><br><h2 id="自定义窗口"><a href="#自定义窗口" class="headerlink" title="自定义窗口"></a>自定义窗口</h2><p>设置窗口标题</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">title</span> <span class="built_in">cmd</span> xxx</span><br></pre></td></tr></table></figure><p>查看设备状态</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mode</span></span><br></pre></td></tr></table></figure><p>修改cmd</p><p>修改窗口大小为80*40</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mode</span> <span class="number">80</span>,<span class="number">40</span></span><br></pre></td></tr></table></figure><p>修改颜色</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">color</span> /? # 查看帮助</span><br><span class="line"></span><br><span class="line"><span class="built_in">color</span> 背景色字体色</span><br><span class="line"># 需要连在一起 例如 <span class="built_in">color</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><br><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>在网络中ping是一个十分强大的TCP&#x2F;IP工具。它的作用主要为：</p><p>1、用来检测网络的连通情况和分析网络速度</p><p>2、根据域名得到服务器IP</p><p>3、根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量。</p><p>我们通常会用它来直接ping ip地址，来测试网络的连通情况。</p><br><p>查看帮助</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> /?</span><br></pre></td></tr></table></figure><h3 id="排查网络故障"><a href="#排查网络故障" class="headerlink" title="排查网络故障"></a>排查网络故障</h3><p>检查本地TCP&#x2F;IP协议是否安装正常</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> localhost</span><br></pre></td></tr></table></figure><p>检查网关连接是否畅通</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>检查电脑与外部网络连接是否畅通</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> www.baidu.com</span><br></pre></td></tr></table></figure><p>丢失率为0为正常</p><br><h2 id="goto跳转"><a href="#goto跳转" class="headerlink" title="goto跳转"></a>goto跳转</h2><p>跳转执行定义部分的代码</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">rem 以下是主体部分“</span></span><br><span class="line"><span class="built_in">echo</span> hello world</span><br><span class="line"></span><br><span class="line"># 跳转到路径part1</span><br><span class="line"><span class="keyword">goto</span> part1</span><br><span class="line"></span><br><span class="line"># 定义路径part1</span><br><span class="line">:part1</span><br><span class="line"><span class="built_in">echo</span> i am ready to <span class="keyword">exit</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem 暂停作用</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><br><h2 id="start运行"><a href="#start运行" class="headerlink" title="start运行"></a>start运行</h2><p>作用：打开盘符、文件、文件夹、网址、程序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 以最大窗口方式打开D盘</span><br><span class="line"><span class="built_in">start</span> /max D:\</span><br><span class="line"># 以小窗口方式打开D盘</span><br><span class="line"><span class="built_in">start</span> /min D:\</span><br><span class="line"></span><br><span class="line"># 打开文件、文件夹</span><br><span class="line"><span class="built_in">start</span> f:\<span class="number">1</span>.txt</span><br><span class="line"></span><br><span class="line"># 打开网址</span><br><span class="line"><span class="built_in">start</span> www.baidu.com</span><br><span class="line"></span><br><span class="line"># 如果是打开文件夹，将会运行新的<span class="built_in">cmd</span>窗口名为aa bc</span><br><span class="line"><span class="built_in">start</span> &quot;aa bc&quot;</span><br><span class="line"></span><br><span class="line"># 如果想要打开的是当前盘下的aa bc文件夹,需要前面加上&quot;&quot;</span><br><span class="line"><span class="built_in">start</span> &quot;&quot; &quot;aa bc&quot;</span><br></pre></td></tr></table></figure><br><h2 id="call调用命令"><a href="#call调用命令" class="headerlink" title="call调用命令"></a>call调用命令</h2><p>程序的相互调用</p><p>main.bat</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 我是主程序</span><br><span class="line"><span class="keyword">call</span> test.bat</span><br><span class="line"><span class="built_in">echo</span> 引用完成</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>test.bat</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> hello world</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><br><h2 id="sort排序命令"><a href="#sort排序命令" class="headerlink" title="sort排序命令"></a>sort排序命令</h2><p>将文件内容排序</p><p>查看帮助</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort /?</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将文件内容排序，输出</span><br><span class="line"><span class="built_in">sort</span> text.txt</span><br><span class="line"># 将文件排序，保存为另一个文件</span><br><span class="line"><span class="built_in">sort</span> text1.txt &gt; text2.txt</span><br><span class="line"># 查看文件内容</span><br><span class="line"><span class="built_in">type</span> text2.txt</span><br></pre></td></tr></table></figure><br><h2 id="cmd-重定向"><a href="#cmd-重定向" class="headerlink" title="cmd 重定向"></a>cmd 重定向</h2><p>重定向操作符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;、&gt;&gt;、&lt;</span><br></pre></td></tr></table></figure><p>句柄的数字代码描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0：键盘输入</span><br><span class="line">1：输出到命令提示符窗口</span><br><span class="line">2：错误输出</span><br></pre></td></tr></table></figure><br><p>使用示例</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># &gt;：将<span class="built_in">ping</span>的返回数据，保存到指定目录文件中(会覆盖之前的内容)</span><br><span class="line"><span class="built_in">ping</span> www.baidu.com &gt; d:\<span class="built_in">ping</span>\baidu.txt</span><br><span class="line"></span><br><span class="line"># &gt;&gt;：追加内容使用 &gt;&gt;</span><br><span class="line"><span class="built_in">ping</span> www.baidu.com &gt;&gt; d:\<span class="built_in">ping</span>\baidu.txt</span><br><span class="line"></span><br><span class="line"># &lt;：将文件内容排序输出到窗口</span><br><span class="line"><span class="built_in">sort</span> &lt; d:\<span class="built_in">ping</span>\baidu.txt</span><br><span class="line"></span><br><span class="line"># 将错误信息输出到指定文件（di命令不存在）</span><br><span class="line">di &gt; right.txt <span class="number">2</span> &gt; error.txt</span><br></pre></td></tr></table></figure><br><h2 id="shutdown关机命令"><a href="#shutdown关机命令" class="headerlink" title="shutdown关机命令"></a>shutdown关机命令</h2><p>查看帮助</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown /?</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> windwos操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-爬虫</title>
      <link href="/2023/08/25/python/python-%E7%88%AC%E8%99%AB/"/>
      <url>/2023/08/25/python/python-%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面源码</span></span><br><span class="line"><span class="comment"># read()：返回字节形式的二进制数据</span></span><br><span class="line"><span class="comment"># 二进制-&gt;字符串 解码：decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">conent = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(conent)</span><br></pre></td></tr></table></figure><br><h2 id="一个类型和六个方法"><a href="#一个类型和六个方法" class="headerlink" title="一个类型和六个方法"></a>一个类型和六个方法</h2><p>urllib.request</p><p><strong>一个类型：</strong></p><ul><li>HTTPResponse类型</li></ul><p><strong>六个方法：</strong></p><ul><li>read()：一行一行读</li><li>read(n)：读取n个字节</li><li>readline()：一次读取一行</li><li>readlines()：一次读取一行，读完为止</li><li>getcode()：获取响应状态码</li><li>geturl()：获取url地址</li><li>getheaders()：获取一个状态信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个类型和六个方法</span></span><br><span class="line"><span class="comment"># response是HTTPResponse的类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment"># read()：一行一行读</span></span><br><span class="line">response.read()</span><br><span class="line"><span class="comment"># read(n)：读取n个字节</span></span><br><span class="line"><span class="comment"># readline()：一次读取一行</span></span><br><span class="line"><span class="comment"># readlines()：一次读取一行，读完为止</span></span><br><span class="line"><span class="comment"># getcode()：获取响应状态码</span></span><br><span class="line"><span class="comment"># geturl()：获取url地址</span></span><br><span class="line"><span class="comment"># getheaders()：获取一个状态信息</span></span><br></pre></td></tr></table></figure><br><h2 id="urllib下载"><a href="#urllib下载" class="headerlink" title="urllib下载"></a>urllib下载</h2><p>将爬取的数据下载保存</p><p>使用urllib.request.urlretrieve(url,filename)方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url_page = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数1：url代表的是下载来源的地址 参数2：filename代表文件的名字</span></span><br><span class="line">urllib.request.urlretrieve(url=url_page,filename=<span class="string">&#x27;baidu.html&#x27;</span>)</span><br></pre></td></tr></table></figure><br><h2 id="请求对象的定制"><a href="#请求对象的定制" class="headerlink" title="请求对象的定制"></a>请求对象的定制</h2><p>定制Reqeust对象，用于破解反爬</p><br><p><strong>url的组成：</strong></p><ul><li>协议 http&#x2F;https</li><li>主机 <a href="http://www.baidu.com/">www.baidu.com</a></li><li>端口号 80&#x2F;443</li><li>路径 参数 锚点</li></ul><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面源码</span></span><br><span class="line"><span class="comment"># read()：返回字节形式的二进制数据</span></span><br><span class="line"><span class="comment"># 二进制-&gt;字符串 解码：decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><h3 id="get请求的uquote方法"><a href="#get请求的uquote方法" class="headerlink" title="get请求的uquote方法"></a>get请求的uquote方法</h3><p>urllib.parse.quote(string)：</p><ul><li>将字符串转为unicode编码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?wd=&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name = urllib.parse.quote(<span class="string">&#x27;周杰伦&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url = url+name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h3 id="get请求的urlencode方法"><a href="#get请求的urlencode方法" class="headerlink" title="get请求的urlencode方法"></a>get请求的urlencode方法</h3><p>urllib.parse.urlencode()：</p><ul><li>将字典类型的请求参数转为unicode编码类型地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://search.bilibili.com/all?&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典格式的请求参数</span></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;keyword&#x27;</span>:<span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># urlencode()方法将字典数据转为unicode编码</span></span><br><span class="line">new_url = urllib.parse.urlencode(data)</span><br><span class="line">url=url+new_url</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h3 id="post请求方式"><a href="#post请求方式" class="headerlink" title="post请求方式"></a>post请求方式</h3><ul><li>urllib.request.Request中传入data（请求体）数据</li><li>传入的data数据类型要求是bytes类型（.encode(‘utf-8’)）</li></ul><h4 id="请求百度翻译案例"><a href="#请求百度翻译案例" class="headerlink" title="请求百度翻译案例"></a>请求百度翻译案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inp = <span class="built_in">input</span>(<span class="string">&#x27;输入要翻译的单词：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:inp,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数必须要进行编码</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象，post请求的参数是不会拼接在url的后面，而是需要放在请求对象的参数中</span></span><br><span class="line">request = urllib.request.Request(url=url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_content = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(json_content)</span><br></pre></td></tr></table></figure><br><h4 id="请求百度翻译-详细翻译案例"><a href="#请求百度翻译-详细翻译案例" class="headerlink" title="请求百度翻译-详细翻译案例"></a>请求百度翻译-详细翻译案例</h4><p>请求<a href="https://fanyi.baidu.com/v2transapi?from=zh&to=en%EF%BC%8C%E4%B8%BB%E8%A6%81%E7%BB%99headers%E4%BC%A0%E5%85%A5Cookie%E3%80%82">https://fanyi.baidu.com/v2transapi?from=zh&amp;to=en，主要给headers传入Cookie。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/v2transapi?from=zh&amp;to=en&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求所需的请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;BIDUPSID=15D0345C5FEAEBEB63406F4630EA306A; PSTM=1688301634; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; BDUSS=8wdmxKNmFuRXFDWGV0WGl1R2RQNm1JRlp3bUZrQlBzcVE5VDJ4ZEpBWG9FOGxrSVFBQUFBJCQAAAAAAAAAAAEAAAC7WZdH5dDSo8zswfq7qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOiGoWTohqFkbU; BDUSS_BFESS=8wdmxKNmFuRXFDWGV0WGl1R2RQNm1JRlp3bUZrQlBzcVE5VDJ4ZEpBWG9FOGxrSVFBQUFBJCQAAAAAAAAAAAEAAAC7WZdH5dDSo8zswfq7qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOiGoWTohqFkbU; BAIDUID=15D0345C5FEAEBEBE8ADB92F2F6DB823:SL=0:NR=10:FG=1; MCITY=-261%3A; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1692619213,1692672197,1692879955,1692963695; BAIDUID_BFESS=15D0345C5FEAEBEBE8ADB92F2F6DB823:SL=0:NR=10:FG=1; delPer=0; PSINO=7; BA_HECTOR=242kak0020a10la0ah2k2k2n1ieh8fk1p; ZFY=HvecObAcJy1avdd5H92kD5zGBncA7BCWwCksLGvyitk:C; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; H_PS_PSSID=36560_39227_39216_39223_39097_39194_39037_39199_39241_26350_39239_39138_39225_39137_39100; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1692971267; ab_sr=1.0.1_NjNmMjhkYzQwYzllM2NhMDI0ZWY4NTIxNzgwYmY1YWZkZjIzZDliMzJlYjIxNDNkNzVjODk1NmViNWQ3MWNiOTY2YjM3MzA3N2MxODc1ZjVhY2RjZjVlYTY0NjY1MGFjMGE5ODIxZWYxY2VmMjgzYzdkYmU1OWUyMThhMTY5NTllNWM2NmY2YmJlZTM2MTgwMDYyNzlkODk3YzRkOTlmY2ZhMjNlY2Q5NWZlNTMyZWExN2EyMTY5NTkwMWM0ZTI3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求所需的请求体</span></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;transtype&#x27;</span>: <span class="string">&#x27;realtime&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;simple_means_flag&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: <span class="number">232427.485594</span>,</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;b1fca92a0a57e2d52767d7230e097f07&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ts&#x27;</span>: <span class="string">&#x27;1692970603111&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数必须要进行编码</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象，post请求的参数是不会拼接在url的后面，而是需要放在请求对象的参数中</span></span><br><span class="line">request = urllib.request.Request(url=url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_content = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(json_content)</span><br></pre></td></tr></table></figure><br><h2 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h2><h4 id="Ajax的get请求"><a href="#Ajax的get请求" class="headerlink" title="Ajax的get请求"></a>Ajax的get请求</h4><p><strong>爬取豆瓣第一页案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content= response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;douban.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><br><p><strong>爬取豆瓣前n页案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=20&amp;limit=20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span> : (page-<span class="number">1</span>)*<span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span> : <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">    url = base_url+params</span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;douban&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页：&#x27;</span>))</span><br><span class="line">    end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入最终页：&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        download(page, content)</span><br></pre></td></tr></table></figure><br><h4 id="Ajax的post请求"><a href="#Ajax的post请求" class="headerlink" title="Ajax的post请求"></a>Ajax的post请求</h4><p>请求头中带<strong>X-Requested-With: XMLHttpRequest</strong>的是ajax请求</p><p><strong>爬取肯德基案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname</span></span><br><span class="line"><span class="comment"># X-Requested-With: XMLHttpRequest</span></span><br><span class="line"><span class="comment"># 第一页</span></span><br><span class="line"><span class="comment"># cname: 南宁</span></span><br><span class="line"><span class="comment"># pid:</span></span><br><span class="line"><span class="comment"># pageIndex: 1</span></span><br><span class="line"><span class="comment"># pageSize: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二页</span></span><br><span class="line"><span class="comment"># cname: 南宁</span></span><br><span class="line"><span class="comment"># pid:</span></span><br><span class="line"><span class="comment"># pageIndex: 2</span></span><br><span class="line"><span class="comment"># pageSize: 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;南宁&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: page,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    request = urllib.request.Request(url=base_url,data=data,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;kfcStore_&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页：&#x27;</span>))</span><br><span class="line">    end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入最终页：&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        download(page, content)</span><br></pre></td></tr></table></figure><br><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>urllib.error.HTTPError：要么 url 不对，要么 ip 被封</li><li>urllib.error.URLError：HTTPError的父类，没有网络连接 、服务器连接失败、找不到指定的服务器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &#x27;http://www.kfc.com.cn/kfccda/storelist/index.aspxa&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://www.basderrr.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请求地址错误&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请求url错误&#x27;</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Cookie登录"><a href="#Cookie登录" class="headerlink" title="Cookie登录"></a>Cookie登录</h2><p>请求headers中添加Cookie参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://weibo.cn/7482628235/info&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;SINAGLOBAL=8668618496439.359.1689429646076; UOR=,,www.baidu.com; XSRF-TOKEN=Z2et-Oe5fkuSytXn96RpRV0h; _s_tentry=weibo.com; Apache=4804689192536.258.1693015572759; ULV=1693015572793:2:1:1:4804689192536.258.1693015572759:1689429646079; PC_TOKEN=2a309e3133; login_sid_t=5dbfb18b19da2ac15b51c1efc4897788; cross_origin_proto=SSL; WBStorage=4d96c54e|undefined; wb_view_log=1536*8641.25; SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9W5JQyE7OJYxU-pXximCUe5p5JpX5o275NHD95QNShnESozReoefWs4DqcjMi--NiK.Xi-2Ri--ciKnRi-zNSKzXeoM4eoBcS7tt; SSOLoginState=1693015665; SUB=_2A25J7S4hDeRhGeFK41AX8ibOyDmIHXVqmxjprDV8PUNbmtAGLWfGkW9NQv4dZhMK6JccRlcowlaFxvc_4xhhvvn3; ALF=1724551663; WBPSESS=82F8S3pSBrqn70S9pOernwnjq2RzmAnk4O18PTA1rTLXwvAfBXm_GPFi9PYQDVM3ZORf0RNmgVlDyZeUd520S3oObiPhcubuTQsYV2RTSgCIeQxXhii5qblbZU4G0OoQV8D4KsQXxWBqtluJi7Gvaw==&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content= response.read().decode(<span class="string">&#x27;utf8&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;weibo.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><br><h2 id="Handler处理器"><a href="#Handler处理器" class="headerlink" title="Handler处理器"></a>Handler处理器</h2><p>定制更高级的请求头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 获取handler对象</span></span><br><span class="line">handler = urllib.request.HTTPHandler()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取opener对象</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 调用open方法</span></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><p>1.代理的常用功能?</p><ul><li><p>突破自身IP访问限制，访问国外站点。</p></li><li><p>访问一些单位或团体内部资源</p><p>扩展：某大学FTP(前提是该代理地址在该资源的允许访问范围之内)，使用教育网内地址段免费代理服务器，就可以用于对教育网开放的各类FTP下载上传，以及各类资料查询共享等服务。</p></li><li><p>提高访问速度</p><p>扩展：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时，则直接由缓冲区中取出信息，传给用户，以提高访问速度。</p></li><li><p>隐藏真实IP</p><p>扩展：上网者也可以通过这种方法隐藏自己的IP，免受攻击。</p></li></ul><p>2.代码配置代理</p><ul><li><p>创建Reuqest对象</p></li><li><p>创建ProxyHandler对象</p></li><li><p>用handler对象创建opener对象使用opener.open函数发送请求</p></li></ul><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">proxies=&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;118.24.219.151:16817&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handler = urllib.request.ProxyHandler(proxies=proxies)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面源码</span></span><br><span class="line"><span class="comment"># read()：返回字节形式的二进制数据</span></span><br><span class="line"><span class="comment"># 二进制-&gt;字符串 解码：decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;daili.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><br><h3 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h3><p>防止某ip频繁访问被封</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">proxies_pool=[</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;118.24.219.151:16817&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;118.24.219.151:16817&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">proxies=random.choice(proxies_pool)</span><br><span class="line"></span><br><span class="line">handler = urllib.request.ProxyHandler(proxies=proxies)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面源码</span></span><br><span class="line"><span class="comment"># read()：返回字节形式的二进制数据</span></span><br><span class="line"><span class="comment"># 二进制-&gt;字符串 解码：decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;daili.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><br><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>用于获取网页部分源码的</p><h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>安装xpath插件</strong></p><p>1.chrome插件商店中下载XPath Helper，重启浏览器</p><p>2.ctrl+shift+x使用插件</p><br><p><strong>安装lxml库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><br><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>1.路径查询</p><ul><li>&#x2F;&#x2F;：查找所有子孙节点，不考虑层级关系</li><li>&#x2F;：查找直接子节点</li></ul><p>2.谓词查询</p><ul><li>&#x2F;&#x2F;div[@id]</li><li>&#x2F;&#x2F;div[@id&#x3D;”maincontent”]</li></ul><p>3.属性查询he</p><ul><li>&#x2F;&#x2F;@class</li></ul><p>4.模糊查询</p><ul><li>&#x2F;&#x2F;div[contains(@id,”aa”)]</li><li>&#x2F;&#x2F;div[starts-with(@id,”aa”)]：id以aa开头</li></ul><p>5.内容查询</p><ul><li>&#x2F;&#x2F;div&#x2F;h1&#x2F;text()</li></ul><p>6.逻辑运算</p><ul><li>&#x2F;&#x2F;div[@id&#x3D;”head” and @class&#x3D;”s_down”]</li><li>title | &#x2F;&#x2F;price</li></ul><br><p><strong>示例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># xpath解析本地文件</span></span><br><span class="line">tree = etree.parse(<span class="string">&#x27;xpath基本使用.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找body div ul下的li</span></span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//body/div/ul/li&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有有id属性的li</span></span><br><span class="line"><span class="comment"># text()：获取标签的内容</span></span><br><span class="line">li_list2=tree.xpath(<span class="string">&#x27;//ul/li[@id]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有id=l1的li</span></span><br><span class="line">li_list3=tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id=l1的li标签的class的属性值</span></span><br><span class="line">li_list4=tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/@class&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id中包含l的li标签</span></span><br><span class="line">li_list4=tree.xpath(<span class="string">&#x27;//ul/li[contains(@id,&quot;l&quot;)]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id中以l开头的li标签</span></span><br><span class="line">li_list5=tree.xpath(<span class="string">&#x27;//ul/li[starts-with(@id,&quot;l&quot;)]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id为l1或id为l2</span></span><br><span class="line">li_list6=tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot; or @id=&quot;l2&quot;]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list6)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id为l1或id为l2</span></span><br><span class="line">li_list7=tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/text() | //ul/li[@id=&quot;l2&quot;]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list7)</span><br></pre></td></tr></table></figure><br><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="获取百度网站的百度一下"><a href="#获取百度网站的百度一下" class="headerlink" title="获取百度网站的百度一下"></a><strong>获取百度网站的百度一下</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">value = tree.xpath(<span class="string">&#x27;//input[@id=&quot;su&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><br><h4 id="获取站长素材图片"><a href="#获取站长素材图片" class="headerlink" title="获取站长素材图片"></a>获取站长素材图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://sc.chinaz.com/tu/qinglvtupian.html</span></span><br><span class="line"><span class="comment"># https://sc.chinaz.com/tu/qinglvtupian-2-0-0.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    url=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> page==<span class="number">1</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tu/qinglvtupian.html&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tu/qinglvtupian-&#123;&#125;-0-0.html&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(page))</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="comment"># 解析html内容</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 图片名字的xpath路径</span></span><br><span class="line">    name_list = tree.xpath(<span class="string">&#x27;//div[@id=&quot;ulcontent&quot;]//a//img[@class=&quot;preview&quot;]/@alt&#x27;</span>)</span><br><span class="line">    <span class="comment"># 图片地址的xpath路径</span></span><br><span class="line">    src_list = tree.xpath(<span class="string">&#x27;//div[@id=&quot;ulcontent&quot;]//a//img[@class=&quot;preview&quot;]/@data-src&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(src_list)):</span><br><span class="line">        name = name_list[idx]</span><br><span class="line">        src = src_list[idx]</span><br><span class="line">        url = <span class="string">&#x27;https:&#x27;</span>+src</span><br><span class="line"></span><br><span class="line">        url = url.replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="comment"># 目录不存在，则创建</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./loveImg&#x27;</span>):</span><br><span class="line">            os.mkdir(<span class="string">&#x27;./loveImg&#x27;</span>)</span><br><span class="line">        <span class="comment"># 下载到本地</span></span><br><span class="line">        urllib.request.urlretrieve(url=url, filename=<span class="string">&#x27;loveImg/&#x27;</span> + name + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页：&#x27;</span>))</span><br><span class="line">    end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入最终页：&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        download(page, content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载完成&#x27;</span>)</span><br></pre></td></tr></table></figure><br><h2 id="jsonpath"><a href="#jsonpath" class="headerlink" title="jsonpath"></a>jsonpath</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jsonpath</span><br></pre></td></tr></table></figure><h3 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h3><p>自行百度…</p><h2 id="BeautifulSoup-bs4"><a href="#BeautifulSoup-bs4" class="headerlink" title="BeautifulSoup(bs4)"></a>BeautifulSoup(bs4)</h2><p>和lxml一样，是一个html的解析器，主要功能是解析和提取数据</p><p>优点：</p><ul><li>接口人性化，使用方便</li></ul><p>缺点：</p><ul><li>效率没有lxml的效率高</li></ul><br><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br></pre></td></tr></table></figure><br><h3 id="基本使用-3"><a href="#基本使用-3" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br></pre></td></tr></table></figure><br><h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><ol><li>什么是selenium?</li></ol><ul><li>selenium是一个用于web应用程序测试的工具。</li><li>selenium 测试直接运行在浏览器中，就像真正的用户在操作一样。</li><li>支持通过各种driver (FirfoxDriver，IternetExplorerDriver ,OperaDriver,chromeDriver)驱动真实浏览器完成测试。</li><li>selenium也是支持无界面浏览器操作的。</li></ul><br><ol start="2"><li>为什么使用selenium?</li></ol><ul><li>模拟浏览器功能，自动执行网页中的js代码，实现动态加载</li></ul><br><ol start="3"><li>如何安装selenium?</li></ol><p>（1）操作谷歌浏览器驱动下载地址</p><ul><li><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></li></ul><p>（2）谷歌驱动和谷歌浏览器版本之间的映射表</p><ul><li><a href="http://blog.csdn.net/huilan_same/article/details/51896672">http://blog.csdn.net/huilan_same/article/details/51896672</a></li></ul><p>（3）查看谷歌浏览器版本</p><ul><li>谷歌浏览器右上角–&gt;帮助–&gt;关于</li></ul><p>（4）pip install selenium&#x3D;&#x3D;4.0</p><ul><li>版本过高会闪退</li><li>driver没有find_element_by_xx方法等</li></ul><br><h2 id="基本使用-4"><a href="#基本使用-4" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&quot;User-Agent: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器操作对象</span></span><br><span class="line">s = Service(<span class="string">r&quot;D:\work\item\pyhon-project\pythonProject\python爬虫\app\selenium\chromedriver.exe&quot;</span>)</span><br><span class="line">browser = webdriver.Chrome(service=s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.jd.com/&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取源码</span></span><br><span class="line">content = browser.page_source</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><p>模拟用户操作浏览器网页，获取网页元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&quot;User-Agent: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器操作对象</span></span><br><span class="line">s = Service(<span class="string">r&quot;D:\work\item\pyhon-project\pythonProject\python爬虫\app\selenium\chromedriver.exe&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(service=s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据xpath语法</span></span><br><span class="line"><span class="comment"># button = driver.find_element_by_xpath(&quot;//input[@id=&#x27;su&#x27;]&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据id</span></span><br><span class="line"><span class="comment"># driver.find_element_by_id(&quot;su&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签名</span></span><br><span class="line"><span class="comment"># driver.find_element_by_tag_name(&quot;input&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用的bs4语法来获取对象</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&quot;#su&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h2 id="元素信息"><a href="#元素信息" class="headerlink" title="元素信息"></a>元素信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器操作对象</span></span><br><span class="line">s = Service(<span class="string">r&quot;D:\work\item\pyhon-project\pythonProject\python爬虫\app\selenium\chromedriver.exe&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(service=s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取class属性名</span></span><br><span class="line">className = <span class="built_in">input</span>.get_attribute(<span class="string">&quot;class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(className)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签的名称</span></span><br><span class="line">tagName = <span class="built_in">input</span>.tag_name</span><br><span class="line"><span class="built_in">print</span>(tagName)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元素文本</span></span><br><span class="line">a = driver.find_elements_by_link_text(<span class="string">&quot;新闻&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>].text)</span><br></pre></td></tr></table></figure><br><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>脚本操作页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器操作对象</span></span><br><span class="line">s = Service(<span class="string">r&quot;D:\work\item\pyhon-project\pythonProject\python爬虫\app\selenium\chromedriver.exe&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(service=s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文本框的对象</span></span><br><span class="line"><span class="built_in">input</span> = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文本框中输入周杰伦</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&quot;周杰伦&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取百度一下按钮</span></span><br><span class="line">button = driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击按钮</span></span><br><span class="line">button.click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 滑倒底部</span></span><br><span class="line">js_bottom = <span class="string">&#x27;document.documentElement.scrollTop=100000&#x27;</span></span><br><span class="line">driver.execute_script(js_bottom)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取下一页按钮</span></span><br><span class="line">next_button = driver.find_element_by_class_name(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">next_button.click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退后</span></span><br><span class="line">driver.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向前</span></span><br><span class="line">driver.forward()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><br><h2 id="无界面浏览器"><a href="#无界面浏览器" class="headerlink" title="无界面浏览器"></a>无界面浏览器</h2><h3 id="Phantomjs"><a href="#Phantomjs" class="headerlink" title="Phantomjs"></a>Phantomjs</h3><blockquote><p>已弃用</p><p>需要selenium版本为2.48.0</p><p>pip install selenium&#x3D;&#x3D;2.48.0</p></blockquote><ol><li>什么是Phantomjs？</li></ol><ul><li>是一个无界面的浏览器</li><li>支持页面元素查找，js的执行等</li><li>由于不进行css和gui渲染，运行效率要比真实的浏览器快</li></ul><ol start="2"><li>如何使用Phantomjs？<ol><li>获取PhantomJs.exe文件路径path</li><li>browser &#x3D; webdriver.PhantomJS(path)</li></ol></li></ol><ul><li>扩展：保存屏幕快照：browser.save_screenshot(“baidu.png”)</li></ul><br><h3 id="Chrome-handless"><a href="#Chrome-handless" class="headerlink" title="Chrome handless"></a>Chrome handless</h3><p>Chrome-headless模式，Google针对Chrome浏览器59版新增加的一种模式，可以让你不打开UI界面的情况下使用Chrome浏览器，所以运行效果与Chrome保持完美一致。</p><p><strong>系统要求:</strong></p><ul><li><p>chrome</p><ul><li><p>unix &#x2F; Linux系统需要chrome &gt;&#x3D; 59</p></li><li><p>windows系统需要chrome &gt;&#x3D; 60</p></li></ul></li><li><p>Python3.6</p></li><li><p>selenium&#x3D;&#x3D;3.4.*</p></li><li><p>chromeDriver&#x3D;&#x3D;2.31</p></li></ul><br><h4 id="基本使用-5"><a href="#基本使用-5" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrom_options = Options()</span><br><span class="line">chrom_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrom_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># path是google浏览器启动路径</span></span><br><span class="line">path = <span class="string">r&#x27;C:\Program Files\Google\Chrome\Application\chrome.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">chrom_options.binary_location = path</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(options=chrom_options)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;baidu.png&#x27;</span>)</span><br></pre></td></tr></table></figure><br><h4 id="封装使用"><a href="#封装使用" class="headerlink" title="封装使用"></a>封装使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share_browser</span>():</span><br><span class="line">    chrom_options = Options()</span><br><span class="line">    chrom_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    chrom_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># path是google浏览器启动路径</span></span><br><span class="line">    path = <span class="string">r&#x27;C:\Program Files\Google\Chrome\Application\chrome.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">    chrom_options.binary_location = path</span><br><span class="line"></span><br><span class="line">    browser = webdriver.Chrome(options=chrom_options)</span><br><span class="line">    <span class="keyword">return</span> browser</span><br></pre></td></tr></table></figure><br><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><p><strong>简介</strong></p><ul><li>使用requests可以模拟浏览器的请求，比起之前用的urllib，requests模块的api更加便捷（本质就是封装了urllib3）</li></ul><p><strong>注意</strong></p><ul><li>requests库发送请求将网页内容下载下来以后，并不会执行js代码，这需要我们自己分析目标站点然后发起新的request请求</li></ul><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure><br><h2 id="基本使用-6"><a href="#基本使用-6" class="headerlink" title="基本使用"></a>基本使用</h2><p>各种请求方式：常用的就是requests.get()和requests.post()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&quot;https://api.github.com/events&#x27;)</span></span><br><span class="line"><span class="string">response = requests.post(&#x27;http://httpbin.org/post&#x27;,data = &#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;)</span></span><br><span class="line"><span class="string">response = requests.put(&#x27;http://httpbin.org/put&#x27;,data=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;)</span></span><br><span class="line"><span class="string">response = requests.delete(&#x27;http://httpbin.org/delete&#x27;)</span></span><br><span class="line"><span class="string">response = requests.head(&#x27;http://httpbin.org/get&#x27;)</span></span><br><span class="line"><span class="string">response = requests.options(&#x27;http://httpbin.org/get&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个类型和六个方法</span></span><br><span class="line"><span class="comment"># Response类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置响应的编码格式</span></span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以字符串的形式来返回网页的源码</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回一个url地址</span></span><br><span class="line"><span class="built_in">print</span>(response.url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回二进制的数据</span></span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回响应的状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回响应头</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br></pre></td></tr></table></figure><br><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><br><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;上海&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,params=params,headers=headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><blockquote><p>总结：<br>参数使用params传递<br>参数无需urlencode编码<br>不需要请求对象的定制</p></blockquote><br><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inp = <span class="built_in">input</span>(<span class="string">&#x27;输入要翻译的文字：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:inp,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">obj = json.loads(content)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br></pre></td></tr></table></figure><br><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>创建proxy对象写入代理ip的键值对，传入requests.get(proxies&#x3D;proxy)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;ip&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;212.129.251.55:16816&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,params=data,headers=headers,proxies=proxy)</span><br><span class="line"></span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&#x27;daili.html&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp:</span></span><br><span class="line"><span class="comment">#     fp.write(content)</span></span><br></pre></td></tr></table></figure><br><h2 id="cookie登录"><a href="#cookie登录" class="headerlink" title="cookie登录"></a>cookie登录</h2><p><strong>扩展：</strong></p><p><strong>requests.session()</strong></p><ul><li>requests库的session会话对象可以跨请求保持某些参数，说白了，就是比如你使用session成功的登录了某个网站，则在再次使用该session对象求求该网站的其他网页都会默认使用该session之前使用的cookie等参数</li></ul><p>古诗文网登录案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __VIEWSTATE: 8YLp1XlMiRUOKany/q0yA3Z0loE7ojDTskPTXAK0J+Y9QMi3nZUv7zF390OP9UUTvVLp1zonm5PWSulqBrjw7EgTsb7l+ByE6XEtg7kwTw94Tn4a2/8B+n4sIS/S/hbb7y/irCu++p5JjQ4fDKCkt9QMYcU=</span></span><br><span class="line"><span class="comment"># __VIEWSTATEGENERATOR: C93BE1AE</span></span><br><span class="line"><span class="comment"># from: http://so.gushiwen.cn/user/collectbei.aspx?sort=t</span></span><br><span class="line"><span class="comment"># email: 13317615486</span></span><br><span class="line"><span class="comment"># pwd: 1064655698ye</span></span><br><span class="line"><span class="comment"># code: ud8t</span></span><br><span class="line"><span class="comment"># denglu: 登录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录请求</span></span><br><span class="line"><span class="comment"># https://so.gushiwen.cn/user/login.aspx?from=http%3a%2f%2fso.gushiwen.cn%2fuser%2fcollectbei.aspx%3fsort%3dt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录页面</span></span><br><span class="line"><span class="comment"># https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取 __VIEWSTATE</span></span><br><span class="line">viewstate = soup.select(<span class="string">&#x27;#__VIEWSTATE&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取 __VIEWSTATEGENERATOR</span></span><br><span class="line">viewstategenerator = soup.select(<span class="string">&#x27;#__VIEWSTATEGENERATOR&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取验证码图片</span></span><br><span class="line">imgCode = soup.select(<span class="string">&quot;#imgCode&quot;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">img_url= <span class="string">&#x27;https://so.gushiwen.cn&#x27;</span>+imgCode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坑</span></span><br><span class="line"><span class="comment"># import urllib.request</span></span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url=img_url,filename=&#x27;code.jpg&#x27;)</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment"># 验证码url响应的内容</span></span><br><span class="line">response_code = session.get(img_url)</span><br><span class="line"><span class="comment"># 验证码内容</span></span><br><span class="line">content_code = response_code.content</span><br><span class="line"><span class="comment"># wb模式就是将二进制数据写入到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content_code)</span><br><span class="line"></span><br><span class="line">code = <span class="built_in">input</span>(<span class="string">&#x27;请输入图片的验证码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http%3a%2f%2fso.gushiwen.cn%2fuser%2fcollectbei.aspx%3fsort%3dt&#x27;</span></span><br><span class="line"></span><br><span class="line">data_post = &#123;</span><br><span class="line">    <span class="string">&#x27;__VIEWSTATE&#x27;</span>: viewstate,</span><br><span class="line">    <span class="string">&#x27;__VIEWSTATEGENERATOR&#x27;</span>: viewstategenerator,</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>:<span class="string">&#x27;http://so.gushiwen.cn/user/collectbei.aspx?sort=t&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;13317615486&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;1064655698ye&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code&#x27;</span>: code,</span><br><span class="line">    <span class="string">&#x27;denglu&#x27;</span>: <span class="string">&#x27;登录&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_post)</span><br><span class="line"></span><br><span class="line">response_post = session.post(url=login_url,data=data_post,headers=headers)</span><br><span class="line"></span><br><span class="line">content_post = response_post.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;gushiwen.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content_post)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 难点：</span></span><br><span class="line"><span class="comment"># 1.隐藏域</span></span><br><span class="line"><span class="comment"># 2.验证码问题</span></span><br></pre></td></tr></table></figure><br><h1 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h1><ol><li>什么是scrapy？</li></ol><ul><li>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖<br>掘，信息处理或存储历史数据等一系列的程序中。</li></ul><br><p><strong>安装</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple <span class="comment">#使用清华大学镜像安装</span></span><br></pre></td></tr></table></figure><br><h2 id="基本使用-7"><a href="#基本使用-7" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a><strong>创建项目</strong></h3><p>终端中输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject project_name</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject scrapy_baidu</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>不能以数字开通，不能包含中文</li></ul><br><h3 id="创建爬虫文件"><a href="#创建爬虫文件" class="headerlink" title="创建爬虫文件"></a>创建爬虫文件</h3><p>在spiders中创建爬虫文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider 爬虫文件的名字 要爬取的网页</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider baidu www.baidu.com        </span><br></pre></td></tr></table></figure><blockquote><p>可以不用写http &#x2F; https协议</p></blockquote><br><p>创建出来的文件<strong>解读</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduSpider</span>(scrapy.Spider):</span><br><span class="line">    <span class="comment"># 爬虫文件的名字</span></span><br><span class="line">    name = <span class="string">&quot;baidu&quot;</span></span><br><span class="line">    <span class="comment"># 允许访问的网址</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.baidu.com&quot;</span>]</span><br><span class="line">    <span class="comment"># 起始的url地址，第一次要访问的url</span></span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.baidu.com&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是执行了start_url之后执行的方法，方法中的response就是返回的那个对象</span></span><br><span class="line">    <span class="comment"># 相当于 response = urllib.request.urlopen()</span></span><br><span class="line">    <span class="comment">#       response = requests.get()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># response.text 获取响应的字符串</span></span><br><span class="line">        <span class="comment"># response.body 获取二进制数据</span></span><br><span class="line">        <span class="comment"># response.xpath 可以直接用xpth方法来解析</span></span><br><span class="line">        <span class="comment"># response.extract() 提取selector对象的data属性值</span></span><br><span class="line">        <span class="comment"># response.extract_first() 提取的selector列表的第一个数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><br><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>项目名字</p><p>​项目名字</p><p>​spiders文件夹</p><p>​init</p><p>​自定义的爬虫文件</p><p>​init</p><p>​items自定义数据结构的地方 爬取的数据包含哪些</p><p>​middleware 中间件代理</p><p>​pipelines  管道用来处理下载的数据</p><p>​settings配置文件robots协议ua定义等</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><br><h3 id="运行爬虫代码"><a href="#运行爬虫代码" class="headerlink" title="运行爬虫代码"></a>运行爬虫代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl 爬虫名字</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl baidu</span><br></pre></td></tr></table></figure><br><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>架构组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(1)引擎s</span><br><span class="line">---》自动运行，无需关注，会自动组织所有的请求对象，分发给下载器</span><br><span class="line">(2)下载器</span><br><span class="line">---》从引擎处获取到请求对象后，请求数据</span><br><span class="line">(3) spiders</span><br><span class="line">---》spider类定义了如何爬取某个(或某些)网站。包括了爬取的动作(例</span><br><span class="line">如:是否跟进链接)以及如何从网页的内容中提取结构化数据(爬取item)。换句话说，Spider就是您定义爬取的动作及分析某个网页(或者是有些网页)的地方。</span><br><span class="line">(4)调度器</span><br><span class="line">---》有自己的调度规则，无需关注</span><br><span class="line">()管道(Item pipeline) ---》最终处理数据的管道，会预留接口供我们处理数据</span><br><span class="line">当Item在Spider中被收集之后，它将会被传递到Item Pipeline，一些组件会按照一定的顺序执行对Item的处理。每个item pipeline组件(有时称之为“Item Pipeline”)是实现了简单方法的Python类。他们接收到Item并通过它执行一些行为，同时也决定此Item是否继续通过pipeline，或是被丢弃而不再进行处理。</span><br><span class="line">以下是item pipeline的一些典型应用:</span><br><span class="line">1．清理HTML数据</span><br><span class="line">2．验证爬取的数据(检查item包含某些字段)</span><br><span class="line">3．查重(并丢弃)</span><br><span class="line">4．将爬取结果保存到数据库中</span><br></pre></td></tr></table></figure><br><ol><li>引擎向spiders要url</li><li>引擎将要爬取的url给调度器</li><li>调度器会将url生成的请求对象放入到指定的队列中</li><li>从队列中出队一个请求</li><li>引擎将请求交给下载器进行处理</li><li>下载器发送请求获取互联网数据</li><li>下载器将数据返回给引擎</li><li>引擎将数据再次给到spiders</li><li>spiders通过xpath解析给该数据，得到数据或者url</li><li>spiders将数据或者url给引擎</li><li>引擎判断该数据还是url，是数据交给管道（item pipeline）处理，是url交给调度器处理</li></ol><p><img src="C:\Users\Yesha\Desktop\scrapy-工作原理.png" alt="scrapy-工作原理"></p><br><h2 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h2><ol><li><strong>什么是scrapy shell?</strong></li></ol><ul><li>Scrapy终端，是一个交互终端，供您在未启动spider的情况下尝试及调试您的爬取代码。其本意是用来测试提取数据的代码，不过您可以将其作为正常的Python终端，在上面测试任何的Python代码。</li><li>该终端是用来测试xPath或css表达式，查看他们的工作方式及从爬取的网页中提取的数据。在编写您的spider时，该终端提供了交互性测试您的表达式代码的功能，免去了每次修改后运行spider的麻烦。</li><li>一旦熟悉了Scrapy终端后，您会发现其在开发和调试spider时发挥的巨大作用。</li></ul><br><ol start="2"><li><strong>安装ipython</strong></li></ol><ul><li>安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure><ul><li><p>简介:</p><p>如果安装了IPython，Scrapy终端将使用IPython(替代标准Python终端)。IPython终端与其他相比更为强大，提供智能的自动补全，高亮输出，及其他特性。</p></li></ul><br><p>使用cmd进入scrapy shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell url地址</span><br></pre></td></tr></table></figure><br><p>应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（1）response对象：</span><br><span class="line">response.body</span><br><span class="line">.text</span><br><span class="line">.url</span><br><span class="line">.status</span><br><span class="line">（2）response的解析：</span><br><span class="line">respnse.xpath()（常用）</span><br><span class="line">获取到selector对象，通过.extract_first()获取值</span><br></pre></td></tr></table></figure><br><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><h3 id="当当网爬取一页图书数据"><a href="#当当网爬取一页图书数据" class="headerlink" title="当当网爬取一页图书数据"></a>当当网爬取一页图书数据</h3><p>spiders.dangdang.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ScrapyDangdangItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DangdangSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;dangdang&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;search.dangdang.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://search.dangdang.com/?key=%CE%F7%D3%CE&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;//ul[@class=&quot;bigimg&quot;]/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            src = li.xpath(<span class="string">&#x27;.//img/@src&#x27;</span>).extract_first()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> src==<span class="string">&#x27;images/model/guan/url_none.png&#x27;</span>:</span><br><span class="line">                src = src</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                src = li.xpath(<span class="string">&#x27;.//img/@data-original&#x27;</span>).extract_first()</span><br><span class="line">            name = li.xpath(<span class="string">&#x27;.//img/@alt&#x27;</span>).extract_first()</span><br><span class="line">            price = li.xpath(<span class="string">&#x27;.//p[@class=&quot;price&quot;]/span[@class=&quot;search_now_price&quot;]/text()&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># </span></span><br><span class="line">            book = ScrapyDangdangItem(src=src,name=name,price=price)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取一个book，就将book给pipelines</span></span><br><span class="line">            <span class="keyword">yield</span> book</span><br></pre></td></tr></table></figure><br><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScrapyDangdangItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    price = scrapy.Field()</span><br></pre></td></tr></table></figure><br><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScrapyDangdangPipeline</span>:</span><br><span class="line">    <span class="comment"># 开始执行的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;book.json&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 爬虫文件执行完之后的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScrapyDangdangDownloadPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        src = item.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        url = <span class="string">&#x27;http:&#x27;</span>+src</span><br><span class="line">        book_name = <span class="string">&#x27;./books/&#x27;</span>+item.get(<span class="string">&#x27;name&#x27;</span>)+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="comment"># 下载图片文件到本地</span></span><br><span class="line">        urllib.request.urlretrieve(url=url,filename=book_name)</span><br></pre></td></tr></table></figure><br><p><strong>爬取多页数据</strong></p><p>dangdang.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ScrapyDangdangItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DangdangSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;dangdang&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;search.dangdang.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://search.dangdang.com/?key=%CE%F7%D3%CE&quot;</span>]</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">    base_url = <span class="string">&#x27;https://search.dangdang.com/?key=%CE%F7%D3%CE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;//ul[@class=&quot;bigimg&quot;]/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            src = li.xpath(<span class="string">&#x27;.//img/@src&#x27;</span>).extract_first()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> src==<span class="string">&#x27;images/model/guan/url_none.png&#x27;</span>:</span><br><span class="line">                src = src</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                src = li.xpath(<span class="string">&#x27;.//img/@data-original&#x27;</span>).extract_first()</span><br><span class="line">            name = li.xpath(<span class="string">&#x27;.//img/@alt&#x27;</span>).extract_first()</span><br><span class="line">            price = li.xpath(<span class="string">&#x27;.//p[@class=&quot;price&quot;]/span[@class=&quot;search_now_price&quot;]/text()&#x27;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            book = ScrapyDangdangItem(src=src,name=name,price=price)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取一个book，就将book给pipelines</span></span><br><span class="line">            <span class="keyword">yield</span> book</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第二页</span></span><br><span class="line">        <span class="comment"># https://search.dangdang.com/?key=%CE%F7%D3%CE&amp;page_index=2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第三页</span></span><br><span class="line">        <span class="comment"># https://search.dangdang.com/?key=%CE%F7%D3%CE&amp;page_index=3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.page&lt;<span class="number">100</span>:</span><br><span class="line">            self.page = self.page+<span class="number">1</span></span><br><span class="line">            url = self.base_url+<span class="string">&#x27;&amp;page_index=&#x27;</span>+<span class="built_in">str</span>(self.page)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url,callback=self.parse)</span><br></pre></td></tr></table></figure><br><h3 id="电影天堂爬取案例"><a href="#电影天堂爬取案例" class="headerlink" title="电影天堂爬取案例"></a>电影天堂爬取案例</h3><p>爬取第一页的名字，和另外一页的图片</p><p>spiders.test01</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> DygodItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test01Spider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;test01&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.dygod.net&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.dygod.net/html/gndy/china&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 获取第一页的名字和第二页的图片</span></span><br><span class="line">        a_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;co_content8&quot;]//a[2]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">            <span class="comment"># 名字</span></span><br><span class="line">            name = a.xpath(<span class="string">&#x27;./text()&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># 跳转的地址</span></span><br><span class="line">            src = a.xpath(<span class="string">&#x27;./@href&#x27;</span>).extract_first()</span><br><span class="line">            url = <span class="string">&#x27;https://www.dygod.net&#x27;</span>+src</span><br><span class="line">            <span class="comment"># meta:&#123;&#125; 将数据传递给下一个请求</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url,callback=self.parse_second,meta=&#123;<span class="string">&#x27;name&#x27;</span>:name&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_second</span>(<span class="params">self, response</span>):</span><br><span class="line">        src_img = response.xpath(<span class="string">&#x27;//div[@id=&quot;Zoom&quot;]/img[1]/@src&#x27;</span>).extract_first()</span><br><span class="line">        src = <span class="string">&#x27;https://www.dygod.net&#x27;</span>+src_img</span><br><span class="line">        name = response.meta[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        moview = DygodItem(src=src,name=name)</span><br><span class="line">        <span class="keyword">yield</span> moview</span><br></pre></td></tr></table></figure><br><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DygodItem</span>(scrapy.Item):</span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DygodPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;movie.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure><br><h2 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h2><ol><li><p>继承自scrapy.spider</p></li><li><p>作用</p><ul><li><p>CrawlSpider可以定义规则，在解析html内容的时候，可以根据链接规则提取出指定的链接，然后再向这些链接发送请求</p></li><li><p>所以，如果有需要跟进链接的需求，意思就是爬取了网页之后，需要提取链接再次爬取，使用crawlSpider是非常合适的</p></li></ul></li></ol><br><ol start="3"><li>提取链接</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">链接提取器，在这里就可以写规则提取指定链接</span><br><span class="line">scrapy.linkextractors.LinkExtractor(</span><br><span class="line">    allow = (),  <span class="comment"># 正则表达式提取符合正则的链接</span></span><br><span class="line">    deny = (), <span class="comment"># (不用)正则表达式不提取符合正则的链接</span></span><br><span class="line">    allow_domains = (), <span class="comment"># (不用)允许的域名</span></span><br><span class="line">    deny_domains = (), <span class="comment"># (不用)不允许的域名</span></span><br><span class="line">    restrict_xpaths = (), <span class="comment"># xpath，提取符合xpath规则的链接restrict_css = ()#提取符合选择器规则的链接</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>模拟使用</span><br><span class="line">正则用法: </span><br><span class="line">    links1 = LinkExtractor(allow=<span class="string">r&#x27;list_23_ld+\.html&#x27;</span> )</span><br><span class="line">xpath用法: </span><br><span class="line">    links2 = LinkExtractor(restrict_xpaths=<span class="string">r&#x27;//div[@class=&quot;x&quot;]&#x27;</span>)</span><br><span class="line">css用法:</span><br><span class="line">    links3 = LinkExtractor(restrict_css=<span class="string">&#x27;.x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>提取连接</span><br><span class="line">link.extract_links(response)</span><br></pre></td></tr></table></figure><br><p><strong>注：</strong></p><ul><li>callback只能写函数名字符串，callback&#x3D;’parse_item’</li><li>在基本的spider中，如果重新发送请求，那里的callback写的是 callback&#x3D;’self.parse_item’</li><li>follow&#x3D;true：是否跟进，就是按照提取连接规则进行提取</li></ul><br><p><strong>使用示例</strong></p><ol><li>在cmd中打开scrapy shell</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell https://www.dushu.com/book/1188.html</span><br></pre></td></tr></table></figure><ol start="2"><li>获取页面地址</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="comment"># 用正则表达式的方式匹配地址</span></span><br><span class="line">link = LinkExtractor(allow=<span class="string">r&#x27;/book/1188_\d+.html&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出匹配到的列表</span></span><br><span class="line">link.extract_links(response)</span><br></pre></td></tr></table></figure><br><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><h3 id="爬取读书网案例"><a href="#爬取读书网案例" class="headerlink" title="爬取读书网案例"></a>爬取读书网案例</h3><p>需求：爬取读书网数据</p><ol><li>创建项目</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject dushuproject</span><br></pre></td></tr></table></figure><ol start="2"><li>跳转到spiders路径</li><li>创建爬虫类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider -t crawl read www.dushu.com</span><br></pre></td></tr></table></figure><br><p>read.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> DushuprojectItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&quot;read&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.dushu.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.dushu.com/book/1188_1.html&quot;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&quot;/book/1188_\d+.html&quot;</span>),</span><br><span class="line">                           callback=<span class="string">&quot;parse_item&quot;</span>,</span><br><span class="line">                           follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_item</span>(<span class="params">self, response</span>):</span><br><span class="line">        img_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;book-info&quot;]//img&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> img_list:</span><br><span class="line">            src = img.xpath(<span class="string">&#x27;./@data-original&#x27;</span>).extract_first()</span><br><span class="line">            name = img.xpath(<span class="string">&#x27;./@alt&#x27;</span>).extract_first()</span><br><span class="line">            book = DushuprojectItem(src=src,name=name)</span><br><span class="line">            <span class="keyword">yield</span> book</span><br></pre></td></tr></table></figure><br><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DushuprojectItem</span>(scrapy.Item):</span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br></pre></td></tr></table></figure><br><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DushuprojectPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;books.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure><h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p><strong>安装</strong></p><p>pymysql</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><br><br><h3 id="爬取读书网数据案例"><a href="#爬取读书网数据案例" class="headerlink" title="爬取读书网数据案例"></a>爬取读书网数据案例</h3><p>传入数据库</p><p>spiders.read.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> DushuprojectItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&quot;read&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.dushu.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.dushu.com/book/1188_1.html&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据allow的规则获取地址，调用callback=的函数</span></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&quot;/book/1188_\d+.html&quot;</span>),</span><br><span class="line">                           callback=<span class="string">&quot;parse_item&quot;</span>,</span><br><span class="line">                           follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_item</span>(<span class="params">self, response</span>):</span><br><span class="line">        img_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;book-info&quot;]//img&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> img_list:</span><br><span class="line">            src = img.xpath(<span class="string">&#x27;./@data-original&#x27;</span>).extract_first()</span><br><span class="line">            name = img.xpath(<span class="string">&#x27;./@alt&#x27;</span>).extract_first()</span><br><span class="line">            book = DushuprojectItem(src=src,name=name)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> book</span><br></pre></td></tr></table></figure><br><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DushuprojectItem</span>(scrapy.Item):</span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br></pre></td></tr></table></figure><br><p>settings.py中配置数据库连接信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DB_HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">DB_POST= <span class="number">3306</span></span><br><span class="line">DB_USER = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">DB_PASSWORD = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">DB_NAME = <span class="string">&#x27;spider01&#x27;</span></span><br><span class="line"><span class="comment"># 注：不允许写&#x27;-&#x27;</span></span><br><span class="line">DB_CHARSET = <span class="string">&#x27;utf8&#x27;</span></span><br></pre></td></tr></table></figure><br><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载settings文件</span></span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MysqlPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        <span class="comment"># get_project_settings()：获取settings.py中的数据</span></span><br><span class="line">        settings = get_project_settings()</span><br><span class="line">        <span class="comment"># 保存数据库连接信息</span></span><br><span class="line">        self.host = settings[<span class="string">&#x27;DB_HOST&#x27;</span>]</span><br><span class="line">        self.port = settings[<span class="string">&#x27;DB_POST&#x27;</span>]</span><br><span class="line">        self.user = settings[<span class="string">&#x27;DB_USER&#x27;</span>]</span><br><span class="line">        self.password = settings[<span class="string">&#x27;DB_PASSWORD&#x27;</span>]</span><br><span class="line">        self.name = settings[<span class="string">&#x27;DB_NAME&#x27;</span>]</span><br><span class="line">        self.charset = settings[<span class="string">&#x27;DB_CHARSET&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用函数，连接</span></span><br><span class="line">        self.connect()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用pymysql的方法Connect传入连接信息，连接数据库</span></span><br><span class="line">        self.conn = pymysql.Connect(</span><br><span class="line">            host=self.host,</span><br><span class="line">            port=self.port,</span><br><span class="line">            user=self.user,</span><br><span class="line">            password=self.password,</span><br><span class="line">            db=self.name,</span><br><span class="line">            charset=self.charset</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建游标</span></span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;this.process_item:&#x27;</span>,item[<span class="string">&#x27;name&#x27;</span>],item[<span class="string">&#x27;src&#x27;</span>])</span><br><span class="line">        sql = <span class="string">&#x27;insert into book(name,src) values(&quot;&#123;&#125;&quot;,&quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(item[<span class="string">&#x27;name&#x27;</span>],item[<span class="string">&#x27;src&#x27;</span>])</span><br><span class="line">        <span class="comment"># 执行sql</span></span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        <span class="comment"># 提交执行</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        <span class="comment"># 关闭游标和数据连接</span></span><br><span class="line">        self.conn.cursor().close()</span><br><span class="line">        self.conn.close()</span><br></pre></td></tr></table></figure><br><p>注意使用的管道</p><ul><li>可以使用多个</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="comment"># &quot;dushuproject.pipelines.DushuprojectPipeline&quot;: 300,</span></span><br><span class="line">   <span class="string">&quot;dushuproject.pipelines.MysqlPipeline&quot;</span>: <span class="number">301</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="post请求-1"><a href="#post请求-1" class="headerlink" title="post请求"></a>post请求</h2><p><strong>与get请求相比</strong></p><ul><li><p>原本的parse不可用了</p></li><li><p>使用start_requests开始发送请求，scrapy.FormRequest请求接收url和data</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestpostSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;testpost&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;fanyi.baidu.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;kw&#x27;</span>:<span class="string">&#x27;final&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">yield</span> scrapy.FormRequest(url=url,formdata=data,callback=self.parse_second)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_second</span>(<span class="params">self, response</span>):</span><br><span class="line">        content = response.text</span><br><span class="line">        obj = json.loads(content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-start-&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(obj)</span><br></pre></td></tr></table></figure><br><h2 id="日志信息和日志等级"><a href="#日志信息和日志等级" class="headerlink" title="日志信息和日志等级"></a>日志信息和日志等级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(1) 日志级别:</span><br><span class="line">CRITICAL: 严重错误</span><br><span class="line">ERROR: 一般错误</span><br><span class="line">WARNING: 警告</span><br><span class="line">INFO: 一般信息</span><br><span class="line">DEBUG: 调试信息</span><br><span class="line"></span><br><span class="line">默认的日志等级是DEBUG</span><br><span class="line">只要出现了DEBUG或者DEBUG以上等级的日志</span><br><span class="line">那么这些日志将会打印</span><br><span class="line"></span><br><span class="line">(2) settings.py文件设置:</span><br><span class="line">默认的级别为DEBUG，会显示上面所有的信息在配置文件中settings.py</span><br><span class="line">LO6_FILE：将屏幕显示的信息全部记录到文件中，屏幕不再显示，注意文件后缀一定是.log</span><br><span class="line">LOG_LEVEL：设置日志显示的等级，就是显示哪些，不显示哪些</span><br></pre></td></tr></table></figure><p>指定日志等级和日志文件</p><p>在settings.python中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定日志等级</span></span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;WARNING&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志的文件</span></span><br><span class="line">LOG_FILE = <span class="string">&#x27;logdemo.log&#x27;</span></span><br></pre></td></tr></table></figure><br><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>settings.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line"><span class="comment"># 君子协议，注释掉之后就不遵守，一般都要注释</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解除注释，开启管道（pipelines）</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="comment"># 管道可以有很多个，有优先级，值越小优先级越高</span></span><br><span class="line">   <span class="string">&quot;scrapy_dangdang.pipelines.ScrapyDangdangPipeline&quot;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Flask框架详解</title>
      <link href="/2023/08/21/python/Python-Flask%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/08/21/python/Python-Flask%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Flask框架详解"><a href="#Python-Flask框架详解" class="headerlink" title="Python Flask框架详解"></a>Python Flask框架详解</h1><h2 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><br><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run()</span><br></pre></td></tr></table></figure><blockquote><p>代码解析：<br>1、首先我们导入了 Flask 类。 该类的实例将会成为我们的 WSGI 应用。<br>2、接着我们创建一个该类的实例。第一个参数是应用模块或者包的名称。如果你使用 一个单一模块（就像本例），那么应当使用 name ，因为名称会根据这个 模块是按应用方式使用还是作为一个模块导入而发生变化（可能是 ‘main’ ， 也可能是实际导入的名称）。这个参数是必需的，这样 Flask 才能知道在哪里可以 找到模板和静态文件等东西<br>3、然后我们使用 route() 装饰器来告诉 Flask 触发函数的 URL 。<br>4、函数名称被用于生成相关联的 URL 。函数最后返回需要在用户浏览器中显示的信息。</p></blockquote><br><h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><p>虽然 flask 命令可以方便地启动一个本地开发服务器，但是每次应用代码 修改之后都需要手动重启服务器。这样不是很方便， Flask 可以做得更好。如果你打开 调试模式，那么服务器会在修改应用代码之后自动重启，并且当应用出错时还会提供一个 有用的调试器。<br>在命令行中，如果需要打开所有开发功能（包括调试模式），那么要在运行服务器之前导出 FLASK_ENV 环境变量并把其设置为 development:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ export FLASK_ENV=development</span><br><span class="line">$ flask run</span><br></pre></td></tr></table></figure><p>在代码中，在运行或将调试参数传递给run()方法之前，通过将application对象的debug属性设置为True来启用Debug模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.debug = True</span><br><span class="line">app.run()</span><br><span class="line"># 或者</span><br><span class="line">app.run(debug = True)</span><br></pre></td></tr></table></figure><br><h2 id="绑定IP和端口"><a href="#绑定IP和端口" class="headerlink" title="绑定IP和端口"></a>绑定IP和端口</h2><h3 id="app-run"><a href="#app-run" class="headerlink" title="app.run"></a>app.run</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host, port, debug, options)</span><br></pre></td></tr></table></figure><ul><li>host：要监听的主机名。 默认为127.0.0.1（localhost）。设置为“0.0.0.0”以使服务器在外部可用</li><li>port ：默认值为5000</li><li>debug：默认为false。 如果设置为true，则提供调试信息，可以自动重载代码并显示调试信息</li><li>options：要转发到底层的Werkzeug服务器。</li></ul><p>默认情况下，Flask绑定IP为127.0.0.1，端口为5000。我们也可以通过下面的方式自定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=&#x27;0.0.0.0&#x27;, port=80, debug=True)</span><br></pre></td></tr></table></figure><p>0.0.0.0代表电脑所有的IP。80是HTTP网站服务的默认端口。什么是默认？比如，我们访问网站<a href="http://www.example.com,其实是访问的http//www.example.com:80%EF%BC%8C%E5%8F%AA%E4%B8%8D%E8%BF%87:80%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%E4%B8%8D%E5%86%99%E3%80%82">http://www.example.com，其实是访问的http://www.example.com:80，只不过:80可以省略不写。</a></p><br><h2 id="flask路由"><a href="#flask路由" class="headerlink" title="flask路由"></a>flask路由</h2><h3 id="app-route"><a href="#app-route" class="headerlink" title="app.route"></a>app.route</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.route(rule, options)</span><br></pre></td></tr></table></figure><ul><li>rule 参数表示与该函数的URL绑定。</li><li>options 是要转发给基础Rule对象的参数列表。</li></ul><p>现代Web框架使用路由技术来帮助用户记住应用程序URL。可以直接访问所需的页面，而无需从主页导航。</p><p>Flask中的route()装饰器用于将URL绑定到函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><p>在这里，URL’&#x2F; hello’规则绑定到hello_world()函数。 因此，如果用户访问<a href="http://localhost:5000/hello">http://localhost:5000/hello</a> URL，hello_world()函数的输出将在浏览器中呈现。</p><p>application对象的add_url_rule()函数也可用于将URL与函数绑定，如上例所示，使用route()装饰器的目的也由以下表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, hello_world)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-变量规则"><a href="#Flask-变量规则" class="headerlink" title="Flask 变量规则"></a>Flask 变量规则</h2><p>通过向规则参数添加变量部分，可以动态构建URL。此变量部分标记为<a href="converter:variable_name">converter:variable_name</a>。它作为关键字参数传递给与规则相关联的函数。<br>在以下示例中，route()装饰器的规则参数包含附加到URL’&#x2F;hello’的<name>。 因此，如果在浏览器中输入<a href="http://localhost:5000/hello/chenshifeng%E4%BD%9C%E4%B8%BAURL%EF%BC%8C%E5%88%99%E2%80%99chenshifeng%E2%80%99%E5%B0%86%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E6%8F%90%E4%BE%9B%E7%BB%99">http://localhost:5000/hello/chenshifeng作为URL，则’chenshifeng’将作为参数提供给</a> hello()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_name</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello %s!&#x27;</span> % name</span><br></pre></td></tr></table></figure><table><thead><tr><th>转换器</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>（缺省值） 接受任何不包含斜杠的文本</td></tr><tr><td>int</td><td>接受正整数</td></tr><tr><td>float</td><td>接受正浮点数</td></tr><tr><td>path</td><td>类似 string ，但可以包含斜杠</td></tr><tr><td>uuid</td><td>接受 UUID 字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Post %d&#x27;</span> % post_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_subpath</span>(<span class="params">subpath</span>):</span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Subpath %s&#x27;</span> % subpath</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="唯一的-URL-重定向行为"><a href="#唯一的-URL-重定向行为" class="headerlink" title="唯一的 URL &#x2F; 重定向行为"></a>唯一的 URL &#x2F; 重定向行为</h2><p>以下两条规则的不同之处在于是否使用尾部的斜杠:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">projects</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The project page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/about&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The about page&#x27;</span></span><br></pre></td></tr></table></figure><p>projects 的 URL 是中规中矩的，尾部有一个斜杠，看起来就如同一个文件夹。 访问一个没有斜杠结尾的 URL 时 Flask 会自动进行重定向，帮你在尾部加上一个斜杠。</p><p>about 的 URL 没有尾部斜杠，因此其行为表现与一个文件类似。如果访问这个 URL 时添加了尾部斜杠就会得到一个 404 错误。这样可以保持 URL 唯一，并帮助 搜索引擎避免重复索引同一页面。</p><br><h2 id="Flask-URL构建"><a href="#Flask-URL构建" class="headerlink" title="Flask URL构建"></a>Flask URL构建</h2><p>url_for()函数对于动态构建特定函数的URL非常有用。该函数接受函数的名称作为第一个参数，以及一个或多个关键字参数，每个参数对应于URL的变量部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_admin</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello Admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/guest/&lt;guest&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_guest</span>(<span class="params">guest</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello %s as Guest&#x27;</span> % guest</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_user</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello_admin&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello_guest&#x27;</span>, guest=name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><blockquote><p>redirect函数用于重定向，实现机制很简单，就是向客户端（浏览器）发送一个重定向的HTTP报文，浏览器会去访问报文中指定的url。</p></blockquote><br><h2 id="Flask-HTTP方法"><a href="#Flask-HTTP方法" class="headerlink" title="Flask HTTP方法"></a>Flask HTTP方法</h2><p>Web 应用使用不同的 HTTP 方法处理 URL 。当你使用 Flask 时，应当熟悉 HTTP 方法。 缺省情况下，一个路由只回应 GET 请求。 可以使用 route() 装饰器的 methods 参数来处理不同的 HTTP 方法:</p><table><thead><tr><th align="center"><strong>方法</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">以未加密的形式将数据发送到服务器，最常见的方法。</td></tr><tr><td align="center">HEAD</td><td align="center">和GET方法相同，但没有响应体。</td></tr><tr><td align="center">POST</td><td align="center">用于将HTML表单数据发送到服务器，POST方法接收的数据不由服务器缓存。</td></tr><tr><td align="center">PUT</td><td align="center">用上传的内容替换目标资源的所有当前表示。</td></tr><tr><td align="center">DELETE</td><td align="center">删除由URL给出的目标资源的所有当前表示。</td></tr></tbody></table><blockquote><p>默认情况下，Flask路由响应GET请求。但是，可以通过为route()装饰器提供方法参数来更改此首选项。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>(<span class="params">name</span>):</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;welcome %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      user = request.form[<span class="string">&#x27;xx&#x27;</span>]</span><br><span class="line">      <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>,name = user))</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      user = request.args.get(<span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>,name = user))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-模板"><a href="#Flask-模板" class="headerlink" title="Flask 模板"></a>Flask 模板</h2><p>在大型应用中,把业务逻辑和表现内容放在一起,会增加代码的复杂度和维护成本.</p><ul><li>模板其实是一个包含响应文本的文件,其中用占位符(变量)表示动态部分,告诉模板引擎其具体的值需要从使用的数据中获取</li><li>使用真实值替换变量,再返回最终得到的字符串,这个过程称为’渲染’</li><li>Flask 是使用 Jinja2 这个模板引擎来渲染模板</li></ul><br><p>使用模板的好处</p><ul><li>视图函数只负责业务逻辑和数据处理(业务逻辑方面)</li><li>而模板则取到视图函数的数据结果进行展示(视图展示方面)</li><li>代码结构清晰,耦合度低</li></ul><br><p>使用 render_template() 方法可以渲染模板，你只要提供模板名称和需要 作为参数传递给模板的变量就行了。<br>Flask 会在 templates 文件夹内寻找模板。因此，如果你的应用是一个模块， 那么模板文件夹应该在模块旁边；如果是一个包，那么就应该在包里面：</p><br><p>情形 1 : 一个模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/application.py</span><br><span class="line">/templates</span><br><span class="line">    /hello.html</span><br></pre></td></tr></table></figure><br><p>情形 2 : 一个包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/application</span><br><span class="line">    /__init__.py</span><br><span class="line">    /templates</span><br><span class="line">        /hello.html</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    my_int = <span class="number">18</span></span><br><span class="line">    my_str = <span class="string">&#x27;curry&#x27;</span></span><br><span class="line">    my_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">    my_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;durant&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">28</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># render_template方法:渲染模板</span></span><br><span class="line">    <span class="comment"># 参数1: 模板名称  参数n: 传到模板里的数据</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>,</span><br><span class="line">                           my_int=my_int,</span><br><span class="line">                           my_str=my_str,</span><br><span class="line">                           my_list=my_list,</span><br><span class="line">                           my_dict=my_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是模板<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_int &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_str &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_dict &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>模板的list数据获取<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list[0] &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list.1 &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>字典数据获取<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_dict[&#x27;name&#x27;] &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_dict.age &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>算术运算<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list.0 + 10 &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list[0] + my_list.1 &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h2 id="Flask-静态文件"><a href="#Flask-静态文件" class="headerlink" title="Flask 静态文件"></a>Flask 静态文件</h2><p>动态的 web 应用也需要静态文件，一般是 CSS 和 JavaScript 文件。理想情况下你的 服务器已经配置好了为你的提供静态文件的服务。但是在开发过程中， Flask 也能做好这项工作。只要在你的包或模块旁边创建一个名为 static 的文件夹就行了。 静态文件位于应用的 &#x2F;static 中。<br>使用特定的 ‘static’ 端点就可以生成相应的 URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这个静态文件在文件系统中的位置应该是 static&#x2F;style.css 。</p></blockquote><br><p>在下面的示例中，在index.html中的HTML按钮的OnClick事件上调用hello.js中定义的javascript函数，该函数在Flask应用程序的“&#x2F;”URL上呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>index.html的HTML脚本如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">src</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = &#x27;hello.js&#x27;) &#125;&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span> <span class="attr">onclick</span> = <span class="string">&quot;sayHello()&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Say Hello&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Hello.js包含sayHello()函数。</p><br><h2 id="Flask-Request对象"><a href="#Flask-Request对象" class="headerlink" title="Flask Request对象"></a>Flask Request对象</h2><p>来自客户端网页的数据作为全局请求对象发送到服务器。为了处理请求数据，应该从Flask模块导入。</p><p>Request对象的重要属性如下所列：</p><ul><li>form - 它是一个字典对象，包含表单参数及其值的键和值对。</li><li>args - 解析查询字符串的内容，它是问号（？）之后的URL的一部分。</li><li>Cookies - 保存Cookie名称和值的字典对象。</li><li>files - 与上传文件有关的数据。</li><li>method - 当前请求方法</li></ul><p>首先，你必须从 flask 模块导入请求对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></table></figure><br><h3 id="Flask-将表单数据发送到模板"><a href="#Flask-将表单数据发送到模板" class="headerlink" title="Flask 将表单数据发送到模板"></a>Flask 将表单数据发送到模板</h3><p>我们已经看到，可以在 URL 规则中指定 http 方法。触发函数接收的 Form 数据可以以字典对象的形式收集它并将其转发到模板以在相应的网页上呈现它。</p><p>在以下示例中，’&#x2F;’ URL 会呈现具有表单的网页（student.html）。填入的数据会发布到触发 result() 函数的 ‘&#x2F;result’ URL。</p><p>result() 函数收集字典对象中的 request.form 中存在的表单数据，并将其发送给 result.html。</p><p>该模板动态呈现表单数据的 HTML 表格。</p><p>下面给出的是应用程序的 Python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">student</span>():</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&#x27;student.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">result</span>():</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      result = request.form</span><br><span class="line">      <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>,result = result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>下面给出的是 student.html 的 HTML 脚本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:5000/result&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Physics <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Physics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Chemistry <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;chemistry&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Maths <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Mathematics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;submit&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>下面给出了模板（ result.html ）的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">1</span>&gt;</span></span><br><span class="line">     &#123;% for key, value in result.items() %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">th</span>&gt;</span> &#123;&#123; key &#125;&#125; <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="Flask-Cookies"><a href="#Flask-Cookies" class="headerlink" title="Flask Cookies"></a>Flask Cookies</h3><p>Cookie以文本文件的形式存储在客户端的计算机上。其目的是记住和跟踪与客户使用相关的数据，以获得更好的访问者体验和网站统计信息。</p><p>Request对象包含Cookie的属性。它是所有cookie变量及其对应值的字典对象，客户端已传输。除此之外，cookie还存储其网站的到期时间，路径和域名。<br>在Flask中，对cookie的处理步骤为：</p><p>1.设置cookie：</p><p>设置cookie,默认有效期是临时cookie,浏览器关闭就失效</p><p>可以通过 max_age 设置有效期， 单位是秒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp = make_response(<span class="string">&quot;success&quot;</span>)   <span class="comment"># 设置响应体</span></span><br><span class="line">resp.set_cookie(<span class="string">&quot;chenshifeng&quot;</span>, <span class="string">&quot;shifengboy&quot;</span>, max_age=<span class="number">3600</span>)</span><br></pre></td></tr></table></figure><br><p>2.获取cookie，通过request.cookies的方式， 返回的是一个字典，可以获取字典里的相应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie_1 = request.cookies.get(<span class="string">&quot;chenshifeng&quot;</span>)</span><br></pre></td></tr></table></figure><br><p>3.删除cookie<br>这里的删除只是让cookie过期，并不是直接删除cookie<br>删除cookie，通过delete_cookie()的方式， 里面是cookie的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp = make_response(<span class="string">&quot;del success&quot;</span>)  <span class="comment"># 设置响应体</span></span><br><span class="line">resp.delete_cookie(<span class="string">&quot;chenshifeng&quot;</span>)</span><br></pre></td></tr></table></figure><br><p>以下为Flask Cookies的简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/set_cookies&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>():</span><br><span class="line">    resp = make_response(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    resp.set_cookie(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>,max_age=<span class="number">3600</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/get_cookies&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>():</span><br><span class="line">    cookie_1 = request.cookies.get(<span class="string">&quot;key&quot;</span>)  <span class="comment"># 获取名字为Itcast_1对应cookie的值</span></span><br><span class="line">    <span class="keyword">return</span> cookie_1</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/delete_cookies&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_cookie</span>():</span><br><span class="line">    resp = make_response(<span class="string">&quot;del success&quot;</span>)</span><br><span class="line">    resp.delete_cookie(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-会话"><a href="#Flask-会话" class="headerlink" title="Flask 会话"></a>Flask 会话</h2><p>与Cookie不同，Session（会话）数据存储在服务器上。会话是客户端登录到服务器并注销服务器的时间间隔。需要在该会话中保存的数据会存储在服务器上的临时目录中。</p><p>为每个客户端的会话分配会话ID。会话数据存储在cookie的顶部，服务器以加密方式对其进行签名。对于此加密，Flask应用程序需要一个定义的SECRET_KEY。</p><p>Session对象也是一个字典对象，包含会话变量和关联值的键值对。</p><p>例如，要设置一个’username’会话变量，请使用以下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure><p>要释放会话变量，请使用pop()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, redirect, url_for, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;fkdjsafjdkfdlkjfadskjfadskljdsfklj&#x27;</span>  <span class="comment"># 确保设置应用程序的secret_key</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        username = session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录用户名是:&#x27;</span> + username + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + \</span><br><span class="line">               <span class="string">&quot;&lt;b&gt;&lt;a href = &#x27;/logout&#x27;&gt;点击这里注销&lt;/a&gt;&lt;/b&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;您暂未登录， &lt;br&gt;&lt;a href = &#x27;/login&#x27;&gt;&lt;/b&gt;&quot;</span> + \</span><br><span class="line">           <span class="string">&quot;点击这里登录&lt;/b&gt;&lt;/a&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &lt;form action = &quot;&quot; method = &quot;post&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;p&gt;&lt;input type =&quot;text&quot; name =&quot;username&quot;/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;p&gt;&lt;input type =&quot;submit&quot; value =&quot;登录&quot;/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    <span class="comment"># remove the username from the session if it is there</span></span><br><span class="line"></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>如何生成一个好的密钥<br>生成随机数的关键在于一个好的随机种子，因此一个好的密钥应当有足够的随机性。 操作系统可以有多种方式基于密码随机生成器来生成随机数据。使用下面的命令 可以快捷的为 Flask.secret_key （ 或者 SECRET_KEY ）生成值:<br>$ python -c ‘import os; print(os.urandom(16))’<br>b’_5#y2L”F4Q8z\n\xec]&#x2F;’</p></blockquote><br><h2 id="Flask-重定向和错误"><a href="#Flask-重定向和错误" class="headerlink" title="Flask 重定向和错误"></a>Flask 重定向和错误</h2><p>Flask类有一个redirect()函数。调用时，它返回一个响应对象，并将用户重定向到具有指定状态代码的另一个目标位置。</p><p>redirect()函数的原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flask.redirect(location, statuscode, response)</span><br></pre></td></tr></table></figure><p>在上述函数中：</p><ul><li>location参数是应该重定向响应的URL。</li><li>statuscode发送到浏览器标头，默认为302。</li><li>response参数用于实例化响应。</li></ul><br><p>以下状态代码已标准化：</p><p>HTTP_300_MULTIPLE_CHOICES<br>HTTP_301_MOVED_PERMANENTLY<br>HTTP_302_FOUND<br>HTTP_303_SEE_OTHER<br>HTTP_304_NOT_MODIFIED<br>HTTP_305_USE_PROXY<br>HTTP_306_RESERVED<br>HTTP_307_TEMPORARY_REDIRECT<br>默认状态代码为302，表示’found’。</p><br><p>在以下示例中，redirect()函数用于在登录尝试失败时再次显示登录页面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for, render_template, request</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the Flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;log_in.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> request.form[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;logged in successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>Flask类具有带有错误代码的abort()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flask.abort(code)</span><br></pre></td></tr></table></figure><p>Code参数采用以下值之一：</p><p>400 - 用于错误请求<br>401 - 用于未身份验证的<br>403 - Forbidden<br>404 - 未找到<br>406 - 表示不接受<br>415 - 用于不支持的媒体类型<br>429 - 请求过多<br>让我们对上述代码中的login()函数稍作更改。如果要显示’Unauthurized’页面，请将其替换为调用abort(401)，而不是重新显示登录页面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for, render_template, request, abort</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;log_in.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">401</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;logged in successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-消息闪现"><a href="#Flask-消息闪现" class="headerlink" title="Flask 消息闪现"></a>Flask 消息闪现</h2><p>一个好的基于 GUI 的应用程序会向用户提供有关交互的反馈。例如，桌面应用程序使用对话框或消息框，JavaScript 使用警报用于类似目的。</p><p>在 Flask Web 应用程序中生成这样的信息性消息很容易。Flask 框架的闪现系统可以在一个视图中创建消息，并在名为 next 的视图函数中呈现它。</p><p>Flask 模块包含 flash() 方法。它将消息传递给下一个请求，该请求通常是一个模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash(message, category)</span><br></pre></td></tr></table></figure><ul><li>message 参数是要闪现的实际消息。</li><li>category 参数是可选的。它可以是“error”，“info”或“warning”。</li></ul><p><br>为了从会话中获取消息，模板调用 get_flashed_messages()。</p><p>以下是一个完整的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, flash, redirect, render_template, \</span><br><span class="line">     request, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">b&#x27;_5#y2L&quot;F4Q8z\n\xec]/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> \</span><br><span class="line">           request.form[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;secret&#x27;</span>:</span><br><span class="line">            error = <span class="string">&#x27;Invalid credentials&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&#x27;You were successfully logged in&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>以下是实现闪现的 layout.html 模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>My Application<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">  &#123;% if messages %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">flashes</span>&gt;</span></span><br><span class="line">    &#123;% for message in messages %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br><span class="line">&#123;% block body %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><br><p>以下是继承自 layout.html 的 index.html 模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Overview<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Do you want to <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span>&gt;</span>log in?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><br><p>以下是同样继承自 layout.html 的 login.html 模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  &#123;% if error %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">error</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123; error &#125;&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Username:</span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">username</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">          request.form.username &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Password:</span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Login</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h2 id="Flask-文件上传"><a href="#Flask-文件上传" class="headerlink" title="Flask 文件上传"></a>Flask 文件上传</h2><p>在 Flask 中处理文件上传非常简单。它需要一个 HTML 表单，其 enctype属性设置为’multipart&#x2F;form-data’，将文件发布到 URL。URL 处理程序从 request.files[]对象中提取文件，并将其保存到所需的位置。</p><p>每个上传的文件首先会保存在服务器上的临时位置，然后将其实际保存到它的最终位置。目标文件的名称可以是硬编码的，也可以从 request.files[file]对象的filename属性中获取。但是，建议使用 secure_filename()函数获取它的安全版本。<br>可以在 Flask 对象的配置设置中定义默认上传文件夹的路径和上传文件的最大大小。</p><blockquote><p>app.config[‘UPLOAD_FOLDER’] 定义上传文件夹的路径 app.config[‘MAX_CONTENT_LENGTH’] 指定要上传的文件的最大大小（以字节为单位）</p></blockquote><br><p>以下代码具有 ‘&#x2F;upload’ URL 规则，该规则在 templates 文件夹中显示 ‘upload.html’，以及 ‘&#x2F; upload-file’URL 规则，用于调用 uploader() 函数处理上传过程。<br>‘upload.html’ 有一个文件选择器按钮和一个提交按钮。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>File Upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:5000/uploader&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.jpg,.png&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>以下是 Flask 应用程序的 Python 代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;D:/work/item/pyhon-project/flask-project/flask-test/app/upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/uploader&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uploader</span>():</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">      baseDir = os.path.dirname(__file__)</span><br><span class="line">      path = os.path.join(baseDir,<span class="string">&#x27;upload&#x27;</span>,f.filename)</span><br><span class="line">      f.save(path)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;file uploaded successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run()</span><br></pre></td></tr></table></figure><br><h2 id="Flask-扩展"><a href="#Flask-扩展" class="headerlink" title="Flask 扩展"></a>Flask 扩展</h2><p>Flask通常被称为微框架，因为核心功能包括基于Werkzeug的WSGI和路由以及基于Jinja2的模板引擎。此外，Flask框架还支持cookie和会话，以及JSON，静态文件等Web帮助程序。显然，这不足以开发完整的Web应用程序。而Flask扩展就具备这样的功能。Flask扩展为Flask框架提供了可扩展性。</p><p>有大量的Flask扩展可用。Flask扩展是一个Python模块，它向Flask应用程序添加了特定类型的支持。Flask Extension Registry（Flask扩展注册表）是一个可用的扩展目录。可以通过pip实用程序下载所需的扩展名。</p><p>在本教程中，我们将讨论以下重要的Flask扩展：</p><ul><li>Flask Mail - 为Flask应用程序提供SMTP接口</li><li>Flask WTF - 添加WTForms的渲染和验证</li><li>Flask SQLAlchemy - 为Flask应用程序添加SQLAlchemy支持</li><li>Flask Sijax - Sijax的接口 - Python&#x2F;jQuery库，使AJAX易于在Web应用程序中使用</li></ul><p>每种类型的扩展通常提供有关其用法的大量文档。由于扩展是一个Python模块，因此需要导入它才能使用它。Flask扩展名通常命名为flask-foo。导入的操作如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_foo <span class="keyword">import</span> [<span class="keyword">class</span>, function]</span><br></pre></td></tr></table></figure><p>对于0.7以后的Flask版本，您还可以使用语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext <span class="keyword">import</span> foo</span><br></pre></td></tr></table></figure><p>对于此用法，需要激活兼容性模块。它可以通过运行flaskext_compat.py来安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flaskext_compat</span><br><span class="line">flaskext_compat.activate()</span><br><span class="line"><span class="keyword">from</span> flask.ext <span class="keyword">import</span> foo</span><br></pre></td></tr></table></figure><br><h3 id="Flask-邮件"><a href="#Flask-邮件" class="headerlink" title="Flask 邮件"></a>Flask 邮件</h3><p>服务器建立简单的接口变得非常容易。</p><p>首先，应该在pip实用程序的帮助下安装Flask-Mail扩展。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask-Mail</span><br></pre></td></tr></table></figure><p>然后需要通过设置以下应用程序参数的值来配置Flask-Mail。</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">MAIL_SERVER</td><td align="center">电子邮件服务器的名称&#x2F;IP地址</td></tr><tr><td align="center">MAIL_PORT</td><td align="center">使用的服务器的端口号</td></tr><tr><td align="center">MAIL_USE_TLS</td><td align="center">启用&#x2F;禁用传输安全层加密</td></tr><tr><td align="center">MAIL_USE_SSL</td><td align="center">启用&#x2F;禁用安全套接字层加密</td></tr><tr><td align="center">MAIL_DEBUG</td><td align="center">调试支持。默认值是Flask应用程序的调试状态</td></tr><tr><td align="center">MAIL_USERNAME</td><td align="center">发件人的用户名</td></tr><tr><td align="center">MAIL_PASSWORD</td><td align="center">发件人的密码</td></tr><tr><td align="center">MAIL_DEFAULT_SENDER</td><td align="center">设置默认发件人</td></tr><tr><td align="center">MAIL_MAX_EMAILS</td><td align="center">设置要发送的最大邮件数</td></tr><tr><td align="center">MAIL_SUPPRESS_SEND</td><td align="center">如果app.testing设置为true，则发送被抑制</td></tr><tr><td align="center">MAIL_ASCII_ATTACHMENTS</td><td align="center">如果设置为true，则附加的文件名将转换为ASCII</td></tr></tbody></table><p>flask-mail模块包含以下重要类的定义。</p><h4 id="Mail类"><a href="#Mail类" class="headerlink" title="Mail类"></a>Mail类</h4><p>它管理电子邮件消息传递需求。类构造函数采用以下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-mail.Mail(app = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>构造函数将Flask应用程序对象作为参数。<br>Mail类的方法：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">send()</td><td align="center">发送Message类对象的内容</td></tr><tr><td align="center">connect()</td><td align="center">打开与邮件主机的连接</td></tr><tr><td align="center">send_message()</td><td align="center">发送消息对象</td></tr></tbody></table><br><h4 id="Message类"><a href="#Message类" class="headerlink" title="Message类"></a>Message类</h4><p>它封装了一封电子邮件。Message类构造函数有几个参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-mail.Message(subject, recipients, body, html, sender, cc, bcc, reply-to, date, charset, extra_headers, mail_options,rcpt_options)</span><br></pre></td></tr></table></figure><p>Message类方法：</p><ul><li><p>attach() - 为邮件添加附件。此方法采用以下参数：</p><ul><li>filename - 要附加的文件的名称</li><li>content_type - MIME类型的文件</li><li>data - 原始文件数据</li><li>处置 - 内容处置（如果有的话）。</li></ul></li><li><p>add_recipient() - 向邮件添加另一个收件人</p></li></ul><p>在下面的示例中，使用QQ邮箱服务的SMTP服务器用作Flask-Mail配置的MAIL_SERVER。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"></span><br><span class="line">app =Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_SERVER&#x27;</span>]=<span class="string">&#x27;smtp.qq.com&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PORT&#x27;</span>] = <span class="number">465</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USERNAME&#x27;</span>] = <span class="string">&#x27;qqaccount@qq.com&#x27;</span></span><br><span class="line"><span class="comment"># 授权密钥</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PASSWORD&#x27;</span>] = <span class="string">&#x27;flquiyadlhirbeba&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_TLS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_SSL&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">mail=Mail(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">   msg = Message(<span class="string">&#x27;Hello&#x27;</span>, sender = <span class="string">&#x27;senderqqaccount@qq.com&#x27;</span>, recipients = [<span class="string">&#x27;recipientsqqaccount@qq.com&#x27;</span>])</span><br><span class="line">   msg.body = <span class="string">&quot;Hello Flask message sent from Flask-Mail&quot;</span></span><br><span class="line">   mail.send(msg)</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Sent&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-SQLAlchemy"><a href="#Flask-SQLAlchemy" class="headerlink" title="Flask SQLAlchemy"></a>Flask SQLAlchemy</h2><p>步骤1 - 安装Flask-SQLAlchemy扩展。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure><p>步骤2 - 您需要从此模块导入SQLAlchemy类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br></pre></td></tr></table></figure><p>步骤3 - 现在创建一个Flask应用程序对象并为要使用的数据库设置URI。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///students.sqlite3&#x27;</span></span><br></pre></td></tr></table></figure><p>步骤4 - 然后使用应用程序对象作为参数创建SQLAlchemy类的对象。该对象包含用于ORM操作的辅助函数。它还提供了一个父Model类，使用它来声明用户定义的模型。在下面的代码段中，创建了students模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy(app)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">students</span>(db.Model):</span><br><span class="line">   <span class="built_in">id</span> = db.Column(<span class="string">&#x27;student_id&#x27;</span>, db.Integer, primary_key = <span class="literal">True</span>)</span><br><span class="line">   name = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">   city = db.Column(db.String(<span class="number">50</span>))  </span><br><span class="line">   addr = db.Column(db.String(<span class="number">200</span>))</span><br><span class="line">   pin = db.Column(db.String(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, city, addr,pin</span>):</span><br><span class="line">   self.name = name</span><br><span class="line">   self.city = city</span><br><span class="line">   self.addr = addr</span><br><span class="line">   self.pin = pin</span><br></pre></td></tr></table></figure><p>步骤5 - 要创建&#x2F;使用URI中提及的数据库，请运行create_all()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p>SQLAlchemy的Session对象管理ORM对象的所有持久性操作。<br>以下session方法执行CRUD操作：</p><ul><li><p>db.session.add (模型对象) - 将记录插入到映射表中</p></li><li><p>db.session.delete (模型对象) - 从表中删除记录</p></li><li><p>model.query.all() - 从表中检索所有记录（对应于SELECT查询）。</p></li></ul><p>您可以通过使用filter属性将过滤器应用于检索到的记录集。例如，要在学生表中检索city &#x3D;’Hyderabad’的记录，请使用以下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Students.query.filter_by(city = <span class="string">&#x27;Hyderabad&#x27;</span>).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><p>有了这么多的背景，现在我们将为我们的应用程序提供视图函数来添加学生数据。</p><p>应用程序的入口点是绑定到’&#x2F;’ URL的show_all()函数。学生表的记录集作为参数发送到HTML模板。模板中的服务器端代码以HTML表格形式呈现记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_all</span>():</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&#x27;show_all.html&#x27;</span>, students = students.query.<span class="built_in">all</span>() )</span><br></pre></td></tr></table></figure><br><p>模板（’show_all.html’）的HTML脚本如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span> = <span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;show_all&#x27;) &#125;&#125;&quot;</span>&gt;</span>Comments - Flask </span><br><span class="line">            SQLAlchemy example<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      &#123;%- for message in get_flashed_messages() %&#125;</span><br><span class="line">         &#123;&#123; message &#125;&#125;</span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Students (<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;new&#x27;) &#125;&#125;&quot;</span>&gt;</span>Add Student</span><br><span class="line">         <span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>City<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>Pin<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            &#123;% for student in students %&#125;</span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.city &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.addr &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.pin &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述网页包含指向’&#x2F; new’ URL映射new()函数的超链接。单击时，将打开“学生信息”表单。 数据在 POST方法中发布到相同的URL。</p><br><p>模板（’new.html’）的HTML脚本如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Students - Flask SQLAlchemy example<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      </span><br><span class="line">      &#123;%- for category, message in get_flashed_messages(with_categories = true) %&#125;</span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;&#123;&#123; request.path &#125;&#125;&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;name&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;email&quot;</span>&gt;</span>City<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;city&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;city&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;addr&quot;</span>&gt;</span>addr<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span> = <span class="string">&quot;addr&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;addr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;PIN&quot;</span>&gt;</span>PINCODE<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;pin&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;pin&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>当http方法被检测为POST时，表单数据被添加到学生表中，并且应用返回到显示添加数据的主页。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/new&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>():</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;city&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;addr&#x27;</span>]:</span><br><span class="line">         flash(<span class="string">&#x27;Please enter all the fields&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         student = students(request.form[<span class="string">&#x27;name&#x27;</span>], request.form[<span class="string">&#x27;city&#x27;</span>],</span><br><span class="line">            request.form[<span class="string">&#x27;addr&#x27;</span>], request.form[<span class="string">&#x27;pin&#x27;</span>])</span><br><span class="line">         </span><br><span class="line">         db.session.add(student)</span><br><span class="line">         db.session.commit()</span><br><span class="line">         </span><br><span class="line">         flash(<span class="string">&#x27;Record was successfully added&#x27;</span>)</span><br><span class="line">         <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_all&#x27;</span>))</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&#x27;new.html&#x27;</span>)</span><br></pre></td></tr></table></figure><br><p>下面给出了应用程序（app.py）的完整代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, flash, url_for, redirect, render_template</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///students.sqlite3&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;random string&quot;</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">students</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(<span class="string">&#x27;student_id&#x27;</span>, db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    city = db.Column(db.String(<span class="number">50</span>))</span><br><span class="line">    addr = db.Column(db.String(<span class="number">200</span>))</span><br><span class="line">    pin = db.Column(db.String(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, city, addr, pin</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.city = city</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.pin = pin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_all</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;show_all.html&#x27;</span>, students=students.query.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/new&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;city&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;addr&#x27;</span>]:</span><br><span class="line">            flash(<span class="string">&#x27;Please enter all the fields&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            student = students(request.form[<span class="string">&#x27;name&#x27;</span>], request.form[<span class="string">&#x27;city&#x27;</span>],</span><br><span class="line">                               request.form[<span class="string">&#x27;addr&#x27;</span>], request.form[<span class="string">&#x27;pin&#x27;</span>])</span><br><span class="line"></span><br><span class="line">            db.session.add(student)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            flash(<span class="string">&#x27;Record was successfully added&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_all&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;new.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    db.create_all()</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask插件"><a href="#Flask插件" class="headerlink" title="Flask插件"></a>Flask插件</h2><h3 id="Flask-cache"><a href="#Flask-cache" class="headerlink" title="Flask-cache"></a>Flask-cache</h3><p>缓存数据</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-cache</span><br></pre></td></tr></table></figure><br><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cache <span class="keyword">import</span> Cache</span><br><span class="line">cache = Cache(config=&#123;</span><br><span class="line">    <span class="string">&#x27;CACHE_TYPE&#x27;</span>:<span class="string">&#x27;simple&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache.cached(<span class="params">timeout=<span class="number">3600</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;loading...&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;home&#x27;</span></span><br></pre></td></tr></table></figure><br><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p><strong>什么是钩子（中间件Middleware)</strong><br>钩子或叫钩子函数，是指在执行函数和目标函数之间挂载的函数，框架开发者给调用方提供一个point-挂载点，是一种AoP切面编程思想.</p><p><strong>常用的钩子函数</strong></p><ul><li>before_first_request：处理第一次请求之前执行．</li><li>before_request：在每次请求之前执行．通常使用这个钩子函数预处理一些变量，实现反爬等．</li><li>after_request：注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行．</li><li>teardown_appcontext：当APP上下文被移除之后执行的函数,可以进行数据库的提交或者回滚．</li></ul><br><p><strong>AOP反爬策略</strong></p><p>防止非浏览器访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_bef</span>():</span><br><span class="line">   <span class="built_in">print</span>(request.user_agent)</span><br><span class="line">   <span class="keyword">if</span>(<span class="string">&#x27;python&#x27;</span> <span class="keyword">in</span> request.user_agent.string):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;你正在使用python爬虫，再见！&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;good bye&#x27;</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用缓存反爬，相同ip地址1秒内不允许重复访问</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_bef</span>():</span><br><span class="line">   <span class="comment"># 针对ip做反爬</span></span><br><span class="line">   ip = request.remote_addr</span><br><span class="line">   <span class="keyword">if</span> cache.get(ip):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;小伙子别爬了&#x27;</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      cache.<span class="built_in">set</span>(<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;value&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10分钟学会网络请求的一切</title>
      <link href="/2023/08/21/%E5%89%8D%E7%AB%AF/10%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9A%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%80%E5%88%87/"/>
      <url>/2023/08/21/%E5%89%8D%E7%AB%AF/10%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9A%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%80%E5%88%87/</url>
      
        <content type="html"><![CDATA[<h1 id="10分钟学会网络请求"><a href="#10分钟学会网络请求" class="headerlink" title="10分钟学会网络请求"></a>10分钟学会网络请求</h1><h2 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h2><p><strong>get请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置请求方式、请求地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置请求头</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求状态</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求成功，状态码为200时执行</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="title class_">XMLHttpRequest</span>.<span class="property">DONE</span> &amp;&amp; xhr.<span class="property">status</span> ===<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>post请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://localhost:5000/post&#x27;</span>,<span class="literal">true</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name=ysk&amp;age=22&#x27;</span>)</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="title class_">XMLHttpRequest</span>.<span class="property">DONE</span> &amp;&amp; xhr.<span class="property">status</span> ===<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Axios请求"><a href="#Axios请求" class="headerlink" title="Axios请求"></a>Axios请求</h2><p><strong>get请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> res_get = <span class="keyword">await</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;asd&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res_get);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><strong>post请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    request.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res_post = <span class="keyword">await</span> request.<span class="title function_">post</span>(<span class="string">&quot;/post&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;asd&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res_post);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>首先需要了解到浏览器的同源策略，同源策略是最核心也是最基本的安全功能，缺少同源策略浏览器的正常功能可能会受到影响。同源策略会阻止一个域的javascript脚本和另外一个域的能容进行交互。同源（即指在同一个域）就是两个页面具有相同的协议（protocol）、主机（host）和端口号（port）。</p><blockquote><p>当一个请求url的<strong>协议、域名、端口</strong>三个之间<strong>任意一个</strong>与当前页面url不同即为跨域。</p></blockquote><h3 id="Vue中用Axios解决跨域问题"><a href="#Vue中用Axios解决跨域问题" class="headerlink" title="Vue中用Axios解决跨域问题"></a>Vue中用Axios解决跨域问题</h3><blockquote><p> 配置代理可解决使用Axios不能直接进行跨域的问题。</p></blockquote><p><strong>原理</strong>：客户端请求服务端的数据存在跨域问题，而服务器和服务器之间可以相互请求数据，没有跨域的概念（前提是服务器没有设置禁止跨域的权限问题），也就是说，可以配置一个代理的服务器请求另一个服务器中的数据，然后把请求出来的数据返回到代理服务器中，代理服务器再返回数据给我们的客户端，如此即可实现跨域访问数据。<img src="https://img-blog.csdnimg.cn/20210914001700652.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6L-b5Ye76Zi_5paH,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>步骤一：配置baseURL</strong>,（即下面代码段中的 axios.defaults.baseURL &#x3D; ‘&#x2F;api&#x2F;‘，作用是我们每次发送的请求都会带一个&#x2F;api&#x2F;的前缀。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 配置请求的根路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;/api/&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>步骤二：配置代理</strong>，（配置在vue.config.js文件中的proxyTable字段中）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dev</span>: &#123;</span><br><span class="line">    <span class="attr">proxyTable</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>:<span class="string">&#x27;http://127.0.0.1:8888/api/private/v1/&#x27;</span>, <span class="comment">// 你请求的第三方接口</span></span><br><span class="line">        <span class="attr">changeOrigin</span>:<span class="literal">true</span>, <span class="comment">/* 在本地会创建一个虚拟服务端，然后发送请求的数据，</span></span><br><span class="line"><span class="comment">        并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题 */</span></span><br><span class="line">        <span class="attr">pathRewrite</span>:&#123;  <span class="comment">// 路径重写，</span></span><br><span class="line">            <span class="comment">/* 替换target中的请求地址，也就是说以后你在请求</span></span><br><span class="line"><span class="comment">            http://127.0.0.1:8888/api/private/v1/这个地址的时候直接写成/api/即可。 */</span></span><br><span class="line">          <span class="string">&#x27;^/api/&#x27;</span>: <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>最后附上一个详细的vue.config.js的配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">// 项目部署的基础路径</span></span><br><span class="line"><span class="comment">// 我们默认你的应用将会部署在域名的根部，比如 https://www.xxx.com/</span></span><br><span class="line"><span class="comment">// 如果你的应用时部署在一个子路径下，那么你需要在这里指定子路径。</span></span><br><span class="line"><span class="comment">// 比如，如果你的应用部署在https://www.xxx.com/public/</span></span><br><span class="line"><span class="comment">// 那么将这个值改为 `/public/`</span></span><br><span class="line"><span class="comment">// 部署生产环境和开发环境下的URL：可对当前环境进行区分，baseUrl 从 Vue CLI 3.3 起已弃用，要使用publicPath </span></span><br><span class="line"><span class="comment">/* baseUrl: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;./&#x27; : &#x27;/&#x27; */</span></span><br><span class="line"><span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;/public/&#x27;</span> : <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line"><span class="comment">/* 输出文件目录：在npm run build时，生成文件的目录名称 */</span></span><br><span class="line"><span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line"><span class="comment">/* 放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录 */</span></span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&quot;assets&quot;</span>,</span><br><span class="line">    <span class="comment">/* 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度 */</span></span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">/* 默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存，你可以通过将这个选项设为 false 来关闭文件名哈希。(false的时候就是让原来的文件名不改变) */</span></span><br><span class="line">    <span class="attr">filenameHashing</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">/* 代码保存时进行eslint检测 */</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* webpack-dev-server 相关配置 */</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="comment">/* 自动打开浏览器 */</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/* 设置为0.0.0.0则所有的地址均能访问 */</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8066</span>,</span><br><span class="line">        <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">hotOnly</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">/* 使用代理 */</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123; <span class="comment">// string | Object</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">/* 目标代理服务器地址 */</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://xxx/&#x27;</span>,</span><br><span class="line">                <span class="comment">/* 允许跨域 */</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//规定请求地址以什么作为开头</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> axios </tag>
            
            <tag> fetch api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaApi</title>
      <link href="/2023/08/21/java/javaApi/"/>
      <url>/2023/08/21/java/javaApi/</url>
      
        <content type="html"><![CDATA[<h1 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h1><p>来自<code>spring-bean</code>依赖</p><p>拷贝共同属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将v1的属性拷贝到v2</span></span><br><span class="line">BeanUtils.copyProperties(v1,v2);</span><br></pre></td></tr></table></figure><h1 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h1><p>来自<code>spring-core</code>依赖</p><p>判断集合是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line">CollectionUtils.isEmpty(list)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/18/hello-world/"/>
      <url>/2023/08/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
