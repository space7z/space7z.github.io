<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/01/08/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/08/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="软件测试的定义"><a href="#软件测试的定义" class="headerlink" title="软件测试的定义"></a>软件测试的定义</h2><p>使用技术手段验证软件是否满足需求</p><h2 id="常见的测试分类"><a href="#常见的测试分类" class="headerlink" title="常见的测试分类"></a>常见的测试分类</h2><h3 id="1、按阶段划分"><a href="#1、按阶段划分" class="headerlink" title="1、按阶段划分"></a>1、按阶段划分</h3><ul><li><p>单元测试：针对程序源代码进行测试</p></li><li><p>集成测试：针对程序接口进行测试</p></li><li><p>系统测试：针对程序功能、非功能进行测试</p></li><li><p>验收测试：使用不同用户（内测、公测）进行测试</p></li></ul><h3 id="2、按代码可见度划分"><a href="#2、按代码可见度划分" class="headerlink" title="2、按代码可见度划分"></a>2、按代码可见度划分</h3><ul><li><p>黑盒测试：不关注源代码，针对程序UI功能进行测试。（源代码不可见，UI功能可见）</p></li><li><p>灰盒测试：针对程序部分代码进行测试（接口）。（部分源代码可见，功能不可见）</p></li><li><p>白盒测试：针对程序源代码进行测试。（全部代码可见，UI功能不可见）</p></li></ul><h3 id="3、专项"><a href="#3、专项" class="headerlink" title="3、专项"></a>3、专项</h3><ul><li><p>性能测试</p></li><li><p>安全测试</p></li></ul><h2 id="质量模型的重点5项"><a href="#质量模型的重点5项" class="headerlink" title="质量模型的重点5项"></a>质量模型的重点5项</h2><ol><li>功能</li><li>性能</li><li>兼容</li><li>易用</li><li>安全</li></ol><h2 id="测试流程的6各步骤"><a href="#测试流程的6各步骤" class="headerlink" title="测试流程的6各步骤"></a>测试流程的6各步骤</h2><p>1、需求评审</p><ul><li><p>角色</p><ul><li><p>产品经理</p></li><li><p>开发</p></li><li><p>测试</p></li></ul></li><li><p>目的</p><ul><li>需求理解一致</li><li>知道被测项目有哪些功能模块</li></ul></li></ul><p>2、测试计划</p><ol><li>测什么</li><li>谁来测</li><li>怎么测</li></ol><p>3、用例设计</p><ul><li>针对穷举法进行设计</li></ul><p>4、用例执行</p><p>5、缺陷管理</p><p>6、测试报告</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><h3 id="1、什么是用例？"><a href="#1、什么是用例？" class="headerlink" title="1、什么是用例？"></a>1、什么是用例？</h3><p>用例：用户使用的案例</p><h3 id="2、用例设计编写格式"><a href="#2、用例设计编写格式" class="headerlink" title="2、用例设计编写格式"></a>2、用例设计编写格式</h3><p>测试模板有8有要素</p><p>1、测试编号</p><p>项目简称_模块简称_编号</p><p>2、用例标题</p><p>预期结果（测试点）</p><p>3、项目&#x2F;模块</p><p>用例所属项目或模块</p><p>4、优先级</p><p>P0-P4（P0最高）</p><p>5、前置条件&#x2F;预置条件</p><p>操作步骤之前的操作</p><p>6、测试步骤</p><p>执行用例步骤</p><p>7、测试数据</p><p>执行步骤中的重点数据</p><p>8、预期结果</p><p>用例执行结果+不同角色隐性结果</p><table><thead><tr><th>用例编号</th><th>用例标题</th><th>项目&#x2F;模块</th><th>优先级</th><th>前置条件</th><th>测试步骤</th><th>测试数据</th><th>预期结果</th></tr></thead><tbody><tr><td>hm_login_001</td><td>登陆成功（正确手机号）</td><td>登录</td><td>P0</td><td>1、打开登录页面2、手机已注册</td><td>1、输入手机号2、点击发送验证码按钮3、拖曳滑块成功4、输入验证码5、勾选协议6、点击登录</td><td>1、手机：已注册手机号2、其他输入正确数据</td><td>1、数据文本框状态为绿色2、登录成功、跳转到主页</td></tr><tr><td>hm_login_001</td><td>登录失败（手机号为空）</td><td>登录</td><td>p1</td><td>1、打开登录页面</td><td>1、输入手机号2、点击发送验证码3、输入验证码4、勾选协议5、点击登录</td><td>1、手机：为空2、验证码：88883、其他输入正确数据</td><td>1、手机文本框状态为红色2、点击发送验证码按钮，不弹出滑块3、登录失败，提示手机号不能为空</td></tr></tbody></table><h3 id="测试用例的设计方法"><a href="#测试用例的设计方法" class="headerlink" title="测试用例的设计方法"></a>测试用例的设计方法</h3><h4 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h4><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>在所有测试数据中，具有某种共同特征的数据集合进行划分。</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul><li>有效等价类：满足需求的数据集合</li><li>无效等价类：不满足需求的数据集合</li></ul><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li>明确需求</li><li>确定有效和无效等价类</li><li>提取数据编写测试用例</li></ol><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>比如对qq登录进行测试</p><p>1、明确需求：</p><ul><li>长度：要求为6~10位自然数</li><li>类型：自然数</li></ul><p>2、划分有效等价和无效等价</p><ul><li><p>有效：8位</p></li><li><p>无效：</p><ul><li>3位</li><li>12位</li><li>8为非自然数</li></ul></li></ul><p>3、提取数据编写用例</p><ul><li>有效：12345678</li><li>无效：123456789012</li></ul><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><p>针对：需要有大量数据测试输入，但是没法穷举测试的地方。</p><ul><li>输入框</li><li>下拉列表</li><li>单选复选框</li></ul><p>典型代表：页面的输入框类测试。</p><h4 id="边界值法"><a href="#边界值法" class="headerlink" title="边界值法"></a>边界值法</h4><ul><li>介绍</li></ul><p>边界值分析法就是对输入或输出边界值进行测试的.也是一种黑盒测试.边界值分析法通常作为等价类划分法的补充,其测试用例来自等价类的边界;长期的经验得知,大量的错误是发现在输入或输出范围的边界上，而不是发生再输入输出范围的内部，因此针对各种边界情况设计测试用例，可以查出更多错误.</p><ul><li><p>与等价类划分法的区别:</p><ul><li><p>等价类划分法可以挑选等价范围内任意一个数据作为代表边界值分析法要求每个边界值都要作为测试条件。</p></li><li><p>边界值分析法不仅考虑输入条件,同样考虑输出产生的测试情况。</p></li></ul></li></ul><h2 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h2><h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><p>是软件开发瀑布模型的变种，主要反映了测试活动与分析与设计的关系；</p><p>局限性：把测试作为编码之后的最后一个活动，需求分析等前期产生的错误直到后期的验收测试才可以发现。</p><h3 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h3><p>在V模型的基础上，增加开发阶段的同步测试，形成W模型；测试与开发同步进行，有利用及早的发现问题；</p><p>局限性：仍把开发活动看成是从需求开始到编码结束的串行活动，只有上一阶段完成后，才可以开始下一阶段的活动，不能支持迭代，自发性及其变更调整。</p><h2 id="软件缺陷"><a href="#软件缺陷" class="headerlink" title="软件缺陷"></a>软件缺陷</h2><ul><li>定义<ul><li>从内部看，软件缺陷试产品开发或者维护过程中存在的错误、毛病等各种问题</li><li>从外部看，软件缺陷是系统所需要实现的某种功能的失效或者违背</li><li>总的来说，缺陷就是问题，最终表现为所需要的功能没有完全实现，没有满足用户的需求。</li></ul></li></ul><h1 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h1><h2 id="什么是自动化测试？"><a href="#什么是自动化测试？" class="headerlink" title="什么是自动化测试？"></a>什么是自动化测试？</h2><ul><li>程序测试程序</li><li>代码代替思维</li><li>脚本代替人工</li></ul><p>自动化测试覆盖</p><ul><li>黑盒自动化测试</li><li>白盒自动化测试</li><li>性能测试</li><li>压力测试</li><li>GUI测试</li><li>安全性测试</li></ul><p>狭义定义：</p><p>自动化测试通过工具记录或编写脚本的方式模拟手工测试的过程，通过回放或运行脚本来执行测试用例，从而代替人工对系统的功能进行验证。</p><p>广义定义：</p><p>自动化测试包括一切通过工具（程序)的方式来代替或辅助手工测试的行为，包括接口测试(REST Assured、Postman) 、性能测试工具(LoadRunner、JMeter)和自己所写的一段程序。</p><p>作用：</p><p>节省人力、物力、时间、硬件资源等，提升测试效率，特别是对于烦琐重复的测试用例，可以使测试人员更专注于新的测试模块的建立和开发，从而提高测试覆盖率。</p><h2 id="自动化测试常用工具"><a href="#自动化测试常用工具" class="headerlink" title="自动化测试常用工具"></a>自动化测试常用工具</h2><h3 id="接口-UI自动化测试框架"><a href="#接口-UI自动化测试框架" class="headerlink" title="接口&#x2F;UI自动化测试框架"></a>接口&#x2F;UI自动化测试框架</h3><ul><li>Robot Framework</li><li>Selenium</li><li>Jmeter</li><li>SoapUI</li></ul><h3 id="移动自动化测试框架"><a href="#移动自动化测试框架" class="headerlink" title="移动自动化测试框架"></a>移动自动化测试框架</h3><ul><li>Robotium</li><li>Applum</li><li>MonkeyRunner</li><li>Monkey</li></ul><h2 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h2><p>官方文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.selenium.dev/documentation/webdriver/</span><br></pre></td></tr></table></figure><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Selenium是一个用于Web应用程序测试的工具;中文的意思（硒)</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>开源软件：源代码开放可以根据需要来增加工具的某些功能跨平台: linux . windows . mac</li><li>核心功能：就是可以在多个浏览器上进行自动化测试多语言:Java、Python、C#、JavaScript、Ruby等</li><li>成熟稳定：目前已经被google ,百度，腾讯等公司广泛使用</li><li>功能强大：能够实现类似商业工具的大部分功能，因为开源性，可实现定制化功能</li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>使用版本：4.11.0</p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -i https://mirrors.aliyun.com/pypi/simple/ selenium</span><br></pre></td></tr></table></figure><p>基本配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前页面url</span></span><br><span class="line">driver.current_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前html源码</span></span><br><span class="line">driver.page_source</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前页面标题</span></span><br><span class="line">driver.title</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器名称(chrome)</span></span><br><span class="line">driver.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对页面进行截图，返回二进制数据</span></span><br><span class="line">driver.get_screenshot_as_png()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置浏览器尺寸</span></span><br><span class="line">driver.get_window_size()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器尺寸，位置</span></span><br><span class="line">driver.get_window_rect()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取浏览器位置(左上角)</span></span><br><span class="line">driver.get_window_position()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置浏览器尺寸</span></span><br><span class="line">driver.set_window_size(width=<span class="number">1000</span>, height=<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置浏览器位置(左上角)</span></span><br><span class="line">driver.set_window_position(x=<span class="number">500</span>, y=<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置浏览器的尺寸，位置</span></span><br><span class="line">driver.set_window_rect(x=<span class="number">200</span>, y=<span class="number">400</span>, width=<span class="number">1000</span>, height=<span class="number">600</span>)</span><br></pre></td></tr></table></figure><h4 id="1、元素操作方法"><a href="#1、元素操作方法" class="headerlink" title="1、元素操作方法"></a>1、元素操作方法</h4><h5 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ele = driver.find_element(By.XPATH,&#x27;XPATH&#x27;)</span><br><span class="line">ele = driver.find_element(By.CLASS_NAME,&#x27;CLASS_NAME&#x27;)</span><br><span class="line">ele = driver.find_element(By.CSS_SELECTOR,&#x27;CSS_SELECTOR&#x27;)</span><br><span class="line">ele = driver.find_element(By.ID,&#x27;ID&#x27;)</span><br><span class="line">ele = driver.find_element(By.LINK_TEXT,&#x27;LINK_TEXT&#x27;)</span><br><span class="line">ele = driver.find_element(By.PARTIAL_LINK_TEXT,&#x27;PARTIAL_LINK_TEXT&#x27;)</span><br><span class="line">ele = driver.find_element(By.TAG_NAME,&#x27;TAG_NAME&#x27;)</span><br></pre></td></tr></table></figure><h5 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入方法:</span><br><span class="line">ele.send_keys() </span><br><span class="line"></span><br><span class="line">点击方法：</span><br><span class="line">ele.click()</span><br><span class="line"></span><br><span class="line">清空方法</span><br><span class="line">ele.clear()</span><br></pre></td></tr></table></figure><blockquote><p>注意：输入方法之前一定要清空操作</p></blockquote><p>基本示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求</span></span><br><span class="line">ele = driver.find_element(By.ID,<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">ele.send_keys(<span class="string">&#x27;周杰伦&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空</span></span><br><span class="line">ele.clear()</span><br><span class="line">ele.send_keys(<span class="string">&#x27;王嘉尔&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间轴看效果</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭页面</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h5 id="等待元素出现"><a href="#等待元素出现" class="headerlink" title="等待元素出现"></a>等待元素出现</h5><p>有时候某个元素不是直接出现的，如果不做判断则会导致程序崩溃，因此一般可以做异常处理，这里还有等待元素出现的方法。</p><p>1、为什么要设置元素等待</p><ul><li>由于电脑配置或网络原因，在查找元素时，元素代码未在第一时间内被加载出来，而抛出未找到元素异常。</li></ul><p>2、什么是元素等待</p><ul><li>元素在第一次未找到时，元素等待设置的时长被激活，如果在设置的有效时长内找到元素，继续执行代码，如果超出设置的时长未找打元素，抛出未找到元素异常。</li></ul><p>首先，需要导入等待的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br></pre></td></tr></table></figure><p>然后，使用以下方法等待元素出现，<code>driver</code>就是浏览器驱动，<code>timeout</code>就是等待的时长，<code>until</code>后是判断元素是否出现的</p><p>方式一 显式等待：针对全局元素生效</p><p>等待元素出现之后返回元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例1</span></span><br><span class="line">el = WebDriverWait(driver, timeout=<span class="number">3</span>).until(<span class="keyword">lambda</span> d: d.find_element_by_tag_name(<span class="string">&quot;p&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例2</span></span><br><span class="line">element = WebDriverWait(driver, <span class="number">5</span>, <span class="number">0.5</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.ID, <span class="string">&#x27;kw&#x27;</span>)),</span><br><span class="line">                                           message=<span class="string">&#x27;超时啦!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>方式二 隐式等待：针对全局元素生效</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.implicitly_wait(<span class="number">30</span>) <span class="comment"># 一般情况下设置30秒</span></span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://blog.csdn.net/qq_43965708&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line">driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;耗时：<span class="subst">&#123;time()-start&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>代码运行到 <code>driver.find_element_by_id(&#39;kw&#39;)</code> 这句之后触发隐式等待，在轮询检查 5s 后仍然没有定位到元素，抛出异常。</p></blockquote><h4 id="2、浏览器操作方法"><a href="#2、浏览器操作方法" class="headerlink" title="2、浏览器操作方法"></a>2、浏览器操作方法</h4><p>常用的浏览器操作系统API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、driver.maximize_window()  # 最大化浏览器</span><br><span class="line">2、driver.set_window_size(w,h)  # 设置浏览器大小 单位像素 【了解】</span><br><span class="line">3、driver.set_window_position(x,y)  # 设置浏览器位置  【了解】</span><br><span class="line">4、driver.back() # 后退操作</span><br><span class="line">5、driver.forward() # 前进操作</span><br><span class="line">6、driver.refrensh() # 刷新操作</span><br><span class="line">7、driver.close() # 关闭当前主窗口（主窗口：默认启动那个界面，就是主窗口）</span><br><span class="line">8、driver.quit() # 关闭driver对象启动的全部页面</span><br><span class="line">9、driver.title # 获取当前页面title信息</span><br><span class="line">10、driver.current_url # 获取当前页面url信息</span><br></pre></td></tr></table></figure><h4 id="3、鼠标控制"><a href="#3、鼠标控制" class="headerlink" title="3、鼠标控制"></a>3、鼠标控制</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>click()</td><td>单击左键</td></tr><tr><td>context_click()</td><td>单击右键</td></tr><tr><td>double_click()</td><td>双击</td></tr><tr><td>drag_and_drop()</td><td>拖动</td></tr><tr><td>move_to_element()</td><td>鼠标悬停</td></tr><tr><td>perform()</td><td>执行所有ActionChains中存储的动作</td></tr></tbody></table><p>单击左键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定位搜索按钮</span></span><br><span class="line">button = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;toolbar-search-button&quot;]/span&#x27;</span>)</span><br><span class="line"><span class="comment"># 执行单击操作</span></span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><p>单击右键</p><p>鼠标右击的操作与左击有很大不同，需要使用 <code>ActionChains</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ele = driver.find_element(By.ID,<span class="string">&quot;su&quot;</span>)</span><br><span class="line"><span class="comment"># 右击</span></span><br><span class="line">ActionChains(driver).context_click(ele).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间轴看效果</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭页面</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>双击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行双击动作</span></span><br><span class="line">ActionChains(driver).double_click(ele).perform()</span><br></pre></td></tr></table></figure><p>拖动</p><p>模拟鼠标拖动操作，该操作有两个必要参数</p><ul><li>source：鼠标拖动的元素</li><li>target：鼠标拖至并释放的目标元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line">ele_input = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)</span><br><span class="line">ele_input.send_keys(<span class="string">&quot;图片&quot;</span>)</span><br><span class="line">ele_btn = driver.find_element(By.ID,<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line">ele_btn.click()</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">ele_img = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;1&quot;]/div/div[1]/div[2]/div[1]/a[1]/img&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行拖动动作</span></span><br><span class="line">ActionChains(driver).drag_and_drop(ele_img, ele_input).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间轴看效果</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭页面</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>鼠标悬停</p><p>模拟悬停的作用一般是为了显示隐藏的下拉框，比如 CSDN 主页的收藏栏，我们看一下效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line">ele_more = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;s-top-left&quot;]/div/a&#x27;</span>)</span><br><span class="line"><span class="comment"># 悬停</span></span><br><span class="line">ActionChains(driver).move_to_element(ele_more).perform()</span><br><span class="line"><span class="comment"># 时间轴看效果</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 关闭页面</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="4、键盘操作"><a href="#4、键盘操作" class="headerlink" title="4、键盘操作"></a>4、键盘操作</h4><p>键盘对应的方法在Keys类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br></pre></td></tr></table></figure><p>应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单键</span></span><br><span class="line">element.send_keys(Keys.XXX)</span><br><span class="line"><span class="comment"># 组合键</span></span><br><span class="line">element.send_keys(Keys.XXX, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 注意这里的组合键都是小写</span></span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>) <span class="comment"># 一般情况下设置30秒</span></span><br><span class="line"></span><br><span class="line">ele_inp = driver.find_element(By.ID,<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ele_inp.send_keys(<span class="string">&quot;周杰伦&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全选</span></span><br><span class="line">ele_inp.send_keys(Keys.CONTROL,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">ele_inp.send_keys(Keys.CONTROL,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 清空</span></span><br><span class="line">ele_inp.clear()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 粘贴</span></span><br><span class="line">ele_inp.send_keys(Keys.CONTROL,<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间轴看效果</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭页面</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="5、下拉框"><a href="#5、下拉框" class="headerlink" title="5、下拉框"></a>5、下拉框</h4><p>为什么单独使用下拉框？</p><ul><li>如果option选项没有value值的化，css定位或其他定位就不太方便。</li></ul><p><strong>应用</strong></p><p>1、导包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br></pre></td></tr></table></figure><p>2、实例化下拉框</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = Select(element)</span><br></pre></td></tr></table></figure><p>3、调用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.select_by_index()</span><br></pre></td></tr></table></figure><p><strong>Select类提供的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过索引定位选择</span></span><br><span class="line">select_by_index()</span><br><span class="line"><span class="comment"># 通过value值选择</span></span><br><span class="line">select _by_value()</span><br><span class="line"><span class="comment"># 通过的显示文本选择</span></span><br><span class="line">select_by_visible_text()</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&#x27;http://127.0.0.1:5500/index.html&#x27;</span>)</span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>) <span class="comment"># 一般情况下设置30秒</span></span><br><span class="line"></span><br><span class="line">ele_inp = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;select_ele&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化select元素</span></span><br><span class="line">s = Select(ele_inp)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 通过索引选择</span></span><br><span class="line">s.select_by_index(<span class="number">1</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 通过value值选择</span></span><br><span class="line">s.select_by_value(<span class="string">&quot;option4&quot;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 通过文本值选择</span></span><br><span class="line">s.select_by_visible_text(<span class="string">&quot;选项3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间轴看效果</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭页面</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="6、弹出框"><a href="#6、弹出框" class="headerlink" title="6、弹出框"></a>6、弹出框</h4><p>为什么要处理弹出框？</p><ul><li>一旦出现弹出框，如果不进行处理，则后续操作不可实现</li></ul><p>弹窗分类</p><ul><li>系统弹窗：JS实现</li><li>自定义弹窗：前端代码封装</li></ul><p>对话框的分类：</p><ul><li>alert：警告框</li><li>confirm：确认框</li><li>prompt：提示框</li></ul><p>处理步骤</p><p>1、切换到对话框</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.alert</span><br></pre></td></tr></table></figure><p>2、处理对话框</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert.text <span class="comment"># 获取文本</span></span><br><span class="line">alert.accept() <span class="comment"># 接受</span></span><br><span class="line">alert.dismiss() <span class="comment"># 拒接</span></span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&#x27;http://127.0.0.1:5500/index.html&#x27;</span>)</span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>) <span class="comment"># 一般情况下设置30秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换对话框</span></span><br><span class="line">alert = driver.switch_to.alert</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;文本内容是：&#x27;</span>,alert.text)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受</span></span><br><span class="line">alert.accept()</span><br><span class="line"><span class="comment"># 拒绝</span></span><br><span class="line"><span class="comment"># alert.dismiss()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间轴看效果</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭页面</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="7、滚动轮"><a href="#7、滚动轮" class="headerlink" title="7、滚动轮"></a>7、滚动轮</h4><p>为什么要有滚动条？</p><ul><li>在一些特殊场景中，一些按钮是在页面最下角，需要使用滚动条拉到最底层。</li></ul><p>操作步骤</p><p>Selenium框架中没有专门处理滚动条的方法，需要通过调用 <code>Js</code> 代码实现操作；</p><p>1、设置操作滚动条操作语句</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">js_down=<span class="string">&quot;window.scollTo(0,1000)&quot;</span></span><br><span class="line"><span class="comment"># 0:为左边距-----》水平滚动条</span></span><br><span class="line"><span class="comment"># 1000: 为垂直滚动条</span></span><br></pre></td></tr></table></figure><p>2、调用执行js方法，将设置js语句传入方法中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(js_down)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://blog.csdn.net/qq_43965708/article/details/120658713?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170408129016800225533318%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170408129016800225533318&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120658713-null-null.142^v99^pc_search_result_base5&amp;utm_term=selenium&amp;spm=1018.2226.3001.4187&#x27;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>) <span class="comment"># 一般情况下设置30秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 滑动到具体位置</span></span><br><span class="line"><span class="comment"># js_down = &quot;window.scrollTo(0,1000)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向下滑动至目标元素可见</span></span><br><span class="line">js_to_target = <span class="string">&quot;arguments[0].scrollIntoView();&quot;</span></span><br><span class="line"><span class="comment"># 向上滑动至目标元素</span></span><br><span class="line">js_to_target_revel = <span class="string">&quot;arguments[0].scrollIntoView(false);&quot;</span></span><br><span class="line"><span class="comment"># 定位要滑动到的元素</span></span><br><span class="line">ele = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;content_views&quot;]/h3[1]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 滑动至底部</span></span><br><span class="line">js_to_bottom = <span class="string">&quot;window.scrollTo(0,document.body.scrollHeight)&quot;</span></span><br><span class="line"></span><br><span class="line">driver.execute_script(js_to_bottom)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">driver.execute_script(js_to_target_revel,ele)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间轴看效果</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭页面</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="8、切换frame表单"><a href="#8、切换frame表单" class="headerlink" title="8、切换frame表单"></a>8、切换frame表单</h4><p>应用场景</p><ul><li>处于frame 中的元素，虽然可以获取元素信息，但是代码执行时无法定位元素，因此需要<code>先切换到frame</code>，再进行元素定位操作。</li></ul><p>应用</p><p>切换方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传入的是代表frame唯一的特征值</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;id/name/element&quot;</span>) </span><br></pre></td></tr></table></figure><h4 id="9、多窗口的切换"><a href="#9、多窗口的切换" class="headerlink" title="9、多窗口的切换"></a>9、多窗口的切换</h4><p>为什么要切换多窗口？</p><ul><li><p>在 <code>selenium</code> 操作页面的时候，可能会因为点击某个链接而跳转到一个新的页面（打开了一个新标签页），这时候 <code>selenium</code> 实际还是处于上一个页面的，需要我们进行切换才能够定位最新页面上的元素。</p></li><li><p>页面是存在多窗口的，但是selenium默认焦点只会在<code>主窗口</code>上的所有元素，不切换窗口，就不能操作除主窗口以外的窗口内元素。</p></li></ul><p>如何切换</p><ul><li><p>每个窗口都有唯一的一个句柄值，那么我们就可以通过句柄值来完成窗口的切换操作</p></li><li><p>窗口切换需要使用 <code>switch_to.windows()</code> 方法。</p></li></ul><p>方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.current_window_handle <span class="comment">#(获取当前的句柄值)</span></span><br><span class="line">driver.window_handles <span class="comment">#（ 获取当前由driver启动所有窗口句柄）</span></span><br><span class="line">driver.switch_to.window(handle) <span class="comment">#—&gt; 切换窗口</span></span><br></pre></td></tr></table></figure><h4 id="10、截图操作"><a href="#10、截图操作" class="headerlink" title="10、截图操作"></a>10、截图操作</h4><p>使用方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.get_screenshot_as_file(imgepath)</span><br><span class="line"><span class="comment"># imagepath：为图片要保存的目录地址及文件名称</span></span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>) <span class="comment"># 一般情况下设置30秒</span></span><br><span class="line"></span><br><span class="line">ele = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;s-top-left&quot;]/div/a&#x27;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ele).perform()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">driver.get_screenshot_as_file(<span class="string">&quot;./screenshot/test.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间轴看效果</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭页面</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="11、验证码"><a href="#11、验证码" class="headerlink" title="11、验证码"></a>11、验证码</h4><p>1、什么是验证码？</p><ul><li>一种随机生成的信息（文字，数字，图片）</li></ul><p>2、验证码的作用？</p><ul><li>防止恶意请求</li></ul><p>3、验证码的处理</p><ul><li>这里是用cookie解决</li></ul><p>4、使用cookie 登录</p><ul><li>客户端登录账号后，将登录状态的想关 cookie 信息发给服务器保存，再发送去请求，携带cookie信息如果跟服务器保留的一致，则服务器认为客户端是登录状态。</li></ul><p>实现的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、整理cookie信息为字典数据，对应的是name和value，保存的一个变量中</span><br><span class="line">2、调用方法添加cookie</span><br><span class="line">driver.add_cookie(cookie变量)</span><br><span class="line"># 3、刷新页面 --&gt;发送cookie给服务器验证</span><br><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>实现自动登录功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="动作API（selenium4新增）"><a href="#动作API（selenium4新增）" class="headerlink" title="动作API（selenium4新增）"></a>动作API（selenium4新增）</h4><p>动作API分为四个部分，分别是<code>键盘</code>、<code>鼠标</code>、<code>笔</code>、<code>滚轮</code>。这里先说明以下公共部分的。</p><h5 id="暂停（pause）"><a href="#暂停（pause）" class="headerlink" title="暂停（pause）"></a>暂停（pause）</h5><p>光标移动，滚轮滚动期间，会有一些时间空隙，这里可以使用暂停来实现，这里是支持链式调用的，这里贴出官方给出的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clickable = driver.find_element(By.ID, <span class="string">&quot;clickable&quot;</span>)</span><br><span class="line">ActionChains(driver)\</span><br><span class="line">        .move_to_element(clickable)\</span><br><span class="line">        .pause(<span class="number">1</span>)\</span><br><span class="line">        .click_and_hold()\</span><br><span class="line">        .pause(<span class="number">1</span>)\</span><br><span class="line">        .send_keys(<span class="string">&quot;abc&quot;</span>)\</span><br><span class="line">        .perform()</span><br></pre></td></tr></table></figure><h5 id="释放所有动作"><a href="#释放所有动作" class="headerlink" title="释放所有动作"></a>释放所有动作</h5><p>当前有动作执行时，可以使用以下方法停止这些动作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActionBuilder(driver).clear_actions()</span><br></pre></td></tr></table></figure><h5 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h5><p>键盘代码表</p><p>地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/SeleniumHQ/selenium/blob/selenium-4.2.0/py/selenium/webdriver/common/keys.py#L23</span><br></pre></td></tr></table></figure><p>按下某键，以输入<code>shift+abc</code>为例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ActionChains(driver)\</span><br><span class="line">    .key_down(Keys.SHIFT)\</span><br><span class="line">    .send_keys(<span class="string">&quot;abc&quot;</span>)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure><p>弹起某键，以输入<code>shift+a</code>和<code>shift+b</code>为例，</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ActionChains(driver)\</span><br><span class="line">    .key_down(Keys.SHIFT)\</span><br><span class="line">    .send_keys(<span class="string">&quot;a&quot;</span>)\</span><br><span class="line">    .key_up(Keys.SHIFT)\</span><br><span class="line">    .send_keys(<span class="string">&quot;b&quot;</span>)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure><p>浏览器输入某串字符（不指定元素)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActionChains(driver)\</span><br><span class="line">    .send_keys(<span class="string">&quot;abc&quot;</span>)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure><p>指定元素输入字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text_input = driver.find_element(By.ID, <span class="string">&quot;textInput&quot;</span>)</span><br><span class="line">ActionChains(driver)\</span><br><span class="line">    .send_keys_to_element(text_input, <span class="string">&quot;abc&quot;</span>)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure><p>复制和粘贴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmd_ctrl = Keys.COMMAND <span class="keyword">if</span> sys.platform == <span class="string">&#x27;darwin&#x27;</span> <span class="keyword">else</span> Keys.CONTROL</span><br><span class="line">ActionChains(driver)\</span><br><span class="line">        .send_keys(<span class="string">&quot;Selenium!&quot;</span>)\</span><br><span class="line">        .send_keys(Keys.ARROW_LEFT)\</span><br><span class="line">        .key_down(Keys.SHIFT)\</span><br><span class="line">        .send_keys(Keys.ARROW_UP)\</span><br><span class="line">        .key_up(Keys.SHIFT)\</span><br><span class="line">        .key_down(cmd_ctrl)\</span><br><span class="line">        .send_keys(<span class="string">&quot;xvv&quot;</span>)\</span><br><span class="line">        .key_up(cmd_ctrl)\</span><br><span class="line">        .perform()</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="selenium隐藏指纹特征"><a href="#selenium隐藏指纹特征" class="headerlink" title="selenium隐藏指纹特征"></a>selenium隐藏指纹特征</h4><p><code>selenium</code> 对于部分网站来说十分强大，但它也不是万能的，实际上，<code>selenium</code> 启动的浏览器，有几十个特征可以被网站检测到，轻松的识别出你是爬虫。</p><p>首先你手动打开浏览器输入<a href="https://bot.sannysoft.com/%EF%BC%8C%E5%9C%A8%E7%BD%91%E7%BB%9C%E6%97%A0%E5%BC%82%E5%B8%B8%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E6%98%BE%E7%A4%BA%E5%BA%94%E8%AF%A5%E5%A6%82%E4%B8%8B%EF%BC%9A">https://bot.sannysoft.com/，在网络无异常的情况下，显示应该如下：</a></p><p>下面通过 <code>selenium</code> 来打开浏览器。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://bot.sannysoft.com/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用stealth.min.js</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置无头浏览器</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line"><span class="comment"># 无头浏览器需要添加user-agent来隐藏特征</span></span><br><span class="line">option.add_argument(<span class="string">&#x27;user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(options=option)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;stealth.min.js&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js = f.read()</span><br><span class="line"></span><br><span class="line">driver.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;source&quot;</span>: js</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&#x27;https://bot.sannysoft.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver.save_screenshot(<span class="string">&quot;page2.png&quot;</span>)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>stealth.min.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * Note: Auto-generated, do not update manually.</span></span><br><span class="line"><span class="comment"> * Generated by: https://github.com/berstend/puppeteer-extra/tree/master/packages/extract-stealth-evasions</span></span><br><span class="line"><span class="comment"> * Generated on: Mon, 25 Dec 2023 06:18:16 GMT</span></span><br><span class="line"><span class="comment"> * License: MIT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&#x27;utils =&gt; &#123;\n      if (!window.chrome) &#123;\n        // Use the exact property descriptor found in headful Chrome\n        // fetch it via `Object.getOwnPropertyDescriptor(window, \&#x27;chrome\&#x27;)`\n        Object.defineProperty(window, \&#x27;chrome\&#x27;, &#123;\n          writable: true,\n          enumerable: true,\n          configurable: false, // note!\n          value: &#123;&#125; // We\&#x27;ll extend that later\n        &#125;)\n      &#125;\n\n      // That means we\&#x27;re running headful and don\&#x27;t need to mock anything\n      if (\&#x27;app\&#x27; in window.chrome) &#123;\n        return // Nothing to do here\n      &#125;\n\n      const makeError = &#123;\n        ErrorInInvocation: fn =&gt; &#123;\n          const err = new TypeError(`Error in invocation of app.$&#123;fn&#125;()`)\n          return utils.stripErrorWithAnchor(\n            err,\n            `at $&#123;fn&#125; (eval at &lt;anonymous&gt;`\n          )\n        &#125;\n      &#125;\n\n      // There\&#x27;s a some static data in that property which doesn\&#x27;t seem to change,\n      // we should periodically check for updates: `JSON.stringify(window.app, null, 2)`\n      const STATIC_DATA = JSON.parse(\n        `\n&#123;\n  &quot;isInstalled&quot;: false,\n  &quot;InstallState&quot;: &#123;\n    &quot;DISABLED&quot;: &quot;disabled&quot;,\n    &quot;INSTALLED&quot;: &quot;installed&quot;,\n    &quot;NOT_INSTALLED&quot;: &quot;not_installed&quot;\n  &#125;,\n  &quot;RunningState&quot;: &#123;\n    &quot;CANNOT_RUN&quot;: &quot;cannot_run&quot;,\n    &quot;READY_TO_RUN&quot;: &quot;ready_to_run&quot;,\n    &quot;RUNNING&quot;: &quot;running&quot;\n  &#125;\n&#125;\n        `.trim()\n      )\n\n      window.chrome.app = &#123;\n        ...STATIC_DATA,\n\n        get isInstalled() &#123;\n          return false\n        &#125;,\n\n        getDetails: function getDetails() &#123;\n          if (arguments.length) &#123;\n            throw makeError.ErrorInInvocation(`getDetails`)\n          &#125;\n          return null\n        &#125;,\n        getIsInstalled: function getDetails() &#123;\n          if (arguments.length) &#123;\n            throw makeError.ErrorInInvocation(`getIsInstalled`)\n          &#125;\n          return false\n        &#125;,\n        runningState: function getDetails() &#123;\n          if (arguments.length) &#123;\n            throw makeError.ErrorInInvocation(`runningState`)\n          &#125;\n          return \&#x27;cannot_run\&#x27;\n        &#125;\n      &#125;\n      utils.patchToStringNested(window.chrome.app)\n    &#125;&#x27;</span>,<span class="attr">_args</span>:[]&#125;),(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;utils =&gt; &#123;\n      if (!window.chrome) &#123;\n        // Use the exact property descriptor found in headful Chrome\n        // fetch it via `Object.getOwnPropertyDescriptor(window, &#x27;chrome&#x27;)`\n        Object.defineProperty(window, &#x27;chrome&#x27;, &#123;\n          writable: true,\n          enumerable: true,\n          configurable: false, // note!\n          value: &#123;&#125; // We&#x27;ll extend that later\n        &#125;)\n      &#125;\n\n      // That means we&#x27;re running headful and don&#x27;t need to mock anything\n      if (&#x27;csi&#x27; in window.chrome) &#123;\n        return // Nothing to do here\n      &#125;\n\n      // Check that the Navigation Timing API v1 is available, we need that\n      if (!window.performance || !window.performance.timing) &#123;\n        return\n      &#125;\n\n      const &#123; timing &#125; = window.performance\n\n      window.chrome.csi = function() &#123;\n        return &#123;\n          onloadT: timing.domContentLoadedEventEnd,\n          startE: timing.navigationStart,\n          pageT: Date.now() - timing.navigationStart,\n          tran: 15 // Transition type or something\n        &#125;\n      &#125;\n      utils.patchToString(window.chrome.csi)\n    &#125;&quot;</span>,<span class="attr">_args</span>:[]&#125;),(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;(utils, &#123; opts &#125;) =&gt; &#123;\n        if (!window.chrome) &#123;\n          // Use the exact property descriptor found in headful Chrome\n          // fetch it via `Object.getOwnPropertyDescriptor(window, &#x27;chrome&#x27;)`\n          Object.defineProperty(window, &#x27;chrome&#x27;, &#123;\n            writable: true,\n            enumerable: true,\n            configurable: false, // note!\n            value: &#123;&#125; // We&#x27;ll extend that later\n          &#125;)\n        &#125;\n\n        // That means we&#x27;re running headful and don&#x27;t need to mock anything\n        if (&#x27;loadTimes&#x27; in window.chrome) &#123;\n          return // Nothing to do here\n        &#125;\n\n        // Check that the Navigation Timing API v1 + v2 is available, we need that\n        if (\n          !window.performance ||\n          !window.performance.timing ||\n          !window.PerformancePaintTiming\n        ) &#123;\n          return\n        &#125;\n\n        const &#123; performance &#125; = window\n\n        // Some stuff is not available on about:blank as it requires a navigation to occur,\n        // let&#x27;s harden the code to not fail then:\n        const ntEntryFallback = &#123;\n          nextHopProtocol: &#x27;h2&#x27;,\n          type: &#x27;other&#x27;\n        &#125;\n\n        // The API exposes some funky info regarding the connection\n        const protocolInfo = &#123;\n          get connectionInfo() &#123;\n            const ntEntry =\n              performance.getEntriesByType(&#x27;navigation&#x27;)[0] || ntEntryFallback\n            return ntEntry.nextHopProtocol\n          &#125;,\n          get npnNegotiatedProtocol() &#123;\n            // NPN is deprecated in favor of ALPN, but this implementation returns the\n            // HTTP/2 or HTTP2+QUIC/39 requests negotiated via ALPN.\n            const ntEntry =\n              performance.getEntriesByType(&#x27;navigation&#x27;)[0] || ntEntryFallback\n            return [&#x27;h2&#x27;, &#x27;hq&#x27;].includes(ntEntry.nextHopProtocol)\n              ? ntEntry.nextHopProtocol\n              : &#x27;unknown&#x27;\n          &#125;,\n          get navigationType() &#123;\n            const ntEntry =\n              performance.getEntriesByType(&#x27;navigation&#x27;)[0] || ntEntryFallback\n            return ntEntry.type\n          &#125;,\n          get wasAlternateProtocolAvailable() &#123;\n            // The Alternate-Protocol header is deprecated in favor of Alt-Svc\n            // (https://www.mnot.net/blog/2016/03/09/alt-svc), so technically this\n            // should always return false.\n            return false\n          &#125;,\n          get wasFetchedViaSpdy() &#123;\n            // SPDY is deprecated in favor of HTTP/2, but this implementation returns\n            // true for HTTP/2 or HTTP2+QUIC/39 as well.\n            const ntEntry =\n              performance.getEntriesByType(&#x27;navigation&#x27;)[0] || ntEntryFallback\n            return [&#x27;h2&#x27;, &#x27;hq&#x27;].includes(ntEntry.nextHopProtocol)\n          &#125;,\n          get wasNpnNegotiated() &#123;\n            // NPN is deprecated in favor of ALPN, but this implementation returns true\n            // for HTTP/2 or HTTP2+QUIC/39 requests negotiated via ALPN.\n            const ntEntry =\n              performance.getEntriesByType(&#x27;navigation&#x27;)[0] || ntEntryFallback\n            return [&#x27;h2&#x27;, &#x27;hq&#x27;].includes(ntEntry.nextHopProtocol)\n          &#125;\n        &#125;\n\n        const &#123; timing &#125; = window.performance\n\n        // Truncate number to specific number of decimals, most of the `loadTimes` stuff has 3\n        function toFixed(num, fixed) &#123;\n          var re = new RegExp(&#x27;^-?\\\\d+(?:.\\\\d&#123;0,&#x27; + (fixed || -1) + &#x27;&#125;)?&#x27;)\n          return num.toString().match(re)[0]\n        &#125;\n\n        const timingInfo = &#123;\n          get firstPaintAfterLoadTime() &#123;\n            // This was never actually implemented and always returns 0.\n            return 0\n          &#125;,\n          get requestTime() &#123;\n            return timing.navigationStart / 1000\n          &#125;,\n          get startLoadTime() &#123;\n            return timing.navigationStart / 1000\n          &#125;,\n          get commitLoadTime() &#123;\n            return timing.responseStart / 1000\n          &#125;,\n          get finishDocumentLoadTime() &#123;\n            return timing.domContentLoadedEventEnd / 1000\n          &#125;,\n          get finishLoadTime() &#123;\n            return timing.loadEventEnd / 1000\n          &#125;,\n          get firstPaintTime() &#123;\n            const fpEntry = performance.getEntriesByType(&#x27;paint&#x27;)[0] || &#123;\n              startTime: timing.loadEventEnd / 1000 // Fallback if no navigation occured (`about:blank`)\n            &#125;\n            return toFixed(\n              (fpEntry.startTime + performance.timeOrigin) / 1000,\n              3\n            )\n          &#125;\n        &#125;\n\n        window.chrome.loadTimes = function() &#123;\n          return &#123;\n            ...protocolInfo,\n            ...timingInfo\n          &#125;\n        &#125;\n        utils.patchToString(window.chrome.loadTimes)\n      &#125;&quot;</span>,<span class="attr">_args</span>:[&#123;<span class="attr">opts</span>:&#123;&#125;&#125;]&#125;),(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;(utils, &#123; opts, STATIC_DATA &#125;) =&gt; &#123;\n        if (!window.chrome) &#123;\n          // Use the exact property descriptor found in headful Chrome\n          // fetch it via `Object.getOwnPropertyDescriptor(window, &#x27;chrome&#x27;)`\n          Object.defineProperty(window, &#x27;chrome&#x27;, &#123;\n            writable: true,\n            enumerable: true,\n            configurable: false, // note!\n            value: &#123;&#125; // We&#x27;ll extend that later\n          &#125;)\n        &#125;\n\n        // That means we&#x27;re running headful and don&#x27;t need to mock anything\n        const existsAlready = &#x27;runtime&#x27; in window.chrome\n        // `chrome.runtime` is only exposed on secure origins\n        const isNotSecure = !window.location.protocol.startsWith(&#x27;https&#x27;)\n        if (existsAlready || (isNotSecure &amp;&amp; !opts.runOnInsecureOrigins)) &#123;\n          return // Nothing to do here\n        &#125;\n\n        window.chrome.runtime = &#123;\n          // There&#x27;s a bunch of static data in that property which doesn&#x27;t seem to change,\n          // we should periodically check for updates: `JSON.stringify(window.chrome.runtime, null, 2)`\n          ...STATIC_DATA,\n          // `chrome.runtime.id` is extension related and returns undefined in Chrome\n          get id() &#123;\n            return undefined\n          &#125;,\n          // These two require more sophisticated mocks\n          connect: null,\n          sendMessage: null\n        &#125;\n\n        const makeCustomRuntimeErrors = (preamble, method, extensionId) =&gt; (&#123;\n          NoMatchingSignature: new TypeError(\n            preamble + `No matching signature.`\n          ),\n          MustSpecifyExtensionID: new TypeError(\n            preamble +\n              `$&#123;method&#125; called from a webpage must specify an Extension ID (string) for its first argument.`\n          ),\n          InvalidExtensionID: new TypeError(\n            preamble + `Invalid extension id: &#x27;$&#123;extensionId&#125;&#x27;`\n          )\n        &#125;)\n\n        // Valid Extension IDs are 32 characters in length and use the letter `a` to `p`:\n        // https://source.chromium.org/chromium/chromium/src/+/master:components/crx_file/id_util.cc;drc=14a055ccb17e8c8d5d437fe080faba4c6f07beac;l=90\n        const isValidExtensionID = str =&gt;\n          str.length === 32 &amp;&amp; str.toLowerCase().match(/^[a-p]+$/)\n\n        /** Mock `chrome.runtime.sendMessage` */\n        const sendMessageHandler = &#123;\n          apply: function(target, ctx, args) &#123;\n            const [extensionId, options, responseCallback] = args || []\n\n            // Define custom errors\n            const errorPreamble = `Error in invocation of runtime.sendMessage(optional string extensionId, any message, optional object options, optional function responseCallback): `\n            const Errors = makeCustomRuntimeErrors(\n              errorPreamble,\n              `chrome.runtime.sendMessage()`,\n              extensionId\n            )\n\n            // Check if the call signature looks ok\n            const noArguments = args.length === 0\n            const tooManyArguments = args.length &gt; 4\n            const incorrectOptions = options &amp;&amp; typeof options !== &#x27;object&#x27;\n            const incorrectResponseCallback =\n              responseCallback &amp;&amp; typeof responseCallback !== &#x27;function&#x27;\n            if (\n              noArguments ||\n              tooManyArguments ||\n              incorrectOptions ||\n              incorrectResponseCallback\n            ) &#123;\n              throw Errors.NoMatchingSignature\n            &#125;\n\n            // At least 2 arguments are required before we even validate the extension ID\n            if (args.length &lt; 2) &#123;\n              throw Errors.MustSpecifyExtensionID\n            &#125;\n\n            // Now let&#x27;s make sure we got a string as extension ID\n            if (typeof extensionId !== &#x27;string&#x27;) &#123;\n              throw Errors.NoMatchingSignature\n            &#125;\n\n            if (!isValidExtensionID(extensionId)) &#123;\n              throw Errors.InvalidExtensionID\n            &#125;\n\n            return undefined // Normal behavior\n          &#125;\n        &#125;\n        utils.mockWithProxy(\n          window.chrome.runtime,\n          &#x27;sendMessage&#x27;,\n          function sendMessage() &#123;&#125;,\n          sendMessageHandler\n        )\n\n        /**\n         * Mock `chrome.runtime.connect`\n         *\n         * @see https://developer.chrome.com/apps/runtime#method-connect\n         */\n        const connectHandler = &#123;\n          apply: function(target, ctx, args) &#123;\n            const [extensionId, connectInfo] = args || []\n\n            // Define custom errors\n            const errorPreamble = `Error in invocation of runtime.connect(optional string extensionId, optional object connectInfo): `\n            const Errors = makeCustomRuntimeErrors(\n              errorPreamble,\n              `chrome.runtime.connect()`,\n              extensionId\n            )\n\n            // Behavior differs a bit from sendMessage:\n            const noArguments = args.length === 0\n            const emptyStringArgument = args.length === 1 &amp;&amp; extensionId === &#x27;&#x27;\n            if (noArguments || emptyStringArgument) &#123;\n              throw Errors.MustSpecifyExtensionID\n            &#125;\n\n            const tooManyArguments = args.length &gt; 2\n            const incorrectConnectInfoType =\n              connectInfo &amp;&amp; typeof connectInfo !== &#x27;object&#x27;\n\n            if (tooManyArguments || incorrectConnectInfoType) &#123;\n              throw Errors.NoMatchingSignature\n            &#125;\n\n            const extensionIdIsString = typeof extensionId === &#x27;string&#x27;\n            if (extensionIdIsString &amp;&amp; extensionId === &#x27;&#x27;) &#123;\n              throw Errors.MustSpecifyExtensionID\n            &#125;\n            if (extensionIdIsString &amp;&amp; !isValidExtensionID(extensionId)) &#123;\n              throw Errors.InvalidExtensionID\n            &#125;\n\n            // There&#x27;s another edge-case here: extensionId is optional so we might find a connectInfo object as first param, which we need to validate\n            const validateConnectInfo = ci =&gt; &#123;\n              // More than a first param connectInfo as been provided\n              if (args.length &gt; 1) &#123;\n                throw Errors.NoMatchingSignature\n              &#125;\n              // An empty connectInfo has been provided\n              if (Object.keys(ci).length === 0) &#123;\n                throw Errors.MustSpecifyExtensionID\n              &#125;\n              // Loop over all connectInfo props an check them\n              Object.entries(ci).forEach(([k, v]) =&gt; &#123;\n                const isExpected = [&#x27;name&#x27;, &#x27;includeTlsChannelId&#x27;].includes(k)\n                if (!isExpected) &#123;\n                  throw new TypeError(\n                    errorPreamble + `Unexpected property: &#x27;$&#123;k&#125;&#x27;.`\n                  )\n                &#125;\n                const MismatchError = (propName, expected, found) =&gt;\n                  TypeError(\n                    errorPreamble +\n                      `Error at property &#x27;$&#123;propName&#125;&#x27;: Invalid type: expected $&#123;expected&#125;, found $&#123;found&#125;.`\n                  )\n                if (k === &#x27;name&#x27; &amp;&amp; typeof v !== &#x27;string&#x27;) &#123;\n                  throw MismatchError(k, &#x27;string&#x27;, typeof v)\n                &#125;\n                if (k === &#x27;includeTlsChannelId&#x27; &amp;&amp; typeof v !== &#x27;boolean&#x27;) &#123;\n                  throw MismatchError(k, &#x27;boolean&#x27;, typeof v)\n                &#125;\n              &#125;)\n            &#125;\n            if (typeof extensionId === &#x27;object&#x27;) &#123;\n              validateConnectInfo(extensionId)\n              throw Errors.MustSpecifyExtensionID\n            &#125;\n\n            // Unfortunately even when the connect fails Chrome will return an object with methods we need to mock as well\n            return utils.patchToStringNested(makeConnectResponse())\n          &#125;\n        &#125;\n        utils.mockWithProxy(\n          window.chrome.runtime,\n          &#x27;connect&#x27;,\n          function connect() &#123;&#125;,\n          connectHandler\n        )\n\n        function makeConnectResponse() &#123;\n          const onSomething = () =&gt; (&#123;\n            addListener: function addListener() &#123;&#125;,\n            dispatch: function dispatch() &#123;&#125;,\n            hasListener: function hasListener() &#123;&#125;,\n            hasListeners: function hasListeners() &#123;\n              return false\n            &#125;,\n            removeListener: function removeListener() &#123;&#125;\n          &#125;)\n\n          const response = &#123;\n            name: &#x27;&#x27;,\n            sender: undefined,\n            disconnect: function disconnect() &#123;&#125;,\n            onDisconnect: onSomething(),\n            onMessage: onSomething(),\n            postMessage: function postMessage() &#123;\n              if (!arguments.length) &#123;\n                throw new TypeError(`Insufficient number of arguments.`)\n              &#125;\n              throw new Error(`Attempting to use a disconnected port object`)\n            &#125;\n          &#125;\n          return response\n        &#125;\n      &#125;&quot;</span>,<span class="attr">_args</span>:[&#123;<span class="attr">opts</span>:&#123;<span class="attr">runOnInsecureOrigins</span>:!<span class="number">1</span>&#125;,<span class="attr">STATIC_DATA</span>:&#123;<span class="title class_">OnInstalledReason</span>:&#123;<span class="attr">CHROME_UPDATE</span>:<span class="string">&quot;chrome_update&quot;</span>,<span class="attr">INSTALL</span>:<span class="string">&quot;install&quot;</span>,<span class="attr">SHARED_MODULE_UPDATE</span>:<span class="string">&quot;shared_module_update&quot;</span>,<span class="attr">UPDATE</span>:<span class="string">&quot;update&quot;</span>&#125;,<span class="title class_">OnRestartRequiredReason</span>:&#123;<span class="attr">APP_UPDATE</span>:<span class="string">&quot;app_update&quot;</span>,<span class="attr">OS_UPDATE</span>:<span class="string">&quot;os_update&quot;</span>,<span class="attr">PERIODIC</span>:<span class="string">&quot;periodic&quot;</span>&#125;,<span class="title class_">PlatformArch</span>:&#123;<span class="attr">ARM</span>:<span class="string">&quot;arm&quot;</span>,<span class="title class_">ARM64</span>:<span class="string">&quot;arm64&quot;</span>,<span class="attr">MIPS</span>:<span class="string">&quot;mips&quot;</span>,<span class="title class_">MIPS64</span>:<span class="string">&quot;mips64&quot;</span>,<span class="attr">X86_32</span>:<span class="string">&quot;x86-32&quot;</span>,<span class="attr">X86_64</span>:<span class="string">&quot;x86-64&quot;</span>&#125;,<span class="title class_">PlatformNaclArch</span>:&#123;<span class="attr">ARM</span>:<span class="string">&quot;arm&quot;</span>,<span class="attr">MIPS</span>:<span class="string">&quot;mips&quot;</span>,<span class="title class_">MIPS64</span>:<span class="string">&quot;mips64&quot;</span>,<span class="attr">X86_32</span>:<span class="string">&quot;x86-32&quot;</span>,<span class="attr">X86_64</span>:<span class="string">&quot;x86-64&quot;</span>&#125;,<span class="title class_">PlatformOs</span>:&#123;<span class="attr">ANDROID</span>:<span class="string">&quot;android&quot;</span>,<span class="attr">CROS</span>:<span class="string">&quot;cros&quot;</span>,<span class="attr">LINUX</span>:<span class="string">&quot;linux&quot;</span>,<span class="attr">MAC</span>:<span class="string">&quot;mac&quot;</span>,<span class="attr">OPENBSD</span>:<span class="string">&quot;openbsd&quot;</span>,<span class="attr">WIN</span>:<span class="string">&quot;win&quot;</span>&#125;,<span class="title class_">RequestUpdateCheckStatus</span>:&#123;<span class="attr">NO_UPDATE</span>:<span class="string">&quot;no_update&quot;</span>,<span class="attr">THROTTLED</span>:<span class="string">&quot;throttled&quot;</span>,<span class="attr">UPDATE_AVAILABLE</span>:<span class="string">&quot;update_available&quot;</span>&#125;&#125;&#125;]&#125;),(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;utils =&gt; &#123;\n      /**\n       * Input might look funky, we need to normalize it so e.g. whitespace isn&#x27;t an issue for our spoofing.\n       *\n       * @example\n       * video/webm; codecs=\&quot;vp8, vorbis\&quot;\n       * video/mp4; codecs=\&quot;avc1.42E01E\&quot;\n       * audio/x-m4a;\n       * audio/ogg; codecs=\&quot;vorbis\&quot;\n       * @param &#123;String&#125; arg\n       */\n      const parseInput = arg =&gt; &#123;\n        const [mime, codecStr] = arg.trim().split(&#x27;;&#x27;)\n        let codecs = []\n        if (codecStr &amp;&amp; codecStr.includes(&#x27;codecs=\&quot;&#x27;)) &#123;\n          codecs = codecStr\n            .trim()\n            .replace(`codecs=\&quot;`, &#x27;&#x27;)\n            .replace(`\&quot;`, &#x27;&#x27;)\n            .trim()\n            .split(&#x27;,&#x27;)\n            .filter(x =&gt; !!x)\n            .map(x =&gt; x.trim())\n        &#125;\n        return &#123;\n          mime,\n          codecStr,\n          codecs\n        &#125;\n      &#125;\n\n      const canPlayType = &#123;\n        // Intercept certain requests\n        apply: function(target, ctx, args) &#123;\n          if (!args || !args.length) &#123;\n            return target.apply(ctx, args)\n          &#125;\n          const &#123; mime, codecs &#125; = parseInput(args[0])\n          // This specific mp4 codec is missing in Chromium\n          if (mime === &#x27;video/mp4&#x27;) &#123;\n            if (codecs.includes(&#x27;avc1.42E01E&#x27;)) &#123;\n              return &#x27;probably&#x27;\n            &#125;\n          &#125;\n          // This mimetype is only supported if no codecs are specified\n          if (mime === &#x27;audio/x-m4a&#x27; &amp;&amp; !codecs.length) &#123;\n            return &#x27;maybe&#x27;\n          &#125;\n\n          // This mimetype is only supported if no codecs are specified\n          if (mime === &#x27;audio/aac&#x27; &amp;&amp; !codecs.length) &#123;\n            return &#x27;probably&#x27;\n          &#125;\n          // Everything else as usual\n          return target.apply(ctx, args)\n        &#125;\n      &#125;\n\n      /* global HTMLMediaElement */\n      utils.replaceWithProxy(\n        HTMLMediaElement.prototype,\n        &#x27;canPlayType&#x27;,\n        canPlayType\n      )\n    &#125;&quot;</span>,<span class="attr">_args</span>:[]&#125;),(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;(utils, &#123; opts &#125;) =&gt; &#123;\n        utils.replaceGetterWithProxy(\n          Object.getPrototypeOf(navigator),\n          &#x27;hardwareConcurrency&#x27;,\n          utils.makeHandler().getterValue(opts.hardwareConcurrency)\n        )\n      &#125;&quot;</span>,<span class="attr">_args</span>:[&#123;<span class="attr">opts</span>:&#123;<span class="attr">hardwareConcurrency</span>:<span class="number">4</span>&#125;&#125;]&#125;),(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;(utils, &#123; opts &#125;) =&gt; &#123;\n        const languages = opts.languages.length\n          ? opts.languages\n          : [&#x27;en-US&#x27;, &#x27;en&#x27;]\n        utils.replaceGetterWithProxy(\n          Object.getPrototypeOf(navigator),\n          &#x27;languages&#x27;,\n          utils.makeHandler().getterValue(Object.freeze([...languages]))\n        )\n      &#125;&quot;</span>,<span class="attr">_args</span>:[&#123;<span class="attr">opts</span>:&#123;<span class="attr">languages</span>:[]&#125;&#125;]&#125;),(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;(utils, opts) =&gt; &#123;\n      const isSecure = document.location.protocol.startsWith(&#x27;https&#x27;)\n\n      // In headful on secure origins the permission should be \&quot;default\&quot;, not \&quot;denied\&quot;\n      if (isSecure) &#123;\n        utils.replaceGetterWithProxy(Notification, &#x27;permission&#x27;, &#123;\n          apply() &#123;\n            return &#x27;default&#x27;\n          &#125;\n        &#125;)\n      &#125;\n\n      // Another weird behavior:\n      // On insecure origins in headful the state is \&quot;denied\&quot;,\n      // whereas in headless it&#x27;s \&quot;prompt\&quot;\n      if (!isSecure) &#123;\n        const handler = &#123;\n          apply(target, ctx, args) &#123;\n            const param = (args || [])[0]\n\n            const isNotifications =\n              param &amp;&amp; param.name &amp;&amp; param.name === &#x27;notifications&#x27;\n            if (!isNotifications) &#123;\n              return utils.cache.Reflect.apply(...arguments)\n            &#125;\n\n            return Promise.resolve(\n              Object.setPrototypeOf(\n                &#123;\n                  state: &#x27;denied&#x27;,\n                  onchange: null\n                &#125;,\n                PermissionStatus.prototype\n              )\n            )\n          &#125;\n        &#125;\n        // Note: Don&#x27;t use `Object.getPrototypeOf` here\n        utils.replaceWithProxy(Permissions.prototype, &#x27;query&#x27;, handler)\n      &#125;\n    &#125;&quot;</span>,<span class="attr">_args</span>:[&#123;&#125;]&#125;),(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;(utils, &#123; fns, data &#125;) =&gt; &#123;\n        fns = utils.materializeFns(fns)\n\n        // That means we&#x27;re running headful\n        const hasPlugins = &#x27;plugins&#x27; in navigator &amp;&amp; navigator.plugins.length\n        if (hasPlugins) &#123;\n          return // nothing to do here\n        &#125;\n\n        const mimeTypes = fns.generateMimeTypeArray(utils, fns)(data.mimeTypes)\n        const plugins = fns.generatePluginArray(utils, fns)(data.plugins)\n\n        // Plugin and MimeType cross-reference each other, let&#x27;s do that now\n        // Note: We&#x27;re looping through `data.plugins` here, not the generated `plugins`\n        for (const pluginData of data.plugins) &#123;\n          pluginData.__mimeTypes.forEach((type, index) =&gt; &#123;\n            plugins[pluginData.name][index] = mimeTypes[type]\n\n            Object.defineProperty(plugins[pluginData.name], type, &#123;\n              value: mimeTypes[type],\n              writable: false,\n              enumerable: false, // Not enumerable\n              configurable: true\n            &#125;)\n            Object.defineProperty(mimeTypes[type], &#x27;enabledPlugin&#x27;, &#123;\n              value:\n                type === &#x27;application/x-pnacl&#x27;\n                  ? mimeTypes[&#x27;application/x-nacl&#x27;].enabledPlugin // these reference the same plugin, so we need to re-use the Proxy in order to avoid leaks\n                  : new Proxy(plugins[pluginData.name], &#123;&#125;), // Prevent circular references\n              writable: false,\n              enumerable: false, // Important: `JSON.stringify(navigator.plugins)`\n              configurable: true\n            &#125;)\n          &#125;)\n        &#125;\n\n        const patchNavigator = (name, value) =&gt;\n          utils.replaceProperty(Object.getPrototypeOf(navigator), name, &#123;\n            get() &#123;\n              return value\n            &#125;\n          &#125;)\n\n        patchNavigator(&#x27;mimeTypes&#x27;, mimeTypes)\n        patchNavigator(&#x27;plugins&#x27;, plugins)\n\n        // All done\n      &#125;&quot;</span>,<span class="attr">_args</span>:[&#123;<span class="attr">fns</span>:&#123;<span class="attr">generateMimeTypeArray</span>:<span class="string">&quot;(utils, fns) =&gt; mimeTypesData =&gt; &#123;\n  return fns.generateMagicArray(utils, fns)(\n    mimeTypesData,\n    MimeTypeArray.prototype,\n    MimeType.prototype,\n    &#x27;type&#x27;\n  )\n&#125;&quot;</span>,<span class="attr">generatePluginArray</span>:<span class="string">&quot;(utils, fns) =&gt; pluginsData =&gt; &#123;\n  return fns.generateMagicArray(utils, fns)(\n    pluginsData,\n    PluginArray.prototype,\n    Plugin.prototype,\n    &#x27;name&#x27;\n  )\n&#125;&quot;</span>,<span class="attr">generateMagicArray</span>:<span class="string">&quot;(utils, fns) =&gt;\n  function(\n    dataArray = [],\n    proto = MimeTypeArray.prototype,\n    itemProto = MimeType.prototype,\n    itemMainProp = &#x27;type&#x27;\n  ) &#123;\n    // Quick helper to set props with the same descriptors vanilla is using\n    const defineProp = (obj, prop, value) =&gt;\n      Object.defineProperty(obj, prop, &#123;\n        value,\n        writable: false,\n        enumerable: false, // Important for mimeTypes &amp; plugins: `JSON.stringify(navigator.mimeTypes)`\n        configurable: true\n      &#125;)\n\n    // Loop over our fake data and construct items\n    const makeItem = data =&gt; &#123;\n      const item = &#123;&#125;\n      for (const prop of Object.keys(data)) &#123;\n        if (prop.startsWith(&#x27;__&#x27;)) &#123;\n          continue\n        &#125;\n        defineProp(item, prop, data[prop])\n      &#125;\n      return patchItem(item, data)\n    &#125;\n\n    const patchItem = (item, data) =&gt; &#123;\n      let descriptor = Object.getOwnPropertyDescriptors(item)\n\n      // Special case: Plugins have a magic length property which is not enumerable\n      // e.g. `navigator.plugins[i].length` should always be the length of the assigned mimeTypes\n      if (itemProto === Plugin.prototype) &#123;\n        descriptor = &#123;\n          ...descriptor,\n          length: &#123;\n            value: data.__mimeTypes.length,\n            writable: false,\n            enumerable: false,\n            configurable: true // Important to be able to use the ownKeys trap in a Proxy to strip `length`\n          &#125;\n        &#125;\n      &#125;\n\n      // We need to spoof a specific `MimeType` or `Plugin` object\n      const obj = Object.create(itemProto, descriptor)\n\n      // Virtually all property keys are not enumerable in vanilla\n      const blacklist = [...Object.keys(data), &#x27;length&#x27;, &#x27;enabledPlugin&#x27;]\n      return new Proxy(obj, &#123;\n        ownKeys(target) &#123;\n          return Reflect.ownKeys(target).filter(k =&gt; !blacklist.includes(k))\n        &#125;,\n        getOwnPropertyDescriptor(target, prop) &#123;\n          if (blacklist.includes(prop)) &#123;\n            return undefined\n          &#125;\n          return Reflect.getOwnPropertyDescriptor(target, prop)\n        &#125;\n      &#125;)\n    &#125;\n\n    const magicArray = []\n\n    // Loop through our fake data and use that to create convincing entities\n    dataArray.forEach(data =&gt; &#123;\n      magicArray.push(makeItem(data))\n    &#125;)\n\n    // Add direct property access  based on types (e.g. `obj[&#x27;application/pdf&#x27;]`) afterwards\n    magicArray.forEach(entry =&gt; &#123;\n      defineProp(magicArray, entry[itemMainProp], entry)\n    &#125;)\n\n    // This is the best way to fake the type to make sure this is false: `Array.isArray(navigator.mimeTypes)`\n    const magicArrayObj = Object.create(proto, &#123;\n      ...Object.getOwnPropertyDescriptors(magicArray),\n\n      // There&#x27;s one ugly quirk we unfortunately need to take care of:\n      // The `MimeTypeArray` prototype has an enumerable `length` property,\n      // but headful Chrome will still skip it when running `Object.getOwnPropertyNames(navigator.mimeTypes)`.\n      // To strip it we need to make it first `configurable` and can then overlay a Proxy with an `ownKeys` trap.\n      length: &#123;\n        value: magicArray.length,\n        writable: false,\n        enumerable: false,\n        configurable: true // Important to be able to use the ownKeys trap in a Proxy to strip `length`\n      &#125;\n    &#125;)\n\n    // Generate our functional function mocks :-)\n    const functionMocks = fns.generateFunctionMocks(utils)(\n      proto,\n      itemMainProp,\n      magicArray\n    )\n\n    // We need to overlay our custom object with a JS Proxy\n    const magicArrayObjProxy = new Proxy(magicArrayObj, &#123;\n      get(target, key = &#x27;&#x27;) &#123;\n        // Redirect function calls to our custom proxied versions mocking the vanilla behavior\n        if (key === &#x27;item&#x27;) &#123;\n          return functionMocks.item\n        &#125;\n        if (key === &#x27;namedItem&#x27;) &#123;\n          return functionMocks.namedItem\n        &#125;\n        if (proto === PluginArray.prototype &amp;&amp; key === &#x27;refresh&#x27;) &#123;\n          return functionMocks.refresh\n        &#125;\n        // Everything else can pass through as normal\n        return utils.cache.Reflect.get(...arguments)\n      &#125;,\n      ownKeys(target) &#123;\n        // There are a couple of quirks where the original property demonstrates \&quot;magical\&quot; behavior that makes no sense\n        // This can be witnessed when calling `Object.getOwnPropertyNames(navigator.mimeTypes)` and the absense of `length`\n        // My guess is that it has to do with the recent change of not allowing data enumeration and this being implemented weirdly\n        // For that reason we just completely fake the available property names based on our data to match what regular Chrome is doing\n        // Specific issues when not patching this: `length` property is available, direct `types` props (e.g. `obj[&#x27;application/pdf&#x27;]`) are missing\n        const keys = []\n        const typeProps = magicArray.map(mt =&gt; mt[itemMainProp])\n        typeProps.forEach((_, i) =&gt; keys.push(`$&#123;i&#125;`))\n        typeProps.forEach(propName =&gt; keys.push(propName))\n        return keys\n      &#125;,\n      getOwnPropertyDescriptor(target, prop) &#123;\n        if (prop === &#x27;length&#x27;) &#123;\n          return undefined\n        &#125;\n        return Reflect.getOwnPropertyDescriptor(target, prop)\n      &#125;\n    &#125;)\n\n    return magicArrayObjProxy\n  &#125;&quot;</span>,<span class="attr">generateFunctionMocks</span>:<span class="string">&quot;utils =&gt; (\n  proto,\n  itemMainProp,\n  dataArray\n) =&gt; (&#123;\n  /** Returns the MimeType object with the specified index. */\n  item: utils.createProxy(proto.item, &#123;\n    apply(target, ctx, args) &#123;\n      if (!args.length) &#123;\n        throw new TypeError(\n          `Failed to execute &#x27;item&#x27; on &#x27;$&#123;\n            proto[Symbol.toStringTag]\n          &#125;&#x27;: 1 argument required, but only 0 present.`\n        )\n      &#125;\n      // Special behavior alert:\n      // - Vanilla tries to cast strings to Numbers (only integers!) and use them as property index lookup\n      // - If anything else than an integer (including as string) is provided it will return the first entry\n      const isInteger = args[0] &amp;&amp; Number.isInteger(Number(args[0])) // Cast potential string to number first, then check for integer\n      // Note: Vanilla never returns `undefined`\n      return (isInteger ? dataArray[Number(args[0])] : dataArray[0]) || null\n    &#125;\n  &#125;),\n  /** Returns the MimeType object with the specified name. */\n  namedItem: utils.createProxy(proto.namedItem, &#123;\n    apply(target, ctx, args) &#123;\n      if (!args.length) &#123;\n        throw new TypeError(\n          `Failed to execute &#x27;namedItem&#x27; on &#x27;$&#123;\n            proto[Symbol.toStringTag]\n          &#125;&#x27;: 1 argument required, but only 0 present.`\n        )\n      &#125;\n      return dataArray.find(mt =&gt; mt[itemMainProp] === args[0]) || null // Not `undefined`!\n    &#125;\n  &#125;),\n  /** Does nothing and shall return nothing */\n  refresh: proto.refresh\n    ? utils.createProxy(proto.refresh, &#123;\n        apply(target, ctx, args) &#123;\n          return undefined\n        &#125;\n      &#125;)\n    : undefined\n&#125;)&quot;</span>&#125;,<span class="attr">data</span>:&#123;<span class="attr">mimeTypes</span>:[&#123;<span class="attr">type</span>:<span class="string">&quot;application/pdf&quot;</span>,<span class="attr">suffixes</span>:<span class="string">&quot;pdf&quot;</span>,<span class="attr">description</span>:<span class="string">&quot;&quot;</span>,<span class="attr">__pluginName</span>:<span class="string">&quot;Chrome PDF Viewer&quot;</span>&#125;,&#123;<span class="attr">type</span>:<span class="string">&quot;application/x-google-chrome-pdf&quot;</span>,<span class="attr">suffixes</span>:<span class="string">&quot;pdf&quot;</span>,<span class="attr">description</span>:<span class="string">&quot;Portable Document Format&quot;</span>,<span class="attr">__pluginName</span>:<span class="string">&quot;Chrome PDF Plugin&quot;</span>&#125;,&#123;<span class="attr">type</span>:<span class="string">&quot;application/x-nacl&quot;</span>,<span class="attr">suffixes</span>:<span class="string">&quot;&quot;</span>,<span class="attr">description</span>:<span class="string">&quot;Native Client Executable&quot;</span>,<span class="attr">__pluginName</span>:<span class="string">&quot;Native Client&quot;</span>&#125;,&#123;<span class="attr">type</span>:<span class="string">&quot;application/x-pnacl&quot;</span>,<span class="attr">suffixes</span>:<span class="string">&quot;&quot;</span>,<span class="attr">description</span>:<span class="string">&quot;Portable Native Client Executable&quot;</span>,<span class="attr">__pluginName</span>:<span class="string">&quot;Native Client&quot;</span>&#125;],<span class="attr">plugins</span>:[&#123;<span class="attr">name</span>:<span class="string">&quot;Chrome PDF Plugin&quot;</span>,<span class="attr">filename</span>:<span class="string">&quot;internal-pdf-viewer&quot;</span>,<span class="attr">description</span>:<span class="string">&quot;Portable Document Format&quot;</span>,<span class="attr">__mimeTypes</span>:[<span class="string">&quot;application/x-google-chrome-pdf&quot;</span>]&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;Chrome PDF Viewer&quot;</span>,<span class="attr">filename</span>:<span class="string">&quot;mhjfbmdgcfjbbpaeojofohoefgiehjai&quot;</span>,<span class="attr">description</span>:<span class="string">&quot;&quot;</span>,<span class="attr">__mimeTypes</span>:[<span class="string">&quot;application/pdf&quot;</span>]&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;Native Client&quot;</span>,<span class="attr">filename</span>:<span class="string">&quot;internal-nacl-plugin&quot;</span>,<span class="attr">description</span>:<span class="string">&quot;&quot;</span>,<span class="attr">__mimeTypes</span>:[<span class="string">&quot;application/x-nacl&quot;</span>,<span class="string">&quot;application/x-pnacl&quot;</span>]&#125;]&#125;&#125;]&#125;),!<span class="number">1</span>===navigator.<span class="property">webdriver</span>||<span class="keyword">void</span> <span class="number">0</span>===navigator.<span class="property">webdriver</span>||<span class="keyword">delete</span> <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(navigator).<span class="property">webdriver</span>,(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;(utils, opts) =&gt; &#123;\n      const getParameterProxyHandler = &#123;\n        apply: function(target, ctx, args) &#123;\n          const param = (args || [])[0]\n          const result = utils.cache.Reflect.apply(target, ctx, args)\n          // UNMASKED_VENDOR_WEBGL\n          if (param === 37445) &#123;\n            return opts.vendor || &#x27;Intel Inc.&#x27; // default in headless: Google Inc.\n          &#125;\n          // UNMASKED_RENDERER_WEBGL\n          if (param === 37446) &#123;\n            return opts.renderer || &#x27;Intel Iris OpenGL Engine&#x27; // default in headless: Google SwiftShader\n          &#125;\n          return result\n        &#125;\n      &#125;\n\n      // There&#x27;s more than one WebGL rendering context\n      // https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext#Browser_compatibility\n      // To find out the original values here: Object.getOwnPropertyDescriptors(WebGLRenderingContext.prototype.getParameter)\n      const addProxy = (obj, propName) =&gt; &#123;\n        utils.replaceWithProxy(obj, propName, getParameterProxyHandler)\n      &#125;\n      // For whatever weird reason loops don&#x27;t play nice with Object.defineProperty, here&#x27;s the next best thing:\n      addProxy(WebGLRenderingContext.prototype, &#x27;getParameter&#x27;)\n      addProxy(WebGL2RenderingContext.prototype, &#x27;getParameter&#x27;)\n    &#125;&quot;</span>,<span class="attr">_args</span>:[&#123;&#125;]&#125;),(<span class="function">()=&gt;</span>&#123;<span class="keyword">try</span>&#123;<span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">outerWidth</span>&amp;&amp;<span class="variable language_">window</span>.<span class="property">outerHeight</span>)<span class="keyword">return</span>;<span class="keyword">const</span> n=<span class="number">85</span>;<span class="variable language_">window</span>.<span class="property">outerWidth</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>,<span class="variable language_">window</span>.<span class="property">outerHeight</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>+n&#125;<span class="keyword">catch</span>(n)&#123;&#125;&#125;)(),(<span class="function">(<span class="params">&#123;_utilsFns:_utilsFns,_mainFunction:_mainFunction,_args:_args&#125;</span>)=&gt;</span>&#123;<span class="keyword">const</span> utils=<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(_utilsFns).<span class="title function_">map</span>((<span class="function">(<span class="params">[key,value]</span>)=&gt;</span>[key,<span class="built_in">eval</span>(value)])));utils.<span class="title function_">init</span>(),<span class="built_in">eval</span>(_mainFunction)(utils,..._args)&#125;)(&#123;<span class="attr">_utilsFns</span>:&#123;<span class="attr">init</span>:<span class="string">&quot;() =&gt; &#123;\n  utils.preloadCache()\n&#125;&quot;</span>,<span class="attr">stripProxyFromErrors</span>:<span class="string">&quot;(handler = &#123;&#125;) =&gt; &#123;\n  const newHandler = &#123;\n    setPrototypeOf: function (target, proto) &#123;\n      if (proto === null)\n        throw new TypeError(&#x27;Cannot convert object to primitive value&#x27;)\n      if (Object.getPrototypeOf(target) === Object.getPrototypeOf(proto)) &#123;\n        throw new TypeError(&#x27;Cyclic __proto__ value&#x27;)\n      &#125;\n      return Reflect.setPrototypeOf(target, proto)\n    &#125;\n  &#125;\n  // We wrap each trap in the handler in a try/catch and modify the error stack if they throw\n  const traps = Object.getOwnPropertyNames(handler)\n  traps.forEach(trap =&gt; &#123;\n    newHandler[trap] = function () &#123;\n      try &#123;\n        // Forward the call to the defined proxy handler\n        return handler[trap].apply(this, arguments || [])\n      &#125; catch (err) &#123;\n        // Stack traces differ per browser, we only support chromium based ones currently\n        if (!err || !err.stack || !err.stack.includes(`at `)) &#123;\n          throw err\n        &#125;\n\n        // When something throws within one of our traps the Proxy will show up in error stacks\n        // An earlier implementation of this code would simply strip lines with a blacklist,\n        // but it makes sense to be more surgical here and only remove lines related to our Proxy.\n        // We try to use a known \&quot;anchor\&quot; line for that and strip it with everything above it.\n        // If the anchor line cannot be found for some reason we fall back to our blacklist approach.\n\n        const stripWithBlacklist = (stack, stripFirstLine = true) =&gt; &#123;\n          const blacklist = [\n            `at Reflect.$&#123;trap&#125; `, // e.g. Reflect.get or Reflect.apply\n            `at Object.$&#123;trap&#125; `, // e.g. Object.get or Object.apply\n            `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // caused by this very wrapper :-)\n          ]\n          return (\n            err.stack\n              .split(&#x27;\\n&#x27;)\n              // Always remove the first (file) line in the stack (guaranteed to be our proxy)\n              .filter((line, index) =&gt; !(index === 1 &amp;&amp; stripFirstLine))\n              // Check if the line starts with one of our blacklisted strings\n              .filter(line =&gt; !blacklist.some(bl =&gt; line.trim().startsWith(bl)))\n              .join(&#x27;\\n&#x27;)\n          )\n        &#125;\n\n        const stripWithAnchor = (stack, anchor) =&gt; &#123;\n          const stackArr = stack.split(&#x27;\\n&#x27;)\n          anchor = anchor || `at Object.newHandler.&lt;computed&gt; [as $&#123;trap&#125;] ` // Known first Proxy line in chromium\n          const anchorIndex = stackArr.findIndex(line =&gt;\n            line.trim().startsWith(anchor)\n          )\n          if (anchorIndex === -1) &#123;\n            return false // 404, anchor not found\n          &#125;\n          // Strip everything from the top until we reach the anchor line\n          // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n          stackArr.splice(1, anchorIndex)\n          return stackArr.join(&#x27;\\n&#x27;)\n        &#125;\n\n        // Special cases due to our nested toString proxies\n        err.stack = err.stack.replace(\n          &#x27;at Object.toString (&#x27;,\n          &#x27;at Function.toString (&#x27;\n        )\n        if ((err.stack || &#x27;&#x27;).includes(&#x27;at Function.toString (&#x27;)) &#123;\n          err.stack = stripWithBlacklist(err.stack, false)\n          throw err\n        &#125;\n\n        // Try using the anchor method, fallback to blacklist if necessary\n        err.stack = stripWithAnchor(err.stack) || stripWithBlacklist(err.stack)\n\n        throw err // Re-throw our now sanitized error\n      &#125;\n    &#125;\n  &#125;)\n  return newHandler\n&#125;&quot;</span>,<span class="attr">stripErrorWithAnchor</span>:<span class="string">&quot;(err, anchor) =&gt; &#123;\n  const stackArr = err.stack.split(&#x27;\\n&#x27;)\n  const anchorIndex = stackArr.findIndex(line =&gt; line.trim().startsWith(anchor))\n  if (anchorIndex === -1) &#123;\n    return err // 404, anchor not found\n  &#125;\n  // Strip everything from the top until we reach the anchor line (remove anchor line as well)\n  // Note: We&#x27;re keeping the 1st line (zero index) as it&#x27;s unrelated (e.g. `TypeError`)\n  stackArr.splice(1, anchorIndex)\n  err.stack = stackArr.join(&#x27;\\n&#x27;)\n  return err\n&#125;&quot;</span>,<span class="attr">replaceProperty</span>:<span class="string">&quot;(obj, propName, descriptorOverrides = &#123;&#125;) =&gt; &#123;\n  return Object.defineProperty(obj, propName, &#123;\n    // Copy over the existing descriptors (writable, enumerable, configurable, etc)\n    ...(Object.getOwnPropertyDescriptor(obj, propName) || &#123;&#125;),\n    // Add our overrides (e.g. value, get())\n    ...descriptorOverrides\n  &#125;)\n&#125;&quot;</span>,<span class="attr">preloadCache</span>:<span class="string">&quot;() =&gt; &#123;\n  if (utils.cache) &#123;\n    return\n  &#125;\n  utils.cache = &#123;\n    // Used in our proxies\n    Reflect: &#123;\n      get: Reflect.get.bind(Reflect),\n      apply: Reflect.apply.bind(Reflect)\n    &#125;,\n    // Used in `makeNativeString`\n    nativeToStringStr: Function.toString + &#x27;&#x27; // =&gt; `function toString() &#123; [native code] &#125;`\n  &#125;\n&#125;&quot;</span>,<span class="attr">makeNativeString</span>:<span class="string">&quot;(name = &#x27;&#x27;) =&gt; &#123;\n  return utils.cache.nativeToStringStr.replace(&#x27;toString&#x27;, name || &#x27;&#x27;)\n&#125;&quot;</span>,<span class="attr">patchToString</span>:<span class="string">&quot;(obj, str = &#x27;&#x27;) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n      // `toString` targeted at our proxied Object detected\n      if (ctx === obj) &#123;\n        // We either return the optional string verbatim or derive the most desired result automatically\n        return str || utils.makeNativeString(obj.name)\n      &#125;\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">patchToStringNested</span>:<span class="string">&quot;(obj = &#123;&#125;) =&gt; &#123;\n  return utils.execRecursively(obj, [&#x27;function&#x27;], utils.patchToString)\n&#125;&quot;</span>,<span class="attr">redirectToString</span>:<span class="string">&quot;(proxyObj, originalObj) =&gt; &#123;\n  const handler = &#123;\n    apply: function (target, ctx) &#123;\n      // This fixes e.g. `HTMLMediaElement.prototype.canPlayType.toString + \&quot;\&quot;`\n      if (ctx === Function.prototype.toString) &#123;\n        return utils.makeNativeString(&#x27;toString&#x27;)\n      &#125;\n\n      // `toString` targeted at our proxied Object detected\n      if (ctx === proxyObj) &#123;\n        const fallback = () =&gt;\n          originalObj &amp;&amp; originalObj.name\n            ? utils.makeNativeString(originalObj.name)\n            : utils.makeNativeString(proxyObj.name)\n\n        // Return the toString representation of our original object if possible\n        return originalObj + &#x27;&#x27; || fallback()\n      &#125;\n\n      if (typeof ctx === &#x27;undefined&#x27; || ctx === null) &#123;\n        return target.call(ctx)\n      &#125;\n\n      // Check if the toString protype of the context is the same as the global prototype,\n      // if not indicates that we are doing a check across different windows., e.g. the iframeWithdirect` test case\n      const hasSameProto = Object.getPrototypeOf(\n        Function.prototype.toString\n      ).isPrototypeOf(ctx.toString) // eslint-disable-line no-prototype-builtins\n      if (!hasSameProto) &#123;\n        // Pass the call on to the local Function.prototype.toString instead\n        return ctx.toString()\n      &#125;\n\n      return target.call(ctx)\n    &#125;\n  &#125;\n\n  const toStringProxy = new Proxy(\n    Function.prototype.toString,\n    utils.stripProxyFromErrors(handler)\n  )\n  utils.replaceProperty(Function.prototype, &#x27;toString&#x27;, &#123;\n    value: toStringProxy\n  &#125;)\n&#125;&quot;</span>,<span class="attr">replaceWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const originalObj = obj[propName]\n  const proxyObj = new Proxy(obj[propName], utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.redirectToString(proxyObj, originalObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterWithProxy</span>:<span class="string">&quot;(obj, propName, handler) =&gt; &#123;\n  const fn = Object.getOwnPropertyDescriptor(obj, propName).get\n  const fnStr = fn.toString() // special getter function string\n  const proxyObj = new Proxy(fn, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; get: proxyObj &#125;)\n  utils.patchToString(proxyObj, fnStr)\n\n  return true\n&#125;&quot;</span>,<span class="attr">replaceGetterSetter</span>:<span class="string">&quot;(obj, propName, handlerGetterSetter) =&gt; &#123;\n  const ownPropertyDescriptor = Object.getOwnPropertyDescriptor(obj, propName)\n  const handler = &#123; ...ownPropertyDescriptor &#125;\n\n  if (handlerGetterSetter.get !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.get\n    handler.get = function() &#123;\n      return handlerGetterSetter.get.call(this, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.get, nativeFn)\n  &#125;\n\n  if (handlerGetterSetter.set !== undefined) &#123;\n    const nativeFn = ownPropertyDescriptor.set\n    handler.set = function(newValue) &#123;\n      handlerGetterSetter.set.call(this, newValue, nativeFn.bind(this))\n    &#125;\n    utils.redirectToString(handler.set, nativeFn)\n  &#125;\n\n  Object.defineProperty(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">mockWithProxy</span>:<span class="string">&quot;(obj, propName, pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n\n  utils.replaceProperty(obj, propName, &#123; value: proxyObj &#125;)\n  utils.patchToString(proxyObj)\n\n  return true\n&#125;&quot;</span>,<span class="attr">createProxy</span>:<span class="string">&quot;(pseudoTarget, handler) =&gt; &#123;\n  const proxyObj = new Proxy(pseudoTarget, utils.stripProxyFromErrors(handler))\n  utils.patchToString(proxyObj)\n\n  return proxyObj\n&#125;&quot;</span>,<span class="attr">splitObjPath</span>:<span class="string">&quot;objPath =&gt; (&#123;\n  // Remove last dot entry (property) ==&gt; `HTMLMediaElement.prototype`\n  objName: objPath.split(&#x27;.&#x27;).slice(0, -1).join(&#x27;.&#x27;),\n  // Extract last dot entry ==&gt; `canPlayType`\n  propName: objPath.split(&#x27;.&#x27;).slice(-1)[0]\n&#125;)&quot;</span>,<span class="attr">replaceObjPathWithProxy</span>:<span class="string">&quot;(objPath, handler) =&gt; &#123;\n  const &#123; objName, propName &#125; = utils.splitObjPath(objPath)\n  const obj = eval(objName) // eslint-disable-line no-eval\n  return utils.replaceWithProxy(obj, propName, handler)\n&#125;&quot;</span>,<span class="attr">execRecursively</span>:<span class="string">&quot;(obj = &#123;&#125;, typeFilter = [], fn) =&gt; &#123;\n  function recurse(obj) &#123;\n    for (const key in obj) &#123;\n      if (obj[key] === undefined) &#123;\n        continue\n      &#125;\n      if (obj[key] &amp;&amp; typeof obj[key] === &#x27;object&#x27;) &#123;\n        recurse(obj[key])\n      &#125; else &#123;\n        if (obj[key] &amp;&amp; typeFilter.includes(typeof obj[key])) &#123;\n          fn.call(this, obj[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  recurse(obj)\n  return obj\n&#125;&quot;</span>,<span class="attr">stringifyFns</span>:<span class="string">&quot;(fnObj = &#123; hello: () =&gt; &#x27;world&#x27; &#125;) =&gt; &#123;\n  // Object.fromEntries() ponyfill (in 6 lines) - supported only in Node v12+, modern browsers are fine\n  // https://github.com/feross/fromentries\n  function fromEntries(iterable) &#123;\n    return [...iterable].reduce((obj, [key, val]) =&gt; &#123;\n      obj[key] = val\n      return obj\n    &#125;, &#123;&#125;)\n  &#125;\n  return (Object.fromEntries || fromEntries)(\n    Object.entries(fnObj)\n      .filter(([key, value]) =&gt; typeof value === &#x27;function&#x27;)\n      .map(([key, value]) =&gt; [key, value.toString()]) // eslint-disable-line no-eval\n  )\n&#125;&quot;</span>,<span class="attr">materializeFns</span>:<span class="string">&quot;(fnStrObj = &#123; hello: \&quot;() =&gt; &#x27;world&#x27;\&quot; &#125;) =&gt; &#123;\n  return Object.fromEntries(\n    Object.entries(fnStrObj).map(([key, value]) =&gt; &#123;\n      if (value.startsWith(&#x27;function&#x27;)) &#123;\n        // some trickery is needed to make oldschool functions work :-)\n        return [key, eval(`() =&gt; $&#123;value&#125;`)()] // eslint-disable-line no-eval\n      &#125; else &#123;\n        // arrow functions just work\n        return [key, eval(value)] // eslint-disable-line no-eval\n      &#125;\n    &#125;)\n  )\n&#125;&quot;</span>,<span class="attr">makeHandler</span>:<span class="string">&quot;() =&gt; (&#123;\n  // Used by simple `navigator` getter evasions\n  getterValue: value =&gt; (&#123;\n    apply(target, ctx, args) &#123;\n      // Let&#x27;s fetch the value first, to trigger and escalate potential errors\n      // Illegal invocations like `navigator.__proto__.vendor` will throw here\n      utils.cache.Reflect.apply(...arguments)\n      return value\n    &#125;\n  &#125;)\n&#125;)&quot;</span>,<span class="attr">arrayEquals</span>:<span class="string">&quot;(array1, array2) =&gt; &#123;\n  if (array1.length !== array2.length) &#123;\n    return false\n  &#125;\n  for (let i = 0; i &lt; array1.length; ++i) &#123;\n    if (array1[i] !== array2[i]) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;&quot;</span>,<span class="attr">memoize</span>:<span class="string">&quot;fn =&gt; &#123;\n  const cache = []\n  return function(...args) &#123;\n    if (!cache.some(c =&gt; utils.arrayEquals(c.key, args))) &#123;\n      cache.push(&#123; key: args, value: fn.apply(this, args) &#125;)\n    &#125;\n    return cache.find(c =&gt; utils.arrayEquals(c.key, args)).value\n  &#125;\n&#125;&quot;</span>&#125;,<span class="attr">_mainFunction</span>:<span class="string">&quot;(utils, opts) =&gt; &#123;\n      try &#123;\n        // Adds a contentWindow proxy to the provided iframe element\n        const addContentWindowProxy = iframe =&gt; &#123;\n          const contentWindowProxy = &#123;\n            get(target, key) &#123;\n              // Now to the interesting part:\n              // We actually make this thing behave like a regular iframe window,\n              // by intercepting calls to e.g. `.self` and redirect it to the correct thing. :)\n              // That makes it possible for these assertions to be correct:\n              // iframe.contentWindow.self === window.top // must be false\n              if (key === &#x27;self&#x27;) &#123;\n                return this\n              &#125;\n              // iframe.contentWindow.frameElement === iframe // must be true\n              if (key === &#x27;frameElement&#x27;) &#123;\n                return iframe\n              &#125;\n              // Intercept iframe.contentWindow[0] to hide the property 0 added by the proxy.\n              if (key === &#x27;0&#x27;) &#123;\n                return undefined\n              &#125;\n              return Reflect.get(target, key)\n            &#125;\n          &#125;\n\n          if (!iframe.contentWindow) &#123;\n            const proxy = new Proxy(window, contentWindowProxy)\n            Object.defineProperty(iframe, &#x27;contentWindow&#x27;, &#123;\n              get() &#123;\n                return proxy\n              &#125;,\n              set(newValue) &#123;\n                return newValue // contentWindow is immutable\n              &#125;,\n              enumerable: true,\n              configurable: false\n            &#125;)\n          &#125;\n        &#125;\n\n        // Handles iframe element creation, augments `srcdoc` property so we can intercept further\n        const handleIframeCreation = (target, thisArg, args) =&gt; &#123;\n          const iframe = target.apply(thisArg, args)\n\n          // We need to keep the originals around\n          const _iframe = iframe\n          const _srcdoc = _iframe.srcdoc\n\n          // Add hook for the srcdoc property\n          // We need to be very surgical here to not break other iframes by accident\n          Object.defineProperty(iframe, &#x27;srcdoc&#x27;, &#123;\n            configurable: true, // Important, so we can reset this later\n            get: function() &#123;\n              return _srcdoc\n            &#125;,\n            set: function(newValue) &#123;\n              addContentWindowProxy(this)\n              // Reset property, the hook is only needed once\n              Object.defineProperty(iframe, &#x27;srcdoc&#x27;, &#123;\n                configurable: false,\n                writable: false,\n                value: _srcdoc\n              &#125;)\n              _iframe.srcdoc = newValue\n            &#125;\n          &#125;)\n          return iframe\n        &#125;\n\n        // Adds a hook to intercept iframe creation events\n        const addIframeCreationSniffer = () =&gt; &#123;\n          /* global document */\n          const createElementHandler = &#123;\n            // Make toString() native\n            get(target, key) &#123;\n              return Reflect.get(target, key)\n            &#125;,\n            apply: function(target, thisArg, args) &#123;\n              const isIframe =\n                args &amp;&amp; args.length &amp;&amp; `$&#123;args[0]&#125;`.toLowerCase() === &#x27;iframe&#x27;\n              if (!isIframe) &#123;\n                // Everything as usual\n                return target.apply(thisArg, args)\n              &#125; else &#123;\n                return handleIframeCreation(target, thisArg, args)\n              &#125;\n            &#125;\n          &#125;\n          // All this just due to iframes with srcdoc bug\n          utils.replaceWithProxy(\n            document,\n            &#x27;createElement&#x27;,\n            createElementHandler\n          )\n        &#125;\n\n        // Let&#x27;s go\n        addIframeCreationSniffer()\n      &#125; catch (err) &#123;\n        // console.warn(err)\n      &#125;\n    &#125;&quot;</span>,<span class="attr">_args</span>:[]&#125;);</span><br></pre></td></tr></table></figure><h4 id="模拟bilibili登录示例"><a href="#模拟bilibili登录示例" class="headerlink" title="模拟bilibili登录示例"></a>模拟bilibili登录示例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置无头浏览器</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line"><span class="comment"># 无头浏览器需要添加user-agent来隐藏特征</span></span><br><span class="line">option.add_argument(<span class="string">&#x27;user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.bilibili.com/&#x27;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&#x27;stealth.min.js&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     js = f.read()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># driver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, &#123;</span></span><br><span class="line"><span class="comment">#     &quot;source&quot;: js</span></span><br><span class="line"><span class="comment"># &#125;)</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 点击登录</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;i_cecream&quot;]/div[2]/div[1]/div[1]/ul[2]/li[1]/li/div&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 输入账号密码</span></span><br><span class="line"><span class="comment"># ele_user = WebDriverWait(driver,3).until(lambda d:d.find_element(By.XPATH,&#x27;/html/body/div[4]/div/div[4]/div[2]/form/div[1]/input&#x27;))</span></span><br><span class="line">ele_user = driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[4]/div/div[4]/div[2]/form/div[1]/input&#x27;</span>)</span><br><span class="line">ele_user.send_keys(<span class="string">&quot;18775305023&quot;</span>)</span><br><span class="line">ele_pass = driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[4]/div/div[4]/div[2]/form/div[3]/input&#x27;</span>)</span><br><span class="line">ele_pass.send_keys(<span class="string">&quot;biliuserysk7&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[4]/div/div[4]/div[2]/div[2]/div[2]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对当前页面进行截图保存</span></span><br><span class="line">driver.save_screenshot(<span class="string">&#x27;./img/page.png&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 定位验证码图片的位置</span></span><br><span class="line">code_img_ele = driver.find_element(By.CLASS_NAME,<span class="string">&#x27;geetest_widget&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取验证码左上角的坐标x,y</span></span><br><span class="line">location = code_img_ele.location</span><br><span class="line"><span class="comment"># 获取验证码图片对应的长和宽</span></span><br><span class="line">size = code_img_ele.size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左上角和右下角的坐标</span></span><br><span class="line">rangle = (</span><br><span class="line">    <span class="built_in">int</span>(location[<span class="string">&#x27;x&#x27;</span>] ), <span class="built_in">int</span>(location[<span class="string">&#x27;y&#x27;</span>] ), <span class="built_in">int</span>((location[<span class="string">&#x27;x&#x27;</span>] + size[<span class="string">&#x27;width&#x27;</span>]) ),</span><br><span class="line">    <span class="built_in">int</span>((location[<span class="string">&#x27;y&#x27;</span>] + size[<span class="string">&#x27;height&#x27;</span>]))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">i = Image.<span class="built_in">open</span>(<span class="string">&#x27;./img/page.png&#x27;</span>)</span><br><span class="line">code_img_name = <span class="string">&#x27;./img/code.png&#x27;</span></span><br><span class="line"><span class="comment"># crop根据rangle元组内的坐标进行裁剪</span></span><br><span class="line">frame = i.crop(rangle)</span><br><span class="line">frame.save(code_img_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缩小图片</span></span><br><span class="line">code = Image.<span class="built_in">open</span>(<span class="string">&#x27;./img/code.png&#x27;</span>)</span><br><span class="line">small_img = code.resize((<span class="number">169</span>, <span class="number">216</span>))</span><br><span class="line">small_img.save(<span class="string">&#x27;./img/small_img.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;size&#x27;</span>,code.size, small_img.size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰识别验证码</span></span><br><span class="line"><span class="comment"># 将验证码提交给超级鹰进行识别</span></span><br><span class="line">chaojiying = Chaojiying_Client(<span class="string">&#x27;ye1064655698&#x27;</span>, <span class="string">&#x27;1064655698ye&#x27;</span>, <span class="string">&#x27;956846&#x27;</span>)  <span class="comment"># 用户中心&gt;&gt;软件ID 生成一个替换 96001</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;chaojiying&#x27;</span>,chaojiying)</span><br><span class="line">im = <span class="built_in">open</span>(<span class="string">&#x27;./img/small_img.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()  <span class="comment"># 本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span></span><br><span class="line"><span class="comment"># 9004是验证码类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;chaojiying.PostPic&#x27;</span>,chaojiying.PostPic(im, <span class="number">9004</span>)[<span class="string">&#x27;pic_str&#x27;</span>])</span><br><span class="line">result = chaojiying.PostPic(im, <span class="number">9004</span>)[<span class="string">&#x27;pic_str&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result：&quot;</span>,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_list = []  <span class="comment"># 要存储即将被点击的点的坐标  [[x1,y1],[x2,y2]]</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;|&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">    list_1 = result.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    count_1 = <span class="built_in">len</span>(list_1)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count_1):</span><br><span class="line">        xy_list = []</span><br><span class="line">        x = <span class="built_in">int</span>(list_1[i].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        y = <span class="built_in">int</span>(list_1[i].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">        xy_list.append(x)</span><br><span class="line">        xy_list.append(y)</span><br><span class="line">        all_list.append(xy_list)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x = <span class="built_in">int</span>(result.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    y = <span class="built_in">int</span>(result.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    xy_list = []</span><br><span class="line">    xy_list.append(x)</span><br><span class="line">    xy_list.append(y)</span><br><span class="line">    all_list.append(xy_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历列表，使用动作链对每一个列表元素对应的x,y指定的位置进行点击操作</span></span><br><span class="line"><span class="comment"># x,y坐标乘2和0.8，是由于之前图片缩放过，所以*2，0.8是因为本人电脑桌面缩放比例为125%，需要还原成1</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> all_list:</span><br><span class="line">    x = l[<span class="number">0</span>] * <span class="number">2</span> * <span class="number">0.8</span></span><br><span class="line">    y = l[<span class="number">1</span>] * <span class="number">2</span> * <span class="number">0.8</span></span><br><span class="line">    <span class="comment"># 将点击操作的参照物移动到指定的模块，</span></span><br><span class="line">    <span class="comment"># 若用方法二获取的验证码图片，要添加下面代码对code_img_ele赋值</span></span><br><span class="line">    <span class="comment"># code_img_ele = bro.find_element_by_xpath(&#x27;/html/body/div[2]/div[2]/div[6]/div/div/div[2]/div[1]/div/div[2]/img&#x27;)</span></span><br><span class="line">    ActionChains(driver).move_to_element_with_offset(code_img_ele, x, y).click().perform()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;点击已完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成动作链点击操作后，定位确认按钮并点击</span></span><br><span class="line">driver.find_element(By.CLASS_NAME,<span class="string">&#x27;geetest_commit&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h2 id="移动测试"><a href="#移动测试" class="headerlink" title="移动测试"></a>移动测试</h2><h3 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h3><p>优势</p><ul><li>支持的语言多</li><li>支持的平台多</li></ul><p>环境搭建</p><ul><li>安装appium的程序</li></ul><p>下载appium桌面程序，地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/appium/appium-desktop/releases?page=3</span><br></pre></td></tr></table></figure><ul><li>在python中安装 Appium-Python-Client</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -i https://mirrors.aliyun.com/pypi/simple/ Appium-Python-Client</span><br></pre></td></tr></table></figure><h4 id="移动测试介绍"><a href="#移动测试介绍" class="headerlink" title="移动测试介绍"></a>移动测试介绍</h4><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>1、java sdk</p><p>2、Android sdk</p><p>3、虚拟机安装</p><h4 id="adb的使用"><a href="#adb的使用" class="headerlink" title="adb的使用"></a>adb的使用</h4><p>1、关系</p><p>会在电脑上创建出来一个服务(ADB服务)手机连上电脑后，都会与服务建立连接。要想发送指令给手机，需要把指令发送到服务中。</p><p>2、定义</p><p>就是一个Android Debug Bridge 安卓调试桥即包含ADB服务，也包含了与服务对应的Client。</p><p>3、作用</p><p>通过命令行去操作手机</p><p>4、命令</p><p><strong>重要</strong></p><p>服务（如果发现代码连不上手机了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br></pre></td></tr></table></figure><ul><li>查看设备</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><ul><li>进入手机终端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure><ul><li>获取信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取数据android版本</span><br><span class="line">adb shell getprop ro.build.version.release</span><br><span class="line"></span><br><span class="line"># 获取手机当前运行的程序和界面的名称</span><br><span class="line">adb shell dumpsys window | findstr mFocusedApp</span><br></pre></td></tr></table></figure><p><strong>其他</strong></p><ul><li>文件传输</li></ul><p>传输到手机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push 电脑上的文件 手机上的位置</span><br></pre></td></tr></table></figure><p>传输到电脑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull 手机上的文件 电脑上的位置</span><br></pre></td></tr></table></figure><blockquote><p>可直接拖曳传输，使用命令麻烦</p></blockquote><ul><li>软件安装卸载</li></ul><p>安装应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install 电脑上的apk文件路径</span><br></pre></td></tr></table></figure><p>卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall 应用的包名</span><br></pre></td></tr></table></figure><ul><li>获取其他信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -W 包名/.启动名</span><br></pre></td></tr></table></figure><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><p>基础API</p><p>driver</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">driver.close_app() 关闭打开的应用</span><br><span class="line">driver.quit() 断开连接</span><br><span class="line">driver.install_app() 安装应用（apk在电脑的绝对路径）</span><br><span class="line">driver.remove_app() 卸载应用</span><br><span class="line">driver.is_app_installed(&quot;应用的包名&quot;) 判断应用是否安装</span><br><span class="line">driver.push_file(&quot;目标位置&quot;,&quot;base64编码的内容&quot;)</span><br><span class="line">driver.pull_file(&quot;来源位置&quot;) 返回base64编码的内容</span><br><span class="line">driver.page_source() 获取界面xml源码</span><br><span class="line">driver.current_package() 获取当前操作应用的包名</span><br><span class="line">driver.current_activity() 获取当前操作的页面的名称</span><br></pre></td></tr></table></figure><p>element</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text 获取元素文本内容</span><br><span class="line">click() 点击元素对应位置</span><br><span class="line">get_attribute(&quot;属性名称&quot;) 获取属性值</span><br><span class="line">location 获取元素左上角的坐标（相对屏幕的左上角）</span><br><span class="line">size 获取元素的宽高（字典）</span><br></pre></td></tr></table></figure><h4 id="模拟手势"><a href="#模拟手势" class="headerlink" title="模拟手势"></a>模拟手势</h4><p>拖曳操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.drag_and_drop(ele1,ele2)</span><br></pre></td></tr></table></figure><p>高级模拟手势</p><p>TouchAction</p><ul><li><p>tap：轻敲</p></li><li><p>press：按压</p></li><li><p>long_press：长按</p></li><li><p>wait(毫秒数)：等待</p></li><li><p>move_to：移动到</p></li><li><p>release：释放（松手）</p></li><li><p>perform：执行（最后要）</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> appium.webdriver.common.touch_action <span class="keyword">import</span> TouchAction</span><br><span class="line"></span><br><span class="line">TouchAction(driver).press(ele1).move_to(ele2).wait(<span class="number">2000</span>).release().perform()</span><br></pre></td></tr></table></figure><h4 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h4><p>进入进行图形手势验证</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.appiumby <span class="keyword">import</span> AppiumBy</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.touch_action <span class="keyword">import</span> TouchAction</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接移动设备所必须的参数</span></span><br><span class="line">desired_caps=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前要测试的设备的名称</span></span><br><span class="line">desired_caps[<span class="string">&#x27;deviceName&#x27;</span>] = <span class="string">&#x27;127.0.0.1:62001&#x27;</span></span><br><span class="line"><span class="comment"># 系统</span></span><br><span class="line">desired_caps[<span class="string">&#x27;platformName&#x27;</span>] = <span class="string">&#x27;Android&#x27;</span></span><br><span class="line"><span class="comment"># 系统的版本</span></span><br><span class="line">desired_caps[<span class="string">&#x27;platformVersion&#x27;</span>] = <span class="string">&#x27;7.1&#x27;</span></span><br><span class="line"><span class="comment"># 要启动app的名称（包名）</span></span><br><span class="line">desired_caps[<span class="string">&#x27;appPackage&#x27;</span>] = <span class="string">&#x27;com.android.settings&#x27;</span></span><br><span class="line"><span class="comment"># 要启动的app的哪个界面</span></span><br><span class="line">desired_caps[<span class="string">&#x27;appActivity&#x27;</span>] = <span class="string">&#x27;.Settings&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(desired_caps)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(<span class="string">&quot;http://127.0.0.1:4723/wd/hub&quot;</span>,</span><br><span class="line">                 desired_capabilities=desired_caps)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># driver.find_element(AppiumBy.XPATH,&#x27;//*[@text=&quot;设置&quot;]&#x27;).click()</span></span><br><span class="line"><span class="comment"># time.sleep(1)</span></span><br><span class="line"></span><br><span class="line">ele1 = driver.find_element(AppiumBy.XPATH,<span class="string">&#x27;//*[@text=&quot;声音&quot;]&#x27;</span>)</span><br><span class="line">ele2 = driver.find_element(AppiumBy.XPATH,<span class="string">&#x27;//*[@text=&quot;更换壁纸&quot;]&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">TouchAction(driver).press(ele1).wait(<span class="number">500</span>).move_to(ele2).release().perform()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.find_element(AppiumBy.XPATH,<span class="string">&#x27;//*[@text=&quot;安全&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.find_element(AppiumBy.XPATH,<span class="string">&#x27;//*[@text=&quot;屏幕锁定&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.find_element(AppiumBy.XPATH,<span class="string">&#x27;//*[@text=&quot;图案&quot;]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">TouchAction(driver)\</span><br><span class="line">    .press(x=<span class="number">143</span>,y=<span class="number">615</span>)\</span><br><span class="line">    .wait(<span class="number">200</span>)\</span><br><span class="line">    .move_to(x=<span class="number">358</span>,y=<span class="number">615</span>)\</span><br><span class="line">    .wait(<span class="number">200</span>)\</span><br><span class="line">    .move_to(x=<span class="number">574</span>,y=<span class="number">615</span>)\</span><br><span class="line">    .wait(<span class="number">200</span>)\</span><br><span class="line">    .move_to(x=<span class="number">358</span>,y=<span class="number">829</span>)\</span><br><span class="line">    .wait(<span class="number">200</span>)\</span><br><span class="line">    .move_to(x=<span class="number">143</span>,y=<span class="number">1045</span>)\</span><br><span class="line">    .wait(<span class="number">200</span>)\</span><br><span class="line">    .move_to(x=<span class="number">358</span>,y=<span class="number">1045</span>)\</span><br><span class="line">    .wait(<span class="number">200</span>)\</span><br><span class="line">    .move_to(x=<span class="number">574</span>,y=<span class="number">1045</span>)\</span><br><span class="line">    .release()\</span><br><span class="line">    .perform()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">driver.close_app()</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driver.device_time 获取手机时间</span><br><span class="line">driver.get_window_size() 获取屏幕大小</span><br><span class="line">driver.network_connection <span class="comment"># 获取手机网络信息 1 飞行模式；2 wifi 4 移动数据 6=2+4</span></span><br><span class="line">driver.set_network_connection(网络模式数字) <span class="comment"># 设置手机网络信息</span></span><br><span class="line">driver.keyevent(<span class="string">&quot;按键数字&quot;</span>) <span class="comment"># 点击按键</span></span><br><span class="line">driver.get_screenshot_as_file(<span class="string">&quot;图片路径&quot;</span>) <span class="comment"># 截屏</span></span><br><span class="line">driver.open_notifications() <span class="comment"># 打开通知栏</span></span><br></pre></td></tr></table></figure><h2 id="pytest"><a href="#pytest" class="headerlink" title="pytest"></a>pytest</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>pytest是python的一种单元测试框架，同自带的unittest测试框架类似，相比于unittest框架使用起来更简洁,效率更高.</p><h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><p>1.非常容易上手,入门简单.文档丰富，文档中有很多实例可以参考</p><p>2.支持简单的单元测试和复杂的功能测试.<br>3.支持参数化.<br>4.执行测试过程中可以将某些测试跳过，或者对某些预期失败的Case标记成失败</p><p>5.支持重复执行失败的Case.<br>6.支持运行由Nose,Unittest编写的测试Case7.具有很多第三方插件.并且可以自定义扩展8.方便的和持续集成工具集成.</p><h3 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U pytest</span><br></pre></td></tr></table></figure><h3 id="4、基本使用"><a href="#4、基本使用" class="headerlink" title="4、基本使用"></a>4、基本使用</h3><h4 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h4><p>运行方式一</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_01</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test_a执行了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test_b执行了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;要运行的文件名&quot;</span>])</span><br></pre></td></tr></table></figure><p>运行方式二</p><p>终端运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[pytest]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addopts</span> = -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路径</span></span><br><span class="line"><span class="attr">testpath</span> = ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件名（要运行的）</span></span><br><span class="line"><span class="attr">python_files</span> = test_*.py *test.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类名（要运行的）</span></span><br><span class="line"><span class="attr">python_classes</span> = Test_*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数名（要运行的）</span></span><br><span class="line"><span class="attr">python_functions</span> = test_*</span><br></pre></td></tr></table></figure><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><p>assert 表达式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_01</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test_a执行了&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span>==<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test_b执行了&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;test_01.py&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="标记跳过"><a href="#标记跳过" class="headerlink" title="标记跳过"></a>标记跳过</h4><p>@pytest.mark.xfail(raises&#x3D;)：标记错误（如果有错误，提示）</p><p>@pytest.mark.skip(reason&#x3D;)：标记跳过（跳过不执行）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.xfail(<span class="params">raises=ZeroDivisionError</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test_a执行了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.skip(<span class="params">reason=<span class="string">&#x27;我想跳过&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test_b执行了&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;test_02.py&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],[(<span class="params"><span class="number">1</span>,<span class="number">2</span></span>),(<span class="params"><span class="number">50</span>,<span class="number">60</span></span>)]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test_a执行了&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> a+b &gt; <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;test_03.py&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="夹具"><a href="#夹具" class="headerlink" title="夹具"></a>夹具</h4><p><a href="https://docs.pytest.org/en/latest/how-to/xunit_setup.html#xunitsetup">https://docs.pytest.org/en/latest/how-to/xunit_setup.html#xunitsetup</a></p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>在测试之前和之后执行，用于固定测试环境，及清理回收测试资源</p><h5 id="级别"><a href="#级别" class="headerlink" title="级别"></a>级别</h5><ul><li>模块级（参数可选）</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块级别</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_module</span>(<span class="params">module</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;setup_module&#x27;</span>,module)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown_module</span>(<span class="params">module</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;teardown_module&#x27;</span>,module)</span><br></pre></td></tr></table></figure><ul><li>类级（@classmethod 可不加）</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestOne</span>():</span><br><span class="line">    <span class="comment"># 类级别</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setup_class...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;teardown_class...&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>函数级</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数级别</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_function</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;setup_function&#x27;</span>,args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown_function</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;teardown_function&#x27;</span>,args)</span><br></pre></td></tr></table></figure><ul><li>方法级</li></ul><p>包含类中的每个方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestOne</span>():</span><br><span class="line">    <span class="comment"># 方法级别</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setup_method...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;teardown_method...&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="fixture装饰器"><a href="#fixture装饰器" class="headerlink" title="fixture装饰器"></a>fixture装饰器</h5><p><strong>介绍</strong></p><ul><li><p>除了setup和teardown，pytest提供fixture进行更为强大的夹具使用。</p></li><li><p>我们可以把夹具看为一个过程，</p></li><li><p>它也可以是具备返回值的，(该过程创建了某种资源)，正是我们测试中所需要</p></li></ul><p>示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义夹具</span></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;before...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义有返回值的夹具</span></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;login...&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义有参数的夹具</span></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;get_data...&#x27;</span>,request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用夹具（before</span></span><br><span class="line"><span class="meta">@pytest.mark.usefixtures(<span class="params"><span class="string">&#x27;before&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_01</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test_01...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用带参数加的夹具（login</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_02</span>(<span class="params">login</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test_02...&#x27;</span>,login)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义初始化参数的夹具</span></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">params=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_data</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;初始化的参数是：&#x27;</span>,request.param)</span><br><span class="line">    <span class="keyword">return</span> request.param</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用夹具（init_data，参数长度=执行次数，</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_03</span>(<span class="params">init_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test_03...&#x27;</span>,init_data)</span><br><span class="line">    <span class="keyword">assert</span> init_data&gt;<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;test_05.py&#x27;</span>])</span><br></pre></td></tr></table></figure><h5 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h5><p>pytest-html</p><p>安装</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest-html</span><br><span class="line"><span class="comment"># pytest-html 依赖 py</span></span><br><span class="line">pip install -U py</span><br></pre></td></tr></table></figure><p>pytest-ordering</p><p>按顺序执行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest-ordering</span><br></pre></td></tr></table></figure><p>应用</p><p>数字越小越先执行（&gt;&#x3D;0）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.run(<span class="params">order=<span class="number">1</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_01</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.run(<span class="params">order=<span class="number">3</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_02</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.run(<span class="params">order=<span class="number">2</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_03</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;test_06.py&#x27;</span>])</span><br></pre></td></tr></table></figure><p>pytest-returnfailures</p><p>作用：失败后多次执行</p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest-returnfailures</span><br></pre></td></tr></table></figure><p>使用</p><ul><li>命令行方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --returns</span><br></pre></td></tr></table></figure><ul><li>配置文件方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[pytest]</span><br><span class="line"></span><br><span class="line">addopts = -s --returns 5 --html=./report.html </span><br></pre></td></tr></table></figure><h2 id="unittest"><a href="#unittest" class="headerlink" title="unittest"></a>unittest</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>unittest是python自带的一个模块，可以用它进行单元测试</p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>以上所需selenium操作，仅仅是完成了自动化测试的操作部分。</p><p>关于是否和预期一致的对比，可以借助unittest来完成</p><h3 id="为什么使用unittest？"><a href="#为什么使用unittest？" class="headerlink" title="为什么使用unittest？"></a>为什么使用unittest？</h3><p>1.能够组织多个用例去执行</p><p>2.提供丰富的断言方法<br>3.提供丰富的日志与测试结果</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li>TestCase</li></ul><p>测试用例：用类的方式组织对一个功能的多项测试</p><ul><li>Fixture</li></ul><p>夹具，用来固定测试环境。</p><ul><li>TestSuite</li></ul><p>测试套件：组织多个TestCase</p><ul><li>TestRunner</li></ul><p>测试执行：来执行TestSuit，并可以导出测试结果</p><ul><li><p>其他</p></li><li><p>TestResult 测试报告（某种格式的测试结果）</p></li><li><p>TestLoader 根据某一规则找到TestSuite</p></li></ul><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><p>三个步骤</p><p>1.创建测试类</p><p>需要继承于unittest.TestCase</p><p>2.书写测试方法</p><p>需要以test开头的示例方法，且不能有参数</p><p>3.执行测试（在pycharm中可以省略）</p><p>例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestOne</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是test_01&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是test_02&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="断言-1"><a href="#断言-1" class="headerlink" title="断言"></a>断言</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c语言学习笔记</title>
      <link href="/2023/10/20/c/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/20/c/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>c语言本身没有提供专门的输入输出语句，所有的输入输出都是由调用标准库函数中的输入输出函数来实现的。</p><p>输入函数：scanf()、getchar()、gets()：</p><ul><li>scanf()：是格式输入函数，可接收任意类型的数据。</li><li>getchar()：是字符输入函数，只能接收单个字符。</li><li>gets()：是字符串输入函数。</li></ul><p>输出函数：printf()、putchar()、puts()：</p><ul><li>printf()：是格式输出函数，可按指定的格式显示任意类型的数据。</li><li>putchar()：字符显示函数，只能显示单个字符。</li><li>puts()：是字符串输出函数。</li></ul><h3 id="scanf-的使用"><a href="#scanf-的使用" class="headerlink" title="scanf()的使用"></a>scanf()的使用</h3><p>作用：把从键盘上输入的数据根据找到的地址存入内存中，即给变量赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入整数a,b,c:\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 输入数据时使用 tab、空格、回车 分隔</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%d%d\n&quot;</span>,a,b,c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入数据时使用 逗号 分隔</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%d%d&quot;</span>,a,b,c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h3 id="gets-、puts"><a href="#gets-、puts" class="headerlink" title="gets()、puts()"></a>gets()、puts()</h3><p>字符串输入函数和字符串输出函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[] = &#123;<span class="string">&quot;asd&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 输出字符串</span></span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;enter your name：&quot;</span>);</span><br><span class="line">    <span class="type">char</span> name[<span class="number">8</span>];</span><br><span class="line">    <span class="comment">// 接收输入的字符串</span></span><br><span class="line">    gets(name);</span><br><span class="line">    <span class="built_in">puts</span>(name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常见的进制"><a href="#常见的进制" class="headerlink" title="常见的进制"></a>常见的进制</h2><h3 id="二进制的概述"><a href="#二进制的概述" class="headerlink" title="二进制的概述"></a>二进制的概述</h3><p>、</p><h3 id="进制的分类"><a href="#进制的分类" class="headerlink" title="进制的分类"></a>进制的分类</h3><h3 id="进制的换算举例"><a href="#进制的换算举例" class="headerlink" title="进制的换算举例"></a>进制的换算举例</h3><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>不同的进制只是整数的书写方法不同，不会对整数的实际存储方式产生影响。不同进制可以混合使用，比如10＋015+Ox20是一个合法的表达式。</p><p>printf()的进制相关占位符如下:</p><ul><li>%d :十进制整数。</li><li>%o∶八进制整数。</li><li>%x∶十六进制整数。</li><li>%#o︰显示前缀0的八进制整数。</li><li>%#x︰显示前缀0x的十六进制整数。</li><li>%#X︰显示前缀0X的十六进制整数。</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="创建数组方式"><a href="#创建数组方式" class="headerlink" title="创建数组方式"></a>创建数组方式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 方式1：创建后赋值</span></span><br><span class="line">    <span class="type">int</span> length = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> arr[length];</span><br><span class="line">    arr[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式1：创建时赋值</span></span><br><span class="line">    <span class="type">int</span> arr2[<span class="number">10</span>] =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式2：使用malloc()函数，动态的分配内存，创建一个指定长度的数组(通用的方法)</span></span><br><span class="line">    <span class="type">int</span> *arr3 = (<span class="type">int</span>*)<span class="built_in">malloc</span>(length * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用完动态创建的数组后，一定要回收此数组的内存空间。否则存在内存泄露。</span></span><br><span class="line">    <span class="built_in">free</span>(arr3);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明数组的同时，给指定索引位置上的元素赋值</span></span><br><span class="line">    <span class="type">int</span> arr4[<span class="number">10</span>] = &#123;[<span class="number">1</span>]=<span class="number">11</span>,[<span class="number">7</span>]=<span class="number">77</span>,[<span class="number">9</span>]=<span class="number">99</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取数组数据"><a href="#获取数组数据" class="headerlink" title="获取数组数据"></a>获取数组数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> *arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(length * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> length = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,length);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="char类型数组与字符串"><a href="#char类型数组与字符串" class="headerlink" title="char类型数组与字符串"></a>char类型数组与字符串</h3><h4 id="char类型数组"><a href="#char类型数组" class="headerlink" title="char类型数组"></a>char类型数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准写法</span></span><br><span class="line"><span class="type">char</span> str[] = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// 如果一个字符数组声明如下，由于必须留一个位置给\0，所以最多只能容纳9个字符的字符串</span></span><br><span class="line"><span class="type">char</span> str1[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line"><span class="type">char</span> str1[<span class="number">12</span>]=&#123;<span class="string">&quot;hello world&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">char</span> str2[<span class="number">12</span>]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以省略声明字符串数组大的长度</span></span><br><span class="line"><span class="type">char</span> str1[]=&#123;<span class="string">&quot;hello world&quot;</span>&#125;;</span><br><span class="line"><span class="type">char</span> str2[]=<span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h4><p>比较”x”和’x’的不同</p><ul><li>书写形式不同</li><li>存储空间不同：在内存中，字符常量只占用一个字节的存储空间，而字符串存储时自动加一个结束标记’’\o’，所以’×’占用1个字节，而”x”占用2个字节。</li><li>二者的操作也不同。例如，可对字符常量进行加减运算，字符串常量则不能。</li></ul><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><ul><li>方式一</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>]; <span class="comment">// 二维数组</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">10</span>;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">20</span>;</span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>]=&#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">    a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;arr[%d][%d] = %p\n&quot;</span>,i,j,&amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="理解与定义"><a href="#理解与定义" class="headerlink" title="理解与定义"></a>理解与定义</h3><h4 id="变量的访问方式"><a href="#变量的访问方式" class="headerlink" title="变量的访问方式"></a>变量的访问方式</h4><p>计算机中程序的运行都是在内存中进行的，变量也是在内存中分配的空间，且不同类型的变量占用不同大的空间。那如何访问内存中变量存储的数据呢?有两种方式:直接访问和间接访问。直接访问，直接使用变量名进行的访问，以前的程序中都是采用这种方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num1 = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>间接访问，通过指针来实现。下面看如何理解指针。</p><h4 id="内存地址与指针"><a href="#内存地址与指针" class="headerlink" title="内存地址与指针"></a>内存地址与指针</h4><p>为了能够有效的访问到内存的每个单元(即一个字节)，就给内存单元进行了编号，这些编号被称为该内存单元的地址。因为每个内存单元都有地址，所以变量存储的数据也是有地址的。</p><h4 id="指针变量的定义"><a href="#指针变量的定义" class="headerlink" title="指针变量的定义"></a>指针变量的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> * p;</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>1、指针变量的名字是p，不是*p。<br>2、指针变量中只能存放地址，不要将一个整数(或任何其它非地址类型的数据）赋给一个指针变量。</p></blockquote><p>同一行声明两个指针变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * a, * b;</span><br></pre></td></tr></table></figure><p>指针指向指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ** P</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    int num = 10;</span></span><br><span class="line"><span class="comment">//    printf(&quot;num = %d\n&quot;,num);</span></span><br><span class="line"><span class="comment">//    printf(&quot;&amp;num = %p\n&quot;,&amp;num);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    int *p1;</span></span><br><span class="line"><span class="comment">//   将num的地址指向p1</span></span><br><span class="line"><span class="comment">//    p1 = &amp;num;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    printf(&quot;%p\n&quot;,p1);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m =<span class="number">10</span>, *ptr;</span><br><span class="line">    ptr = &amp;m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,m);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,ptr); <span class="comment">// 等同于 scanf(&quot;%d&quot;,&amp;m);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h3><p>指针作为一种特殊的数据类型可以参与运算，但与其他数据类型不同的是，指针的运算都是针对内存中的地址来实现的。</p><h4 id="取址运算符："><a href="#取址运算符：" class="headerlink" title="取址运算符：&amp;"></a>取址运算符：&amp;</h4><p>取址运算符，使用“&amp;”符号来表示。作用:取出指定变量在内存中的地址，其语法格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;变量</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 输出变量的值。num = 10</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>,num);</span><br><span class="line">    <span class="comment">// 输出变量的内存地址。&amp;num = 000000010e3ff744</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;num = %p\n&quot;</span>,&amp;num);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="指针变量的赋值"><a href="#指针变量的赋值" class="headerlink" title="指针变量的赋值"></a>指针变量的赋值</h5><ul><li>指针变量中只能存放地址(指针)，不要将一个整数(或任何其它非地址类型的数据）赋给一个指针变量。</li><li>c语言中的地址包括位置信息(内存编号，或称纯地址)和它所指向的数据的类型信息，即它是“带类型的地址”。所以，一个指针变量只能指向同一个类型的变量，不能抛开类型随意赋值。<ul><li>char* 类型的指针是为了存放char类型变量的地址。</li><li>short* 类型的指针是为了存放short类型变量的地址。</li><li>int* 类型的指针是为了存放int类型变量的地址。</li></ul></li><li>在没有对指针变量赋值时，指针变量的值是不确定的，可能系统会分配一个未知的地址，此时使用此指针变量可能会导致不可预料的后果甚至是系统崩溃。为了避免这个问题，通常给指针变量赋初始值为0(或NULL)，并把值为0的指针变量称为空指针变量。</li></ul><h4 id="取值运算符："><a href="#取值运算符：" class="headerlink" title="取值运算符：*"></a>取值运算符：*</h4><p>在c语言中针对指针运算还提供了一个取值运算符，使用“*”符号表示。其作用与&amp;相反，根据一个给定的内存地址取出该地址对应变量的值。也称为解引用符号。其格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*指针表达式</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>其中，“<em>”不同于定义指针变量的符号，这里是运算符。“指针表达式”用于得到一个内存地址，与”</em>“结合以获得该内存地址对应变量的值。</p><p>例1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取值运算符 *</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">2024</span>;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    p = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a); <span class="comment">// 000000ca4f7ffd14</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p); <span class="comment">// 000000ca4f7ffd14</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p); <span class="comment">// 2024</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取值运算符 *</span></span><br><span class="line">    <span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>,num); <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;num = %p\n&quot;</span>,&amp;num); <span class="comment">// 00000065b87ffc1c</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*&amp;num = %d\n&quot;</span>,*&amp;num); <span class="comment">// 10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例</p><ul><li>将a b中大的值给p3</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 将a b中大的值给p3</span></span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="type">int</span> *p3,*p4;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给a b赋值</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    </span><br><span class="line">    p3 = &amp;a;</span><br><span class="line">    p4 = &amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p4);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">        <span class="type">int</span> *p = p3;</span><br><span class="line">        p3 = p4;</span><br><span class="line">        p4 = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p4);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题1</strong>: &amp;*p的含义是什么?</p><ul><li><p>“&amp;”和“*”两个运算符的优先级别相同，但按自右而左方向运算。因此，&amp;*p与&amp;a相同，即变量a的地址。</p></li><li><p>如果有p1 &#x3D; &amp;*p；它的作用是将&amp;a (a的地址)赋给p1，如果p1原来指向b，经过重新赋值后它已不再指向b了，而指向了a。</p></li></ul><p><strong>问题2:</strong>*&amp;a的含义是什么?</p><ul><li>先进行&amp;a运算，得a的地址，再进行*运算。*<em>&amp;a和</em>*p的作用是一样的，它们都等价于变量a。即*&amp;a与a等价。</li></ul><h4 id="指针的常用运算"><a href="#指针的常用运算" class="headerlink" title="指针的常用运算"></a>指针的常用运算</h4><p>指针本质上就是一个无符号整数，代表了内存地址。除了上面提到的取址运算外，指针还可以与整数加减、自增自减、同类指针相减运算等。但是规则并不是整数运算的规则。</p><h5 id="指针与整数值的加减运算"><a href="#指针与整数值的加减运算" class="headerlink" title="指针与整数值的加减运算"></a>指针与整数值的加减运算</h5><p>格式：指针+-整数</p><p>指针与整数值的加减运算，表示指针所指向的内存地址的移动(加，向后移动;减，向前移动)。指针移动的单位，与指针指向的数据类型有关。数据类型占据多少个字节，每单位就移动多少个字节。<br>通过此操作，可以快速定位你要的地址。</p><p>例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p = &amp;arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p); <span class="comment">// 000000e888bff8f4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,(p+<span class="number">1</span>)); <span class="comment">// 000000e888bff8f8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,(p<span class="number">-1</span>)); <span class="comment">// 000000e888bff8f0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(p+<span class="number">1</span>)); <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(p<span class="number">-1</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：遍历数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LENGTH 5</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[LENGTH] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例子：遍历数组</span></span><br><span class="line">    <span class="type">int</span> *a = &amp;arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;LENGTH;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(a+i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="指针的自增、自减运算"><a href="#指针的自增、自减运算" class="headerlink" title="指针的自增、自减运算"></a>指针的自增、自减运算</h5><p>指针类型变量也可以进行自增或自减运算，如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p++、p--、++p、--p</span><br></pre></td></tr></table></figure><p>++和–在运算符章节已经讲过，这里针对指针的增加或减少指的是内存地址的向前或向后移动。针对于数组来说，由于数组在内存中是连续分布的。</p><ul><li><p>当对指针进行++时，指针会按照它指向的数据类型字节数大小增加，比如 int<em>指针，每++一次，就埠加4个字节。</em></p></li><li><p>当对指针进行–时，指针会按照它指向的数据类型字节数大小减少，比如int*指针，每–一次，就4个字节。</p></li></ul><p>例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p1 = &amp;arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> *p2 = &amp;arr[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p1的值为：%d\n&quot;</span>,*p1); <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;++p1的值为：%d\n&quot;</span>,*(++p1)); <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p1的值为：%d\n&quot;</span>,*p1); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p1的地址为：%d\n&quot;</span>,p1); <span class="comment">// 000000cc15bff734</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;++p1的地址为：%d\n&quot;</span>,++p1); <span class="comment">// 000000cc15bff738</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p2的值为：%d\n&quot;</span>,*p2); <span class="comment">// 4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;--p2的值为：%d\n&quot;</span>,*(--p2)); <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p2的值为：%d\n&quot;</span>,*p2); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(p++); <span class="comment">// 先取*p的值，然后使p自增</span></span><br><span class="line">*(++p); <span class="comment">// 先使p自增1，再取*</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs学习笔记</title>
      <link href="/2023/10/17/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/17/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>EventLoop</p><p>先执行宏任务，后执行微任务</p><p>宏任务</p><p>主体script、setTimeout、setInterval</p><p>微任务</p><p>Promise、process.nextTick</p><h2 id="模块开发"><a href="#模块开发" class="headerlink" title="模块开发"></a>模块开发</h2><p>一个js文件就是一个独立的模块文件，每个模块都会有自己的独立作用域 - 模块作用域</p><p>导入模块：require（模块id &#x2F; 模块的路径）</p><p>导出模块：exports</p><p>exports &#x3D;&#x3D; module.exports</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">100</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="创建package-json"><a href="#创建package-json" class="headerlink" title="创建package.json"></a><strong>创建package.json</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h2><p>解决下载包速度慢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前的下包镜像源</span><br><span class="line">npm config getregistry</span><br><span class="line"># 将下包的镜像源切换为淘宝镜像源</span><br><span class="line">npm config set rigistry=https://registry.npm.taobao.org/</span><br><span class="line"># 检查镜像源是否下载成功</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 通过npm包管理，将nrm安装为全局可用的工具</span><br><span class="line">npm i nrm -g</span><br><span class="line"># 查看所有可用的镜像源</span><br><span class="line">nrm 1s</span><br><span class="line"># 将下包的镜像源切换为 taobao 镜像</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><h1 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="req请求对象"><a href="#req请求对象" class="headerlink" title="req请求对象"></a>req请求对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定请求对象，有人对服务器发送请求就触发回调</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 防止乱码，设置请求头</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向客户端发送指定内容，并结束此次请求</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;请求已结束&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口已启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="http-1"><a href="#http-1" class="headerlink" title="http"></a>http</h3><p>浏览器和web服务器之间的协议，既可以创建web服务器，也可以模拟浏览器向另外的服务器发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">&#x27;queryString&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取当前页面的url</span></span><br><span class="line">    <span class="keyword">const</span> url=request.<span class="property">url</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> data=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//接收发送的数据流</span></span><br><span class="line">    request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        data+=chunk</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    request.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//设置请求头</span></span><br><span class="line">        response.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;text/plain&#x27;</span>,<span class="comment">//文本格式</span></span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;text/html&#x27;</span>,<span class="comment">//html格式</span></span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;application/json;charset=utf-8&#x27;</span><span class="comment">//字符串格式</span></span><br><span class="line">    &#125;)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//页面写入内容</span></span><br><span class="line">    <span class="comment">//写入定义的字符串方法</span></span><br><span class="line">    response.<span class="title function_">write</span>(<span class="string">`&#123;&quot;url&quot;:&quot;<span class="subst">$&#123;url&#125;</span>&quot;&#125;`</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//写入字符串</span></span><br><span class="line">    response.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(querystring.<span class="title function_">parse</span>(data)))</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//终止    </span></span><br><span class="line">    response.<span class="title function_">end</span>()</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义请求的端口号，以及回调函数</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;localhost:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="http-get"><a href="#http-get" class="headerlink" title="http-get"></a>http-get</h3><p>模拟浏览器，向别的服务器发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">get</span>(url,<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//res.statusCode：状态码</span></span><br><span class="line">    <span class="comment">//事件：监听是否有数据响应过来</span></span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">log</span>(chunk)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">&#x27;queryString&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    http.<span class="title function_">get</span>(url,<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">//接收发送的数据流</span></span><br><span class="line">        result.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">            data+=chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        result.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            response.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;</span><br><span class="line">                <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            response.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">            response.<span class="title function_">end</span>()<span class="comment">//终止</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//监听浏览器请求</span></span><br><span class="line">    server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//设置响应状态码，头信息</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;</span><br><span class="line">            <span class="comment">//设置响应的文件类型和编码</span></span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//设置响应的内容</span></span><br><span class="line">        res.<span class="title function_">write</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">        <span class="comment">//跳转到另一个URL</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">302</span>,&#123;</span><br><span class="line">            <span class="title class_">Location</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//结束并发送响应到客户端</span></span><br><span class="line">        res.<span class="title function_">end</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义请求的端口号，以及回调函数</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;localhost:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="http-post"><a href="#http-post" class="headerlink" title="http-post"></a>http-post</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象转成字符串形式</span></span><br><span class="line"><span class="keyword">const</span> postData=querystring.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">province</span>:<span class="string">&#x27;南宁&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>:<span class="string">&#x27;南宁&#x27;</span>,</span><br><span class="line">    <span class="attr">district</span>:<span class="string">&#x27;邕宁区&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>:<span class="string">&#x27;aa-bb-cc&#x27;</span>,</span><br><span class="line">    <span class="attr">phone</span>:<span class="string">&#x27;13888888888&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options=&#123;</span><br><span class="line">    <span class="attr">protocol</span>:<span class="string">&#x27;http:&#x27;</span>,</span><br><span class="line">    <span class="attr">hostname</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/data&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="comment">//表单数据类型</span></span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Length&#x27;</span>:<span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(postData)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">const</span> request=http.<span class="title function_">request</span>(options,<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    request.<span class="title function_">write</span>(postData)</span><br><span class="line">    request.<span class="title function_">end</span>()</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;locahost:8080启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="https-爬虫"><a href="#https-爬虫" class="headerlink" title="https-爬虫"></a>https-爬虫</h3><h4 id="cheerio"><a href="#cheerio" class="headerlink" title="cheerio"></a>cheerio</h4><p>将html转为虚拟dom</p><p><strong>安装</strong></p><p>npm install cheerio -S</p><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> https=<span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cheerio=<span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filterData</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> $=cheerio.<span class="title function_">load</span>(data)</span><br><span class="line">  $(<span class="string">&#x27;.xxx x&#x27;</span>).<span class="title function_">each</span>(index,el)=&gt;&#123;</span><br><span class="line">    index<span class="comment">//获取索引，大概是有几个元素为xxx x的</span></span><br><span class="line">    $(el).<span class="title function_">text</span>()<span class="comment">//可以获取dom中的文本</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data=<span class="string">&#x27;&#x27;</span></span><br><span class="line">  https.<span class="title function_">get</span>(<span class="string">&#x27;https://www.meizu.com&#x27;</span>,<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    result.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">      data+=chunk</span><br><span class="line">    &#125;)</span><br><span class="line">    result.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">filterData</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;locahost:8080启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>自定义事件</p><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取的EventEmitter是个 类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span>=<span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyEventEmitter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> event=<span class="keyword">new</span> <span class="title class_">MyEventEmitter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">event.<span class="title function_">on</span>(<span class="string">&#x27;play&#x27;</span>,<span class="function">(<span class="params">movie</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(movie)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//once：只触发一次</span></span><br><span class="line">event.<span class="title function_">once</span>(<span class="string">&#x27;play&#x27;</span>,<span class="function">(<span class="params">movie</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(movie)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件</span></span><br><span class="line">event.<span class="title function_">emit</span>(<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;我和我的祖国&#x27;</span>)</span><br><span class="line">event.<span class="title function_">emit</span>(<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;中国机长&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h2><p>文件操作</p><p>回调是异步</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件夹</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;logs&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//错误优先操作</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;文件夹创建成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改文件夹名字</span></span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;./logs&#x27;</span>,<span class="string">&#x27;./log&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./log&#x27;</span>,()&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件夹目录</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./log&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">lop</span>(result)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件，及文件内容</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>,<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件追加内容</span></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>,<span class="string">&#x27;!!!&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件内容</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(content)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//同步读取</span></span><br><span class="line"><span class="keyword">let</span> res=fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>)</span><br><span class="line"><span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//获取promise对象</span></span><br><span class="line"><span class="keyword">const</span> fsPromise=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">promise</span></span><br><span class="line"><span class="comment">//立即调用函数表达式</span></span><br><span class="line">;(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> res=<span class="keyword">await</span> fsPromise.<span class="title function_">readFile</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>)</span><br><span class="line">    <span class="title function_">log</span>(res)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//fs.watch():监听文件变化</span></span><br><span class="line">fs.<span class="title function_">watch</span>(<span class="string">&#x27;./log/xxx.xx&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;file has changed.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝：fs.copyFileSync()</span></span><br><span class="line">fs.<span class="title function_">copyFileSync</span>(<span class="string">&#x27;3.txt&#x27;</span>,<span class="string">&#x27;4.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历目录的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readDir</span>(<span class="params">dir</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readdir</span>(dir,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//遍历目录</span></span><br><span class="line">        content.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//value：目录中每个文件夹\文件</span></span><br><span class="line">            <span class="keyword">let</span> joinDir=<span class="string">`<span class="subst">$&#123;dir&#125;</span>/<span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">            <span class="comment">//获取目录状态：是文件夹或其他文件</span></span><br><span class="line">            fs.<span class="title function_">stat</span>(joinDir,<span class="function">(<span class="params">err,stats</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//判断是否为文件夹</span></span><br><span class="line">                <span class="keyword">if</span>(stats.<span class="title function_">isDirectory</span>())&#123;</span><br><span class="line">                    <span class="comment">//是文件夹往下遍历</span></span><br><span class="line">                    <span class="title function_">readDir</span>(joinDir)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    rs.<span class="title function_">readFile</span>(joinDir,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">                        <span class="comment">//输出文件内容</span></span><br><span class="line">                        <span class="title function_">log</span>(content)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream模块"><a href="#Stream模块" class="headerlink" title="Stream模块"></a>Stream模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cosnt fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//创建一个可读取的流</span></span><br><span class="line"><span class="keyword">let</span> readStream=fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;文件名&#x27;</span>)</span><br><span class="line"><span class="comment">//事件：监听是否有数据流入到内存，chunk：buffer数据</span></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//结束事件</span></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="comment">//创建可读取的流</span></span><br><span class="line"><span class="keyword">let</span> readStream=fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;文件名&#x27;</span>)</span><br><span class="line"><span class="comment">//创建可写入的流</span></span><br><span class="line"><span class="keyword">let</span> writeStream=fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;文件名&#x27;</span>)</span><br><span class="line"><span class="comment">//把读取的流通过管道添加到写入流</span></span><br><span class="line">readStream.<span class="title function_">pipe</span>(writeStream)</span><br></pre></td></tr></table></figure><h2 id="readline（逐行读取）"><a href="#readline（逐行读取）" class="headerlink" title="readline（逐行读取）"></a>readline（逐行读取）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl=readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>:process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>:process.<span class="property">stdout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">question</span>(<span class="string">&#x27;您如何看待Node.js中文网？&#x27;</span>,<span class="function">(<span class="params">answer</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(answer)</span><br><span class="line">    rl.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="crypto（加密）"><a href="#crypto（加密）" class="headerlink" title="crypto（加密）"></a>crypto（加密）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto=<span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> password=<span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">cosnt hash=crypto</span><br><span class="line">   <span class="comment">//加密方法：sha1、md5</span></span><br><span class="line">  .<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>),</span><br><span class="line">   <span class="comment">//要加密的密码</span></span><br><span class="line">  .<span class="title function_">update</span>(password),</span><br><span class="line">   <span class="comment">//进制</span></span><br><span class="line">  .<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash)</span><br></pre></td></tr></table></figure><h1 id="Zlib"><a href="#Zlib" class="headerlink" title="Zlib"></a>Zlib</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> zlib=<span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gzip=zlib.<span class="title function_">createGzip</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readStream =fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./node.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> writeStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./node2.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">readStream</span><br><span class="line">  .<span class="title function_">pipe</span>(gzip)</span><br><span class="line">  .<span class="title function_">pipe</span>(writeStream)</span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>npm i cors</p><p>app.use(cors)</p><h3 id="middleware-http-proxy-middleware"><a href="#middleware-http-proxy-middleware" class="headerlink" title="middleware(http-proxy-middleware)"></a><strong>middleware(http-proxy-middleware)</strong></h3><p><strong>安装</strong></p><p>npm install http-proxy-middleware -S</p><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;createProxyMiddleware&#125;=<span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取请求的url</span></span><br><span class="line">    <span class="keyword">const</span> urlStr=req.<span class="property">url</span></span><br><span class="line">    <span class="comment">//正则表达式：如果请求的url中包含api</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/\/api/</span>.<span class="title function_">test</span>(urlStr))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(urlStr)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    log</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;createProxyMiddleware&#125;=<span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取请求的url</span></span><br><span class="line">    <span class="keyword">const</span> urlStr=req.<span class="property">url</span></span><br><span class="line">    <span class="comment">//正则表达式：如果请求的url中包含ajax</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/\/ajax/</span>.<span class="title function_">test</span>(urlStr))&#123;</span><br><span class="line">        <span class="keyword">const</span> proxy=<span class="title function_">createProxyMiddleware</span>(<span class="string">&#x27;/ajax&#x27;</span>,&#123;</span><br><span class="line">          <span class="comment">//代理到的目标地址</span></span><br><span class="line">          <span class="attr">target</span>:<span class="string">&#x27;https://lady.vip.com&#x27;</span>,</span><br><span class="line">          <span class="comment">//是否切换源</span></span><br><span class="line">          <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">            <span class="comment">//url中的api重写为空</span></span><br><span class="line">            <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//http://localhost:8080/ajax/xxx =&gt;</span></span><br><span class="line">        <span class="comment">//https://lady.vip.com/ajax/xxx</span></span><br><span class="line">        <span class="title function_">proxy</span>(req,res)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    log</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h1><p><a href="https://yarn.bootcss.com/">官网</a></p><p><strong>查看yarn当前镜像源</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config get registry  </span><br></pre></td></tr></table></figure><p><strong>设置yarn镜像源为淘宝镜像</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p><strong>安装依赖包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add xxx</span><br></pre></td></tr></table></figure><p><strong>查看依赖版本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view xxx version</span><br></pre></td></tr></table></figure><h1 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h1><p>安装express：npm i express</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听get和post请求，并向客户端响应具体的内容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取url中的查询参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;ysk&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取url中的动态参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用app.listen(端口号，启动成功后回调函数)</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载具体的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;get user list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/editList&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;edit user list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由模块</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="应用级别中间件"><a href="#应用级别中间件" class="headerlink" title="应用级别中间件"></a>应用级别中间件</h3><p>作用：在上游挂载自定义属性供下游使用</p><p>注意：路由之前注册中间件、可以调用多个中间件（[..,..]）、不能忘写next()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：有next的函数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    req.<span class="property">startTime</span>=time</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>局部生效的中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zjj = <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是中间件&#x27;</span>)</span><br><span class="line">   <span class="title function_">next</span>() </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zjj 这个中间件只在这个路由生效</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, zjj ,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由级别中间件"><a href="#路由级别中间件" class="headerlink" title="路由级别中间件"></a><strong>路由级别中间件</strong></h3><p>写在路由上的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h3><p>捕获整个项目的异常错误，防止项目崩溃</p><p>注意：注册在所有路由之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Error:&#x27;</span>+err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express内置的中间件"><a href="#Express内置的中间件" class="headerlink" title="Express内置的中间件"></a>Express内置的中间件</h3><p>Express 4.16.0版本开始内置的3个中间件，提高开发效率</p><p>express.static：快速托管静态资源</p><p>express.json：解析JSON格式的请求体数据</p><p>express.urlencoded：解析URL-encode格式的请求体数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =  <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure><h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><h4 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h4><p>解析post表单数据的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =  <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(parser.<span class="title function_">urlencode</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><h4 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h4><p>解析字符串成对象格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment">// 监听req的data事件</span></span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    str += chunk</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听req的end事件</span></span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// str 中存放的是完整的请求体数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="comment">// 把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line">    <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">    req.<span class="property">body</span> = body</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="写接口"><a href="#写接口" class="headerlink" title="写接口"></a>写接口</h2><p>apiRouter.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载对应的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">  <span class="comment">// 向客户端响应数据</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>, <span class="comment">// 0 表示成功，1 表示失败</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;GET 请求成功&#x27;</span>, <span class="comment">// 状态的描述</span></span><br><span class="line">    <span class="attr">data</span>: query <span class="comment">// 需要响应给客户端的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过req.body获取请求体中包含的url-encoded格式的数据</span></span><br><span class="line">  <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,<span class="comment">// 0 表示成功，1 表示失败</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;POST 请求成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: body <span class="comment">// 需要响应给客户端的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./apiRouter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h3><p>注意：主要在服务器端配置、具有兼容性</p><p>安装cors</p><p>npm i cors</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure><p><strong>CORS响应头部</strong></p><p>请求头中添加</p><p>设置允许来自哪的请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>:<span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>CORS仅支持9个请求头，如果需要添加额外的请求头需要写 Access-Control-Allow-Headers</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;Content-Type,X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure><p>CORS仅支持客户端发送GET POST HEAD请求</p><p>如果需要发送PUT DELETE请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;POST,GET,DELETE,HEAD&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Session认证"><a href="#Session认证" class="headerlink" title="Session认证"></a>Session认证</h2><p>配置express-session中间件</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-session</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置session中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>, <span class="comment">// secret 属性的值可以为任意字符串</span></span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,          <span class="comment">// 固定写法</span></span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span> <span class="comment">// 固定写法</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户登录的接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;登陆失败&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">isLogin</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;登陆成功&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户姓名的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出登录的接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 清空session信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h2><p>JWT通常由三部分组成，分别是Header（头部）、Payload（有效荷载）、Signature（签名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.Signature</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><p>两个JWT相关的包</p><p>jsonwebtoken：生成JWT字符串</p><p>express-JWT：将JWT字符串解析还原成JSON对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// const parser = require(&#x27;body-parser&#x27;)</span></span><br><span class="line"><span class="comment">// app.use(parser.urlencode(&#123; extended: false &#125;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义secret密钥，密钥命名为secretKey</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;qizai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册将JWT字符串解析还原成JSON对象 unless：不需要还原（不拦截）的url：&#x27;/api/&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; </span><br><span class="line">    <span class="attr">secret</span>: secretKey, <span class="attr">algorithms</span>: [<span class="string">&#x27;HS256&#x27;</span>]</span><br><span class="line">    &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;未知错误&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> userinfo = req.<span class="property">body</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (userinfo.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置对象，设置当前token的有效期（用户名，密钥，有效时间）</span></span><br><span class="line">  <span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: userinfo.<span class="property">username</span> &#125;, secretKey, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;60s&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: tokenStr</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="自定义中间件-1"><a href="#自定义中间件-1" class="headerlink" title="自定义中间件"></a>自定义中间件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app =  <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加中间件，拦截对URL为/list的请求</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/list&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">query</span>.<span class="property">name</span>!=<span class="string">&#x27;root&#x27;</span>)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;无权限&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//下一个中间件或者路由</span></span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由级中间件"><a href="#路由级中间件" class="headerlink" title="路由级中间件"></a>路由级中间件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app =  <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//托管静态资源到public</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/mylogin&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//监听是否有数据传递，通过回调函数获得结果，chunk是buffer数据</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> str=chunk.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">let</span> obj=querystring.<span class="title function_">parse</span>(str)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="comment">//使用body-parser npm install body-parser</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app =  <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;</span><br><span class="line">    <span class="attr">extend</span>:<span class="literal">false</span> <span class="comment">//表示使用querystring；true为使用qs</span></span><br><span class="line">&#125;))</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/mylogin&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router=express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问xxx时触发</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/xxx&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取请求的参数</span></span><br><span class="line">    <span class="keyword">const</span> query=req.<span class="property">query</span></span><br><span class="line">    <span class="comment">//以json形式返回</span></span><br><span class="line">    res.<span class="title function_">json</span>(query)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/xxx&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> body=req.<span class="property">body</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=router</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app =  <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> bodyParse=<span class="built_in">require</span>(<span class="string">&#x27;body-parse&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> router=<span class="built_in">require</span>(<span class="string">&#x27;./router/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParse.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/xx&#x27;</span>,router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="接口示例"><a href="#接口示例" class="headerlink" title="接口示例"></a>接口示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mysql=<span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line"><span class="keyword">let</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;database&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app=<span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查(分页)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/v1/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj=req.<span class="property">query</span></span><br><span class="line">    connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from xxx&#x27;</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">        res.<span class="title function_">send</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h2><p>对存入数据库的密码加密，提高安全性</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bcryptjs@2.4.3</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcryptjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对用户的密码，进行bcrypt加密，返回值是加密后的密码字符串</span></span><br><span class="line">userinfo.<span class="property">password</span> = bcrypt.<span class="title function_">hashSync</span>(userinfo.<span class="property">password</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><h3 id="优化res-send-代码"><a href="#优化res-send-代码" class="headerlink" title="优化res.send()代码"></a>优化res.send()代码</h3><p>声明全局中间件，req对象中挂载个req.cc()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    req.<span class="property">cc</span>=<span class="keyword">function</span>(<span class="params">err,status=<span class="number">1</span></span>)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            status,</span><br><span class="line">            <span class="attr">message</span>:err <span class="keyword">instanceof</span> <span class="title class_">Error</span> ? err.<span class="property">message</span>: err</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="优化验证"><a href="#优化验证" class="headerlink" title="优化验证"></a>优化验证</h3><h1 id="node第三方依赖"><a href="#node第三方依赖" class="headerlink" title="node第三方依赖"></a>node第三方依赖</h1><h2 id="自定义包结构"><a href="#自定义包结构" class="headerlink" title="自定义包结构"></a>自定义包结构</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;my-tools&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span><span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;说明&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;ye&quot;</span><span class="punctuation">,</span><span class="string">&quot;shang&quot;</span><span class="punctuation">,</span><span class="string">&quot;kun&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span><span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatTime</span> (dataStr) &#123;</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dataStr)</span><br><span class="line">  <span class="keyword">const</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">  <span class="keyword">const</span> M = dt.<span class="title function_">getMonth</span>()</span><br><span class="line">  <span class="keyword">const</span> d = dt.<span class="title function_">getDate</span>()</span><br><span class="line">  <span class="keyword">const</span> h = dt.<span class="title function_">getHours</span>()</span><br><span class="line">  <span class="keyword">const</span> m = dt.<span class="title function_">getMinutes</span>()</span><br><span class="line">  <span class="keyword">const</span> s = dt.<span class="title function_">getSeconds</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;M&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;m&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  formatTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="node进程管理工具"><a href="#node进程管理工具" class="headerlink" title="node进程管理工具"></a><strong>node进程管理工具</strong></h2><p>supervisor、<strong>nodemon</strong>、forever、pm2</p><p><strong>作用</strong></p><p>代码有改动时自动重启服务</p><p><strong>安装nodemon</strong></p><p>npm install nodemon -g</p><p><strong>启用：</strong></p><p>nodemon xxx.js</p><h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a><strong>cross-env</strong></h2><p>运行跨平台设置和使用环境变量的脚本</p><p><strong>出现原因</strong></p><p>window不支持 NODE_ENV&#x3D;production的设置方式</p><p><strong>安装</strong></p><p>npm install –save-dev cross-env</p><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>:<span class="string">&quot;cross-env NODE_ENV=production webpack --config build/webpack.config.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NRM管理源"><a href="#NRM管理源" class="headerlink" title="NRM管理源"></a>NRM管理源</h2><p>NRM(npm registry manager)是npm的镜像源管理工具</p><p><strong>安装</strong></p><p>npm install -g nrm</p><p><strong>使用</strong></p><p>nrm ls 查看可选的源，nrm use xx 切换源，nrm test 测试速度，npm config get registry 查看当前源</p><p><strong>淘宝源</strong></p><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>日志打印工具</p><p><strong>安装</strong></p><p>npm install log4js -D</p><p><strong>使用</strong></p><p>创建log4j.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log4js = <span class="built_in">require</span>(<span class="string">&#x27;log4js&#x27;</span>)</span><br><span class="line">log4js.<span class="title function_">configure</span>(&#123;</span><br><span class="line">  <span class="attr">appenders</span>:&#123;<span class="attr">cheese</span>:&#123;<span class="attr">type</span>:<span class="string">&#x27;file&#x27;</span>,<span class="attr">filename</span>:<span class="string">&#x27;cheese.log&#x27;</span>&#125;&#125;,</span><br><span class="line">  <span class="attr">categories</span>:&#123;<span class="attr">default</span>:&#123;<span class="attr">appenders</span>:[<span class="string">&#x27;cheese&#x27;</span>],<span class="attr">level</span>:<span class="string">&#x27;error&#x27;</span>&#125;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> logger = log4js.<span class="title function_">getLogger</span>(<span class="string">&#x27;cheese&#x27;</span>)</span><br><span class="line">logger.<span class="property">level</span>=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> urlString=<span class="string">&#x27;https://www.baidu.com:443/path/index.html?id=2#tag=3&#x27;</span></span><br><span class="line">logger.<span class="title function_">debug</span>(url.<span class="title function_">parse</span>(urlString))</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p><strong>安装</strong></p><p>npm install mysql</p><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line"><span class="keyword">let</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;database&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行连接</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行sql语句</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from xx&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">connetion.<span class="title function_">query</span>(<span class="string">&#x27;insert into xxx values(?,?,?)&#x27;</span>,[<span class="string">&#x27;xx&#x27;</span>,<span class="string">&#x27;xx&#x27;</span>,<span class="string">&#x27;xx&#x27;</span>],<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据(对象),对象属性名要和表列名一致</span></span><br><span class="line"><span class="keyword">let</span> emp=&#123;</span><br><span class="line">    <span class="attr">birthday</span>:<span class="string">&#x27;2001-2-24&#x27;</span>,</span><br><span class="line">    <span class="attr">salary</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="attr">deptId</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connetion.<span class="title function_">query</span>(<span class="string">&#x27;insert into xxx set ?)&#x27;</span>,[emp],<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;update emp set ? where eid=?&#x27;</span>,[emp,<span class="number">20</span>],<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;delete from emp where eid=?&#x27;</span>,[<span class="number">20</span>],<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数据库连接池方式</span></span><br><span class="line"><span class="keyword">let</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;database&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost/数据库名&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> db=mongoose.<span class="property">connection</span></span><br><span class="line">db.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>,<span class="variable language_">console</span>.<span class="property">error</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>,<span class="string">&#x27;connection error:&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kittySchema=mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> kitten=mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Kitten&#x27;</span>,kittySchema)</span><br><span class="line"><span class="keyword">var</span> felyne=<span class="keyword">new</span> <span class="title function_">kitten</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Felyne&#x27;</span>&#125;)</span><br><span class="line">felyne.<span class="title function_">save</span>()</span><br></pre></td></tr></table></figure><h2 id="npm和npx"><a href="#npm和npx" class="headerlink" title="npm和npx"></a>npm和npx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 初始化一个项目描述文件package.json</span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"># 自动的到package.json文件中的scripts下找到对应的快捷操作名称，通过快捷名称执行对应的命令</span><br><span class="line">npm run 快捷名称</span><br><span class="line"></span><br><span class="line"># 下载安装相应的包</span><br><span class="line">npm install 包的名称</span><br><span class="line"></span><br><span class="line"># 全局安装</span><br><span class="line">npm i 包名 -g</span><br><span class="line"># 卸载全局安装的包</span><br><span class="line">npm uninstall 包名 -g</span><br><span class="line"></span><br><span class="line"># 安装开发时包</span><br><span class="line">npm i 包名 -D</span><br></pre></td></tr></table></figure><p>npx是在npm5.2以后新增，会和npm一块安装</p><p>npx可以自动下载所需要的nodejs版本运行项目，运行完后，自动删除安装的这个版本的nodejs</p><p><strong>npx -p node@8 node -v</strong>：使用npx下载node8版本</p><h2 id="i5ting-toc"><a href="#i5ting-toc" class="headerlink" title="i5ting_toc"></a>i5ting_toc</h2><p>将md文档转html页面的小工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">npm i -g i5ting_toc</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -o</span><br></pre></td></tr></table></figure><h2 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h2><p>路径相关操作</p><p>安装：npm i path</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件后缀</span></span><br><span class="line"><span class="keyword">const</span> ext = path.<span class="title function_">parse</span>(<span class="string">&#x27;xx/xxx/xx.js&#x27;</span>).<span class="property">ext</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接路径</span></span><br><span class="line">cosnt p = path.<span class="title function_">join</span>(<span class="string">&#x27;path1&#x27;</span>,<span class="string">&#x27;path2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回路径中代表文件夹的部分</span></span><br><span class="line">path.<span class="title function_">dirname</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取路径中的最后一部分</span></span><br><span class="line">path.<span class="title function_">basename</span>(路径,扩展名)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取路径中的扩展名</span></span><br><span class="line">path.<span class="title function_">extname</span>(路径)</span><br></pre></td></tr></table></figure><h2 id="mime模块"><a href="#mime模块" class="headerlink" title="mime模块"></a>mime模块</h2><p>获取mime类型</p><p>安装：npm i mime</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// text/html</span></span><br><span class="line"><span class="comment">// 配合ext使用</span></span><br><span class="line"><span class="keyword">const</span> mimeType=mime.<span class="title function_">getType</span>(<span class="string">&#x27;.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>转码器，将ES6专为ES5</p><p>Babel提供babel-cli工具，用于命令行转码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --global babel-cli</span><br><span class="line">babel --version</span><br></pre></td></tr></table></figure><p>配置.babelrc</p><p>Babel的配置文件是.babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件，presets字段设定转码规则，将es2015规则加入.babelrc:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>:[<span class="string">&quot;es2015&quot;</span>],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装转码器</p><p>在项目中安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure><p>转码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 整个目录转码</span><br><span class="line">mkdir dist1</span><br><span class="line"># --out-dir 或 -d 参数指定输出目录</span><br><span class="line">babel src -d dist1</span><br></pre></td></tr></table></figure><p>运行程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node dist1/userComponent.<span class="property">js</span></span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="提取css、js、html示例"><a href="#提取css、js、html示例" class="headerlink" title="提取css、js、html示例"></a>提取css、js、html示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配 &#x27;&lt;style&gt;&lt;/style&gt;&#x27; 的正则表达式</span></span><br><span class="line"><span class="keyword">const</span> regStyle = <span class="regexp">/&lt;style&gt;[\s\S]*&lt;\/style&gt;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlFile = <span class="title function_">readFile</span>(<span class="string">&#x27;./xx.html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolveCSS</span>(content)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配css的函数</span></span><br><span class="line">fcuntion <span class="title function_">resolveCSS</span>(<span class="params">htmlStr</span>)&#123;</span><br><span class="line">    <span class="comment">// exec()：匹配正则表达式</span></span><br><span class="line">    <span class="keyword">const</span> r1 = regStyle.<span class="title function_">exec</span>(htmlStr)</span><br><span class="line">    <span class="comment">// 提取css的内容</span></span><br><span class="line">    <span class="keyword">const</span> newCSS = r1[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;&lt;style&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&lt;/style&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">// 将提取出的内容写入文件</span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./index.css&#x27;</span>),newCSS,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入样式失败！&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义包示例"><a href="#自定义包示例" class="headerlink" title="自定义包示例"></a>自定义包示例</h2><p>格式化时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx使用笔记</title>
      <link href="/2023/09/24/nginx%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/24/nginx%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx使用笔记"><a href="#Nginx使用笔记" class="headerlink" title="Nginx使用笔记"></a>Nginx使用笔记</h1><br><p>可以在conf目录新建你项目的配置</p><ol><li>新建文件夹名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目名.conf</span><br></pre></td></tr></table></figure><br><ol start="2"><li>文件夹内新建conf文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heima-leadnews-app.conf</span><br></pre></td></tr></table></figure><br><ol start="3"><li>写入配置</li></ol><p>示例</p><p>配置了后，访问8802就会代理到51601</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">upstream heima-app-gateway&#123;</span><br><span class="line">    # 配置要访问的地址（网关端口）</span><br><span class="line">server localhost:51601;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    # 配置前端项目的端口</span><br><span class="line">listen 8802;</span><br><span class="line">location / &#123;</span><br><span class="line">    # 配置项目文件所在目录</span><br><span class="line">root D:/workspace/web-app/;</span><br><span class="line"># 配置主页面</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~/app/(.*)&#123;</span><br><span class="line">    # 反向代理的地址</span><br><span class="line">proxy_pass http://heima-app-gateway/$1;</span><br><span class="line">proxy_set_header HOST $host; #不改变源请求头的值</span><br><span class="line">proxy_pass_request_body on; #开启获取请求体</span><br><span class="line">proxy_pass_request_headers on; #开启获取请求头</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr; #记录真实发出请求的客户端IP</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #记录代理信息</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><ol start="4"><li>在主配置文件中配置</li></ol><p>配置引入你的项目配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"># 引入自定义配置文件</span><br><span class="line">include leadnews.conf/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java微服务项目搭建笔记</title>
      <link href="/2023/09/09/java/java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/09/java/java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Nacos服务搭建"><a href="#Nacos服务搭建" class="headerlink" title="Nacos服务搭建"></a>Nacos服务搭建</h1><ol><li>在linux的docker启动nacos服务</li><li>打开nacos可视化界面：<a href="http://192.168.121.130:8848/nacos%EF%BC%88%E9%85%8D%E7%BD%AEnacos%E7%9A%84linux%E7%9A%84ip%EF%BC%89">http://192.168.121.130:8848/nacos（配置nacos的linux的ip）</a></li><li>配置</li></ol><ul><li>maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br><ul><li>java项目的yaml配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">51801</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">leadnews-user</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.121</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.121</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br></pre></td></tr></table></figure><br><ul><li>nacos新建yaml配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/leadnews_user?useUnicode=true&amp;characterEnocding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="comment"># 设置mapper接口所对应的xml文件位置，如果你在mapper接口中有自定义方法，需要进行该配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 设置别名包扫描路径，通过该属性可以给包中的类注册别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.heima.model.user.pojos</span></span><br></pre></td></tr></table></figure><br><ul><li>启动类添加注解</li></ul><p>让注册中心能够发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableDiscoveryClient</span><br></pre></td></tr></table></figure><h1 id="登录返回JWT"><a href="#登录返回JWT" class="headerlink" title="登录返回JWT"></a>登录返回JWT</h1><p><strong>1、认识JWT</strong></p><p>JWT简称JSON Web Token,一种安全传输标准，也就是通过JSON形式作为Web应<br>用中的令牌,用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。</p><br><p>APPJwtUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.utils.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.*;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppJwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">// TOKEN的有效期一天（S）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TOKEN_TIME_OUT</span> <span class="operator">=</span> <span class="number">3_600</span>;</span><br><span class="line">    <span class="comment">// 加密KEY</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_ENCRY_KEY</span> <span class="operator">=</span> <span class="string">&quot;MDk4ZjZiY2Q0NjIxZDM3M2NhZGU0ZTgzMjYyN2I0ZjY&quot;</span>;</span><br><span class="line">    <span class="comment">// 最小刷新间隔(S)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">REFRESH_TIME</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="comment">// 生产ID</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; claimMaps = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claimMaps.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(UUID.randomUUID().toString())</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>(currentTime))  <span class="comment">//签发时间</span></span><br><span class="line">                .setSubject(<span class="string">&quot;system&quot;</span>)  <span class="comment">//说明</span></span><br><span class="line">                .setIssuer(<span class="string">&quot;heima&quot;</span>) <span class="comment">//签发者信息</span></span><br><span class="line">                .setAudience(<span class="string">&quot;app&quot;</span>)  <span class="comment">//接收用户</span></span><br><span class="line">                .compressWith(CompressionCodecs.GZIP)  <span class="comment">//数据压缩方式</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, generalKey()) <span class="comment">//加密方式</span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(currentTime + TOKEN_TIME_OUT * <span class="number">1000</span>))  <span class="comment">//过期时间戳</span></span><br><span class="line">                .addClaims(claimMaps) <span class="comment">//cla信息</span></span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中的claims信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Jws&lt;Claims&gt; <span class="title function_">getJws</span><span class="params">(String token)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(generalKey())</span><br><span class="line">                    .parseClaimsJws(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取payload body信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">getClaimsBody</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getJws(token).getBody();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ExpiredJwtException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hearder body信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JwsHeader <span class="title function_">getHeaderBody</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getJws(token).getHeader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> -1：有效，0：有效，1：过期，2：过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">verifyToken</span><span class="params">(Claims claims)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(claims==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims.getExpiration()</span><br><span class="line">                    .before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="comment">// 需要自动刷新TOKEN</span></span><br><span class="line">            <span class="keyword">if</span>((claims.getExpiration().getTime()-System.currentTimeMillis())&gt;REFRESH_TIME*<span class="number">1000</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由字符串生成加密key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = Base64.getEncoder().encode(TOKEN_ENCRY_KEY.getBytes());</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/* Map map = new HashMap();</span></span><br><span class="line"><span class="comment">        map.put(&quot;id&quot;,&quot;11&quot;);*/</span></span><br><span class="line">        System.out.println(AppJwtUtil.getToken(<span class="number">1102L</span>));</span><br><span class="line">        Jws&lt;Claims&gt; jws = AppJwtUtil.getJws(<span class="string">&quot;eyJhbGciOiJIUzUxMiIsInppcCI6IkdaSVAifQ.H4sIAAAAAAAAADWLQQqEMAwA_5KzhURNt_qb1KZYQSi0wi6Lf9942NsMw3zh6AVW2DYmDGl2WabkZgreCaM6VXzhFBfJMcMARTqsxIG9Z888QLui3e3Tup5Pb81013KKmVzJTGo11nf9n8v4nMUaEY73DzTabjmDAAAA.4SuqQ42IGqCgBai6qd4RaVpVxTlZIWC826QA9kLvt9d-yVUw82gU47HDaSfOzgAcloZedYNNpUcd18Ne8vvjQA&quot;</span>);</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jws.getBody();</span><br><span class="line">        System.out.println(claims.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>登录成功时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取token 通过用户id</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> AppJwtUtil.getToken(Long.valueOf(apUser.getId()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将token和用户信息返回给前端</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">result.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line"><span class="comment">//User封装：方法一：将 salt 和 password 设置为 null</span></span><br><span class="line"><span class="comment">//apUser.setSalt(null);</span></span><br><span class="line"><span class="comment">//apUser.setPassword(null);</span></span><br><span class="line"><span class="comment">//result.put(&quot;user&quot;,apUser);</span></span><br><span class="line"><span class="comment">//方法二： map 套 map</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">userMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">userMap.put(<span class="string">&quot;id&quot;</span>, apUser.getId());</span><br><span class="line">userMap.put(<span class="string">&quot;name&quot;</span>, apUser.getName());</span><br><span class="line">userMap.put(<span class="string">&quot;phone&quot;</span>, apUser.getPhone());</span><br><span class="line">result.put(<span class="string">&quot;user&quot;</span>, userMap);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ResponseResult.okResult(result);</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2：游客登陆：</span></span><br><span class="line"><span class="comment">//用户ID为 0 生成 token 返回</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> AppJwtUtil.getToken(<span class="number">0L</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">result.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line"><span class="keyword">return</span> ResponseResult.okResult(result);</span><br></pre></td></tr></table></figure><br><h1 id="Swagger配置"><a href="#Swagger配置" class="headerlink" title="Swagger配置"></a>Swagger配置</h1><p>自动生成接口文档</p><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  Swagger在线接口文档生成    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、创建SwaggerConfiguration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.common.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">buildDocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(buildApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 要扫描的API(Controller)基础包</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.heima&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">buildApiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;黑马程序员&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;黑马头条-平台管理API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;黑马头条后台api&quot;</span>)</span><br><span class="line">                .contact(contact)</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="knife4j接口文档"><a href="#knife4j接口文档" class="headerlink" title="knife4j接口文档"></a>knife4j接口文档</h1><p><strong>1、导入maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--knife4j接口文档生成（可离线）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><p>2、Swagger2Configuration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.common.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="meta">@Import(BeanValidatorPluginsConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Configuration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">defaultApi2</span><span class="params">()</span> &#123;</span><br><span class="line">        Docket docket=<span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.heima&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;黑马头条API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;黑马头条API文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些代码解读：</p><ul><li>@EnableSwagger2</li></ul><p>该注解是Springfox-swagger框架提供的使用Swagger注解必须加。</p><ul><li>@EnableKnife4j</li></ul><p>该注解是knife4j提供的增强注解,Ui提供了例如动态参数、参数过滤、接口排序等增强功能,如果你想使用这些增强功能就必须加该注解，否则可以不用加。</p><br><p>3、在resources&#x2F;META-INF&#x2F;spring.factories中新增配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.heima.common.swagger.SwaggerConfiguration,\</span><br><span class="line">  com.heima.common.swagger.Swagger2Configuration,\</span><br></pre></td></tr></table></figure><br><h1 id="Feign基本使用"><a href="#Feign基本使用" class="headerlink" title="Feign基本使用"></a>Feign基本使用</h1><h2 id="一、Feign概述"><a href="#一、Feign概述" class="headerlink" title="一、Feign概述"></a><strong>一、Feign概述</strong></h2><p>Feign是Spring Cloud提供的声明式、模板化的HTTP客户端， 它使得调用远程服务就像调用本地服务一样简单，只需要创建一个接口并添加一个注解即可。</p><p>Spring Cloud集成Feign并对其进行了增强，使Feign支持了Spring MVC注解；Feign默认集成了Ribbon，所以Fegin默认就实现了负载均衡的效果。</p><p><img src="https://img-blog.csdnimg.cn/20191201125843452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NyYXp5bWFrZXJjaXJjbGU=,size_16,color_FFFFFF,t_70" alt="img"></p><br><h2 id="二、Feign入门"><a href="#二、Feign入门" class="headerlink" title="二、Feign入门"></a><strong>二、Feign入门</strong></h2><blockquote><p>注意：以下所有步骤实现的前提是需要在启动类上加入注解 <strong>@EnableFeignClients</strong> 主要是为开启feign接口扫描</p></blockquote><p>1.创建服务提供者</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Cloud OpenFeign Starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>代码如下（示例）：</p><p>在服务提供者中调用servic层获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建服务提供者</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> userService.getUserById(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建feign接口</p><p>代码如下（示例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FeignClient</span> 一般采用服务名进行命名</span></span><br><span class="line"><span class="comment"> * name：指定FeignClient的名称，如果项目使用了Ribbon，name属性会作为微服务的名称，用于服务发现</span></span><br><span class="line"><span class="comment"> * url: url一般用于调试，可以手动指定<span class="doctag">@FeignClient</span>调用的地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestMapping</span> 主要用于feign框架拼接传递url，弥补了Ribbon的url需要手动拼接的缺陷</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PathVariable</span>(&quot;id&quot;) 当路径为restful风格时路径传参方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestParam</span>(&quot;id&quot;) 当路径为？id=250 时传参方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestBody</span> User user 当路径为对象时采用的传参方式，（集合、数组等都属于对象）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;feign-provider&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeign</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteUserById&quot;)</span></span><br><span class="line">    User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>;<span class="comment">//？形式拼接参数，?id=250</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    User <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>;<span class="comment">//pojo---&gt;json</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>3.创建服务消费者（consumer）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务消费者</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserFeign userFeign;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userFeign.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.209</span><span class="number">.129</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">feign-consumer</span></span><br></pre></td></tr></table></figure><br><h2 id="三、Feign原理"><a href="#三、Feign原理" class="headerlink" title="三、Feign原理"></a>三、Feign原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、将feign接口的代理类扫描到Spring容器中：</span><br><span class="line">        @EnableFeignClients开启feign注解扫描：FeignClientsRegistrar.registerFeignClients()扫描被 @FeignClient标识的接口生成代理类，并把接口和代理类交给Spring的容器管理。</span><br><span class="line">    2、为接口的方法创建RequestTemplate</span><br><span class="line">        当consumer调用feign代理类时，代理类会调用SynchronousMethodHandler.invoke()创建RequestTemplate(url，参数)</span><br><span class="line">    3、发出请求</span><br><span class="line">        代理类会通过RequestTemplate创建Request，然后client(URLConnetct、HttpClient、OkHttp)使用Request发送请求</span><br></pre></td></tr></table></figure><br><h2 id="nacos与openfeign示例"><a href="#nacos与openfeign示例" class="headerlink" title="nacos与openfeign示例"></a>nacos与openfeign示例</h2><p>父pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>order-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2020.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p><strong>消费者user-service</strong></p><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// nacos注册发现</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">// 启用feign</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.userservice.feign.FeignOrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FeignOrderService feignOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">123</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">order</span> <span class="operator">=</span> feignOrderService.getOrder();</span><br><span class="line">        System.out.println(<span class="string">&quot;qxd：&quot;</span>+order);</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.121</span><span class="number">.130</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><br><p><strong>服务提供者order-service</strong></p><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getOrder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;these&#x27;re list of order&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.121</span><span class="number">.130</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>运行localhost:8080&#x2F;test</p><p>就成功通过openfeign在8080端口的服务调用8081的服务</p><br><p><strong>总结</strong></p><p>1、配置依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>2、启动类开启feign注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure><br><p>3、在需要远程调用的服务中使用注解</p><p>@FeignClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;orderservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FeignOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getOrder&quot;)</span></span><br><span class="line">    String <span class="title function_">getOrder</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="GateWay网关"><a href="#GateWay网关" class="headerlink" title="GateWay网关"></a>GateWay网关</h1><p>配置</p><ul><li>maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   gateway网关：     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://leadnews-user</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><br><h1 id="freemarker"><a href="#freemarker" class="headerlink" title="freemarker"></a>freemarker</h1><p>通过模板技术生成静态的html文件</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>freemarker作为springmvc一种视图格式，默认情况下SpringMVC支持freemarker视图格式</p><br><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8881</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-freemarker</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span> <span class="comment"># 关闭模板缓存，方便测试</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">template_update_delay:</span> <span class="number">0</span> <span class="comment"># 检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span> <span class="comment"># 指定Freemarker模板文件的后缀(默认为 .ftlh)</span></span><br></pre></td></tr></table></figure><br><p>示例</p><p>HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;basic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;freemarker&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setName(<span class="string">&quot;小米&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">22</span>);</span><br><span class="line">        student.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        student.setMoney(<span class="number">3000.0f</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;stu&quot;</span>,student);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;01-basic&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><p>resources&#x2F;templates&#x2F;01-basic.ftl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>普通文本 string 展示：<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">Hello $&#123;name&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>对象Student中的数据展示：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">姓名：$&#123;stu.name&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">年龄：$&#123;stu.age&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>1、注释</p><p>2、插值</p><p>3、FTL指令</p><p><strong>遍历list</strong></p><p>指令格式</p><p>${xxx.xxx}：获取值</p><p>${xxx_index}：获取索引</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list stus as stu&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure><br><p><strong>遍历map</strong></p><p>获取值的方式</p><ul><li>通过map[‘keyname’].property</li><li>通过map.keyname.property</li></ul><p><strong>if判断指令</strong></p><p>指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if expression&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list stus as stu&gt;</span><br><span class="line">    &lt;#if stu.name=&#x27;小红&#x27;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>    </span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure><p><strong>空值处理</strong></p><p>判断某变量是否存在使用： “??”</p><p>例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if stus??&gt;</span><br><span class="line">&lt;#list stus as stu&gt;</span><br><span class="line">    ...    </span><br><span class="line">    &lt;/#list&gt;</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure><p><strong>内建函数</strong></p><p>1、集合的大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;集合名:size&#125;</span><br></pre></td></tr></table></figure><p>2、日期格式化</p><p>today：后端model设置的属性名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">显示年月日：$&#123;today:date&#125;</span><br><span class="line">显示时分秒：$&#123;today:time&#125;</span><br><span class="line">显示日期+时间：$&#123;today?datetime&#125;</span><br><span class="line">自定义格式化：$&#123;today?string(&quot;yyyy年&quot;MM月)&#125;</span><br></pre></td></tr></table></figure><p>3、内建函数c</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">&quot;point&quot;</span>,<span class="number">1234444</span>);</span><br></pre></td></tr></table></figure><p>point是数字型，使用${point}会显示这个数字的值，每三位使用逗号分隔。</p><p>如果不想显示为每三位分隔的数字，可用使用c函数将数字型转成字符串输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;point?c&#125;</span><br></pre></td></tr></table></figure><p>4、将json字符串转成对象</p><p>例</p><p>其中用到了assign标签，assign的作用是定义一个变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign text=&quot;&#123;&#x27;bank&#x27;:&#x27;工商银行&#x27;,&#x27;account&#x27;:&#x27;100003939&#x27;&#125;&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;#assign data=text?eval /&gt;</span><br><span class="line">开户行：$&#123;data.bank&#125; 账号：$&#123;data.account&#125;</span><br></pre></td></tr></table></figure><p>4、文本</p><h2 id="静态文件生成"><a href="#静态文件生成" class="headerlink" title="静态文件生成"></a>静态文件生成</h2><p>使用freemarker原生API将页面生成html文件</p><p>基本使用</p><p>1、获取Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Configuration configurationl;</span><br></pre></td></tr></table></figure><p>2、获取模板，生成文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getTemplate：参数是模板名称</span></span><br><span class="line"><span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configurationl.getTemplate(<span class="string">&quot;02-basic.ftl&quot;</span>);</span><br><span class="line"><span class="comment">// process：参数1是数据，参数2是生成的文件路径</span></span><br><span class="line">template.process(getData(),<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d:/list.html&quot;</span>));</span><br></pre></td></tr></table></figure><br><p>getData()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map <span class="title function_">getData</span><span class="params">()</span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">    student.setAge(<span class="number">22</span>);</span><br><span class="line">    student.setMoney(<span class="number">123123f</span>);</span><br><span class="line">    student.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    map.put(<span class="string">&quot;stu&quot;</span>,student);</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;freema&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="安装MinIO"><a href="#安装MinIO" class="headerlink" title="安装MinIO"></a>安装MinIO</h2><p>1、拉去镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><br><p>2、创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \-p 9000:9000 \-p 9001:9001 \--name minio1 \-v /home/minio/data:/data \-e &quot;MINIO_ROOT_USER=minio&quot; \-e &quot;MINIO_ROOT_PASSWORD=minio123&quot; \minio/minio server /data --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><blockquote><p>浏览器访问9001，java代码访问9000</p></blockquote><p>3、访问minio</p><p><a href="http://192.168.200.130:9000/">http://192.168.200.130:9000</a></p><br><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a><strong>遇到的问题</strong></h3><p>request time and the server’s time is too large</p><h1 id="MinIO"><a href="#MinIO" class="headerlink" title="MinIO"></a>MinIO</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>bucket - 类比于文件系统的目录</li><li>Object - 类比于文件系统的文件</li><li>Keys - 类比文件名</li></ul><p>创建bucket</p><br><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把list.html文件上传到minio中，并且可以在浏览器访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\list.html&quot;</span>);</span><br><span class="line">            <span class="comment">//1. 获取minio的链接信息 创建一个minio的客户端</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> MinioClient.builder().credentials(<span class="string">&quot;minio&quot;</span>, <span class="string">&quot;minio123&quot;</span>).endpoint(<span class="string">&quot;http://192.168.121.130:9001&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 上传</span></span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(<span class="string">&quot;list.html&quot;</span>) <span class="comment">// 文件名称</span></span><br><span class="line">                    .contentType(<span class="string">&quot;text/html&quot;</span>) <span class="comment">// 文件类型</span></span><br><span class="line">                    .bucket(<span class="string">&quot;leadnews&quot;</span>) <span class="comment">// 桶名称 与minio管理界面创建的桶一致</span></span><br><span class="line">                    .stream(fileInputStream,fileInputStream.available(),-<span class="number">1</span>).build();</span><br><span class="line"></span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="封装MiniIO为starter"><a href="#封装MiniIO为starter" class="headerlink" title="封装MiniIO为starter"></a>封装MiniIO为starter</h2><p>1、创建basic模块存放通用的starter</p><p>-file-starter 文件管理starter</p><p>config</p><p>MinIOConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heima.file.service.FileStorageService;</span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;MinIOConfigProperties.class&#125;)</span></span><br><span class="line"><span class="comment">//当引入FileStorageService接口时</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(FileStorageService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinIOConfigProperties minIOConfigProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">buildMinioClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient</span><br><span class="line">                .builder()</span><br><span class="line">                .credentials(minIOConfigProperties.getAccessKey(), minIOConfigProperties.getSecretKey())</span><br><span class="line">                .endpoint(minIOConfigProperties.getEndpoint())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>MinIOConfigProperties.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span>  <span class="comment">// 文件上传 配置前缀file.oss</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOConfigProperties</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String readPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service</strong></p><p>FileStorageService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itheima</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FileStorageService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传图片文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename  文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadImgFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传html文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename   文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream  文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadHtmlFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String pathUrl)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[]  downLoadFile(String pathUrl);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>impl</strong></p><p>MinIOFileStorageService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heima.file.config.MinIOConfig;</span><br><span class="line"><span class="keyword">import</span> com.heima.file.config.MinIOConfigProperties;</span><br><span class="line"><span class="keyword">import</span> com.heima.file.service.FileStorageService;</span><br><span class="line"><span class="keyword">import</span> io.minio.GetObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.RemoveObjectArgs;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MinIOConfigProperties.class)</span></span><br><span class="line"><span class="meta">@Import(MinIOConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOFileStorageService</span> <span class="keyword">implements</span> <span class="title class_">FileStorageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinIOConfigProperties minIOConfigProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">separator</span> <span class="operator">=</span> <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dirPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename  yyyy/mm/dd/file.jpg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">builderFilePath</span><span class="params">(String dirPath,String filename)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(dirPath))&#123;</span><br><span class="line">            stringBuilder.append(dirPath).append(separator);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">todayStr</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        stringBuilder.append(todayStr).append(separator);</span><br><span class="line">        stringBuilder.append(filename);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传图片文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename  文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadImgFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> builderFilePath(prefix, filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(filePath)</span><br><span class="line">                    .contentType(<span class="string">&quot;image/jpg&quot;</span>)</span><br><span class="line">                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-<span class="number">1</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">urlPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(minIOConfigProperties.getReadPath());</span><br><span class="line">            urlPath.append(separator+minIOConfigProperties.getBucket());</span><br><span class="line">            urlPath.append(separator);</span><br><span class="line">            urlPath.append(filePath);</span><br><span class="line">            <span class="keyword">return</span> urlPath.toString();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio put file error.&quot;</span>,ex);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传文件失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传html文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename   文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream  文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadHtmlFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> builderFilePath(prefix, filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(filePath)</span><br><span class="line">                    .contentType(<span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-<span class="number">1</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">urlPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(minIOConfigProperties.getReadPath());</span><br><span class="line">            urlPath.append(separator+minIOConfigProperties.getBucket());</span><br><span class="line">            urlPath.append(separator);</span><br><span class="line">            urlPath.append(filePath);</span><br><span class="line">            <span class="keyword">return</span> urlPath.toString();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio put file error.&quot;</span>,ex);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传文件失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String pathUrl)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> pathUrl.replace(minIOConfigProperties.getEndpoint()+<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key.indexOf(separator);</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> key.substring(<span class="number">0</span>,index);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> key.substring(index+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 删除Objects</span></span><br><span class="line">        <span class="type">RemoveObjectArgs</span> <span class="variable">removeObjectArgs</span> <span class="operator">=</span> RemoveObjectArgs.builder().bucket(bucket).object(filePath).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeObject(removeObjectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio remove file error.  pathUrl:&#123;&#125;&quot;</span>,pathUrl);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] downLoadFile(String pathUrl)  &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> pathUrl.replace(minIOConfigProperties.getEndpoint()+<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key.indexOf(separator);</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> key.substring(<span class="number">0</span>,index);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> key.substring(index+<span class="number">1</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = minioClient.getObject(GetObjectArgs.builder().bucket(minIOConfigProperties.getBucket()).object(filePath).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio down file error.  pathUrl:&#123;&#125;&quot;</span>,pathUrl);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">rc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!((rc = inputStream.read(buff, <span class="number">0</span>, <span class="number">100</span>)) &gt; <span class="number">0</span>)) <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            byteArrayOutputStream.write(buff, <span class="number">0</span>, rc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h3 id="2、在项目中集成"><a href="#2、在项目中集成" class="headerlink" title="2、在项目中集成"></a>2、在项目中集成</h3><p>导入文件管理依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加minio配置文件</p><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minio</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minio123</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">leadnews</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://192.168.121.130:9000</span></span><br><span class="line">  <span class="attr">readPath:</span> <span class="string">http://192.168.121.130:9000</span></span><br></pre></td></tr></table></figure><ol><li>在spring管理的bean中注入FileStorageService</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = MinIOApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileStorageService fileStorageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\list.html&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> fileStorageService.uploadHtmlFile(<span class="string">&quot;&quot;</span>, <span class="string">&quot;list.html&quot;</span>, fileInputStream);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM学习笔记</title>
      <link href="/2023/09/08/java/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/08/java/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="bean相关"><a href="#bean相关" class="headerlink" title="bean相关"></a>bean相关</h2><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\bean.png" alt="bean"></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring核心 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><p>在类中写方法，并在bean中配置上</p><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-接口（了解）"><a href="#2-接口（了解）" class="headerlink" title="2.接口（了解）"></a>2.接口（了解）</h3><p>在需要执行生命周期的类中，实现以下接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InitializingBean</span><br><span class="line">DisposableBean</span><br></pre></td></tr></table></figure><h3 id="关闭容器"><a href="#关闭容器" class="headerlink" title="关闭容器"></a>关闭容器</h3><p>使用创建ConfigurableApplicationContext对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableApplicationContext</span><br><span class="line"></span><br><span class="line">close()</span><br><span class="line">registerShutdownHook()</span><br></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a>setter注入</h3><h5 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bService&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.service.Impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 依赖注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.service.Impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 依赖注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.service.Impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 依赖注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="依赖自动装配"><a href="#依赖自动装配" class="headerlink" title="依赖自动装配"></a>依赖自动装配</h2><p>byType：通过class类型注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.service.Impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>byName：通过注册的bean的id对应类中的形参名，需要有set方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.service.Impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h2><p>bookDaoImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line"><span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.array = array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSet</span><span class="params">(Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.set = set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.map = map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ssmlearn.dao.Impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 引用类型注入 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;beanId&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        list</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>b<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                注入bean对象用ref</span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 配置集合类型的bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;studnts&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">        使用</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studnts&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        set</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>q<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>w<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>e<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        map</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;a&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;b&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;c&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;apple&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据源对象管理"><a href="#数据源对象管理" class="headerlink" title="数据源对象管理"></a>数据源对象管理</h2><p>引入依赖 druid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">druid</span><br></pre></td></tr></table></figure><p>aaplicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/databaseName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加载properties文件"><a href="#加载properties文件" class="headerlink" title="加载properties文件"></a>加载properties文件</h2><p>1.开启context命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.使用context加载properties命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- system-properties-mode=&quot;NEVER&quot;：不加载系统属性  classpath*：加载类路径和jar包的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot; classpath*：加载类路径和jar包的文件 :*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 方式一：类路径加载配置文件 **/</span></span><br><span class="line">ApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 方式二：文件路径加载配置文件 **/</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;E:\\work\\item\\Java-Project\\untitled\\src\\main\\resources\\applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 加载多个配置文件 **/</span></span><br><span class="line">ApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>,<span class="string">&quot;bean2.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="获取bean的方式"><a href="#获取bean的方式" class="headerlink" title="获取bean的方式"></a>获取bean的方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arg1：bean的id arg2：bean类型</span></span><br><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;bookDao&quot;</span>, BookDao.class);</span><br><span class="line"></span><br><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br></pre></td></tr></table></figure><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><h3 id="定义bean"><a href="#定义bean" class="headerlink" title="定义bean"></a>定义bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@component</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Repository</span></span><br></pre></td></tr></table></figure><p>设定当前类为bean</p><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\component.png" alt="component"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 核心配置文件中通过组件扫描加载bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ssmlearn&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><p>@Configuration：代表当前类是配置类</p><p>@ComponentScan(“”)：设定扫描路径，配置多个使用{}，扫描配置类所在的包，加载对应配置信息</p><p>代替applicationContext.xml配置文件</p><p>@PropertySource(“”)：设置配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.ssmlearn&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载使用配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure><h3 id="bean作用范围与生命周期"><a href="#bean作用范围与生命周期" class="headerlink" title="bean作用范围与生命周期"></a>bean作用范围与生命周期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">/** 单例模式 **/</span></span><br><span class="line"><span class="meta">@Scope()</span></span><br><span class="line"><span class="comment">/** 多例模式 **/</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span>&lt;init&gt; <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生命周期初始 **/</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生命周期销毁 **/</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="依赖注入-1"><a href="#依赖注入-1" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>@Autowired：按类型装配</p><p>使用反射里的暴力反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br></pre></td></tr></table></figure><p>按名称注入@Qualifier()</p><p>@Qualifier()无法单独使用，要配合@Autowired</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">/** 按名称注入 **/</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 定义bean的名称 **/</span></span><br><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>简单类型注入：@Value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;123&quot;)</span></span><br><span class="line">String str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从配置文件引入，需要在配置类配置@PropertySource(&quot;&quot;)</span></span><br></pre></td></tr></table></figure><p>String str;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 第三方bean管理</span><br><span class="line"></span><br><span class="line">使用@Bean设定为bean</span><br><span class="line"></span><br><span class="line">给形参会自动注入</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Configuration</span><br><span class="line">public class JdbcConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource dataSource()&#123;</span><br><span class="line">        DruidDataSource ds = new DruidDataSource();</span><br><span class="line">        ds.setDriverClassName();</span><br><span class="line">        ds.setUrl();</span><br><span class="line">        ds.setUsername();</span><br><span class="line">        ds.setPassword();</span><br><span class="line">        return ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入</p><p>@Import()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring整合mybatis"><a href="#spring整合mybatis" class="headerlink" title="spring整合mybatis"></a>spring整合mybatis</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring操作数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis与spring整合需要 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        SqlSessionFactoryBean ssfb=<span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.ssmlearn.domain&quot;</span>);</span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置mapper扫描路径</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.ssmlearn.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring整合junit"><a href="#spring整合junit" class="headerlink" title="spring整合junit"></a>spring整合junit</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定类运行器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 指定spring上下文的配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImplTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testSave&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>面向切面编程</p><p>作用：在不惊动原始设计的基础上为其进行功能增强</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 告诉spring，这是作为aop的</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="comment">// 设定切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.ssmlearn.service.BookService.save())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设定通知，与切入点绑定</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring核心配置文件加上@EnableAspectJAutoProxy，表示要使用注解开发AOP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\aop.png" alt="aop"></p><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\aop-execution.png" alt="aop-execution"></p><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><h4 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h4><p>执行在原始方法前面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h4><p>执行在原始方法后面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><p>自由选择原始方法执行时机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">    System.out.println(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 对原始方法的调用</span></span><br><span class="line">    pjp.proceed();</span><br><span class="line">    System.out.println(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始方法有返回值</span></span><br><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">    System.out.println(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 对原始方法的调用</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    System.out.println(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span>  ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例（方法执行万次的时间）"><a href="#示例（方法执行万次的时间）" class="headerlink" title="示例（方法执行万次的时间）"></a>示例（方法执行万次的时间）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取原始方法对象，封装了原始方法执行过程</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> pjp.getSignature();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取原始方法所在类的类名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取原始方法的方法名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">        pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;万次执行&quot;</span>+className+<span class="string">&quot;.&quot;</span>+methodName+<span class="string">&quot;--&gt;执行时间：&quot;</span>+(end-                                   start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通知获取数据"><a href="#通知获取数据" class="headerlink" title="通知获取数据"></a>通知获取数据</h3><p>在aop中获取传给原始方法的参数</p><p>@After和@Before通过 JoinPoint 获取传入的参数</p><p>@Arount通过 ProceedingJoinPoint 获取传入的参数</p><p>@AfterReturning通过 传入Object 参数 并 注释 returning &#x3D; “argName” 获取返回值</p><p>@AfterThrowing 通过 传入 Throwable 参数 并 注释 throwing &#x3D; “tName” 获取抛出的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(JoinPoint jp)</span>&#123;</span><br><span class="line">    Object[] args = jp.getArgs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">    Object[] args = pjp.getArgs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object ret)</span>&#123;</span><br><span class="line">    System.out.println(ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;t&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable t)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例（去除百度云链接密码去除空格）"><a href="#示例（去除百度云链接密码去除空格）" class="headerlink" title="示例（去除百度云链接密码去除空格）"></a>示例（去除百度云链接密码去除空格）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(boolean com.ssmlearn.dao.ResourceDao.openUrl(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;DataAdvice.servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">trimStr</span><span class="params">(ProceedingJoinPoint pjpt)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object[] args = pjpt.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(args[i].getClass().equals(String.class))&#123;</span><br><span class="line">                args[i]  = args[i].toString().trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjpt.proceed(args);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">ResourceDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">openUrl</span><span class="params">(String url,String pwd)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd.equals(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">ResourceDao</span> <span class="variable">resourceDao</span> <span class="operator">=</span> ctx.getBean(ResourceDao.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">root</span> <span class="operator">=</span> resourceDao.openUrl(<span class="string">&quot;https://...&quot;</span>, <span class="string">&quot;root &quot;</span>);</span><br><span class="line">        System.out.println(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\shiwu.png" alt="shiwu"></p><ol><li><p>在业务层接口上添加Spring事务管理@Transactional</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfter</span><span class="params">(String out,String in,Double money)</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>设置事务管理器</p><p>配置类形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    DataSourceTransactionManager dstm=<span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">    dstm.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> dstm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>配置文件形式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启事务注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>开启注解式事务驱动@EnableTransactionManagement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.ssmlearn&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\tran.png" alt="tran"></p><h3 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h3><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\swcbxw.png" alt="swcbxw"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">    <span class="comment">// 不管程序运行成功与失败，都新开事务，继续执行其方法</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out,String in,Double money)</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="xml形式"><a href="#xml形式" class="headerlink" title="xml形式"></a>xml形式</h3><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>概述：基于Java实现MVC模型的轻量级Web框架</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>创建springmvc配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.mvclearn.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建web容器启动类，加载springmvc配置，并设置springmvc请求拦截路径</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化容器对象</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">// 加载springmvc配置类，将配置注册到容器中</span></span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="comment">// 设置哪些请求归mvc处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 加载除springmvc之外的spring容器对应的内容</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span>     <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">// 设置返回结果是字符串</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;return value&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件形式"><a href="#配置文件形式" class="headerlink" title="配置文件形式"></a>配置文件形式</h4><p>1.webapp&#x2F;WEB-INF下创建web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置前端控制器，对浏览器发送的请求进行统一处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载springmvc.xml配置文件的位置和名称，配置的是Spring配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--contextConfigLocation:上下文配置路径，固定值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--classpath:类路径，值得是Java和resources文件夹--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--springmvc.xml:指的是配置文件的名称：需要配置springmvc.xml，在下面--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置启动加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启项目时打开的页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建spring-mvc.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.ssm.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash;处理映射器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash;处理器适配器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash;配置视图解析器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;viewResolver&quot; class=&quot;org.thymeleaf.spring4.view.ThymeleafViewResolver&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;order&quot; value=&quot;1&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;templateEngine&quot; ref=&quot;templateEngine&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash; templateEngine &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;templateEngine&quot; class=&quot;org.thymeleaf.spring4.SpringTemplateEngine&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;templateResolver&quot; ref=&quot;templateResolver&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;templateResolver&quot; class=&quot;org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/templates/&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;suffix&quot; value=&quot;.html&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;templateMode&quot; value=&quot;HTML5&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.使用tomcat启动</p><h3 id="bean加载控制"><a href="#bean加载控制" class="headerlink" title="bean加载控制"></a>bean加载控制</h3><p>设置springmvc配置类不扫描spring管理的bean，spring配置类不扫描mvc管理的bean</p><p>方法一</p><p>只扫描自己管理的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.mvclearn.dao&quot;,&quot;com.mvclearn.service&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二</p><p>排除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.mvclearn&quot;,</span></span><br><span class="line"><span class="meta">        excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">                // 按注解过滤</span></span><br><span class="line"><span class="meta">                type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">                // 注解上Controller的类</span></span><br><span class="line"><span class="meta">                classes=Controller.class</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h3><p>从 继承 AbstractDispatcherServletInitializer 变成继承 AbstractAnnotationConfigDispatcherServletInitializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求映射路径"><a href="#请求映射路径" class="headerlink" title="请求映射路径"></a>请求映射路径</h3><p>@RequestMapping()</p><p>设置当前控制器方法请求访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">// 返回结果是字符串</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;return value&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters()&#123;</span><br><span class="line">        <span class="comment">// 解决乱码</span></span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5种类型参数传递"><a href="#5种类型参数传递" class="headerlink" title="5种类型参数传递"></a>5种类型参数传递</h3><p>普通参数传参，参数名不同时使用@RequestParam绑定参数</p><p>@RequestParam</p><p>参数：required：是否为必传参数</p><p>defaultValue：默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//  请求参数名与形参名不一样时，将请求中的username参数与name绑定</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> userDao.test(name);</span><br><span class="line">        System.out.println(test);</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>POJO参数</p><p>请求参数与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数</p><p>数组参数</p><p>请求参数名与形参对象属性名相同且请求参数为多个</p><p>集合参数</p><p>请求参数名与形参对象属性名相同且请求参数为多个，@RequestParam绑定参数关系</p><h3 id="json数据传递参数"><a href="#json数据传递参数" class="headerlink" title="json数据传递参数"></a>json数据传递参数</h3><p>导入依赖</p><p>转换json类型数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@EnableWebMvc</p><p>开启mvc引入功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.mvclearn.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestBody</p><p>将请求中的请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParamsForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; list)</span>&#123;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;json&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;json&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应json数据</p><p>@ResponseBody：设置当前控制器返回值作为响应体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jsonUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">test</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型转换器</p><p>HttpMessageConverter</p><h3 id="日期型参数传递"><a href="#日期型参数传递" class="headerlink" title="日期型参数传递"></a>日期型参数传递</h3><p>@EnableWebMvc功能之一：根据类型匹配对应的类型转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.mvclearn.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@DateTimeFormat</p><p>接收形参时，根据不同的日期格式设置不同的接收方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern =&quot;yyyy-MM-dd&quot;)</span> Date date)</span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;end&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h3><p>示例</p><p>@PathVariable()：绑定路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简化开发、"><a href="#简化开发、" class="headerlink" title="简化开发、"></a>简化开发、</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@RestController 等同于</span><br><span class="line">@ResponseBody + @Controller</span><br></pre></td></tr></table></figure><p>简化@RequestMapping</p><p>标准请求动作映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserList</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">delUserById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">putUserById</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping()</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面数据交互"><a href="#页面数据交互" class="headerlink" title="页面数据交互"></a>页面数据交互</h3><p>默认情况下，访问url是springmvc进行处理，会访问不到html、css、js等内容，需要进行配置，由tomcat进行处理，（放行非springmvc的请求）</p><p>创建SpringMvcSupport配置类 继承 WebMvcConfigurationSupport</p><p>注意：记得在SpringMvcConfig注释扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 当访问/pages 下时，走pages目录下的内容</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表现层数据与前端数据传输协议"><a href="#表现层数据与前端数据传输协议" class="headerlink" title="表现层数据与前端数据传输协议"></a>表现层数据与前端数据传输协议</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_OK</span> <span class="operator">=</span> <span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_OK</span> <span class="operator">=</span> <span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_OK</span> <span class="operator">=</span> <span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_OK</span> <span class="operator">=</span> <span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_ERR</span> <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_ERR</span> <span class="operator">=</span> <span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_ERR</span> <span class="operator">=</span> <span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_ERR</span> <span class="operator">=</span> <span class="number">20040</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book == <span class="literal">null</span> ? Code.GET_ERR:Code.GET_OK;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book == <span class="literal">null</span> ? <span class="string">&quot;数据查询失败，请重试！&quot;</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h3><p>@RestControllerAdvice：声明类作为异常处理器</p><p> @ExceptionHandler：拦截指定异常，做出对应处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理所有异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;find Exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="项目异常处理"><a href="#项目异常处理" class="headerlink" title="项目异常处理"></a>项目异常处理</h3><p>自定义异常，创建包exception，用于存放处理各种异常的类</p><p>处理业务异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">( Integer code,String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理系统异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">( Integer code,String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理对应抛出的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理系统异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doSystemException</span><span class="params">(SystemException e)</span>&#123;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息给运维</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送邮件给开发人员</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(e.getCode(),<span class="literal">null</span>,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理业务异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doBusinessException</span><span class="params">(BusinessException e)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(e.getCode(),<span class="literal">null</span>,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理所有异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Code.SYSTEM_UNKNOW_ERR,<span class="literal">null</span>,<span class="string">&quot;系统繁忙，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抛出自定义异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(id==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.BUSINESS_ERR,<span class="string">&quot;不要在这样了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(Code.SYSTEM_ERR,<span class="string">&quot;服务器访问超时，请耐心等待！&quot;</span>,e);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book == <span class="literal">null</span> ? Code.GET_ERR:Code.GET_OK;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book == <span class="literal">null</span> ? <span class="string">&quot;数据查询失败，请重试！&quot;</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>异常编码</p><p>可根据自行设置，200成功0x… 500失败0x…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_OK</span> <span class="operator">=</span> <span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_OK</span> <span class="operator">=</span> <span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_OK</span> <span class="operator">=</span> <span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_OK</span> <span class="operator">=</span> <span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_ERR</span> <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_ERR</span> <span class="operator">=</span> <span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_ERR</span> <span class="operator">=</span> <span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_ERR</span> <span class="operator">=</span> <span class="number">20040</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_ERR</span> <span class="operator">=</span> <span class="number">50001</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_TIMEOUT_ERR</span> <span class="operator">=</span> <span class="number">50002</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_UNKNOW_ERR</span> <span class="operator">=</span> <span class="number">59999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BUSINESS_ERR</span> <span class="operator">=</span> <span class="number">60001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\ljq.png" alt="ljq"></p><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><p>controller下创建interceptor包创建ProjectInterceptor类 implements HandlerInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截原始操作之前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pre&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截原始操作之后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截原始操作 且post 之后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在config.SpringMvcSupport 继承 WebMvcConfigurationSupport 重写 addInterceptors 方法 添加拦截器 以及 拦截的路径（请求路径）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /pages下的资源由tomcat处理，不由springmvc处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc配置类扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.ssmlearn.controller&quot;,&quot;com.ssmlearn.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\ljqlc.png" alt="ljqlc"></p><h4 id="拦截器链配置"><a href="#拦截器链配置" class="headerlink" title="拦截器链配置"></a>拦截器链配置</h4><p>运行顺序</p><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\ljqyxsx.png" alt="ljqyxsx"></p><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>jdbc.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.ssm.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.ssm.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>log4j.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d %-5p - [%t:%x] ~ %m (%C&#123;1&#125;:%L)%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><p>generatorConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.ssm.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.ssm.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.ssm.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置插件</p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查询之前使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PageTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">        PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建Spring核心配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.ssmlearn.dao&quot;,&quot;com.ssmlearn.service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;MybatisConfig.class,JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建SpringMvc核心配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.ssmlearn.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建web容器启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建mybatis配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        SqlSessionFactoryBean factoryBean=<span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setTypeAliasesPackage(<span class="string">&quot;com.ssmlearn.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.ssmlearn.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        DruidDataSource dataSource=<span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库配置文件</p><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>创建与mapper接口 同包名的 mapper xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ssmlearn.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash; 添加数据 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;insert id=&quot;add&quot; parameterType=&quot;cn.mybatis.beans.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        insert into t_user(name,age) value(#&#123;name&#125;,#&#123;age&#125;)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/insert&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash; 删除数据 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;delete id=&quot;del&quot; parameterType=&quot;int&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        delete from t_user where id = #&#123;id&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/delete&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash; 修改数据 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;update id=&quot;update&quot; parameterType=&quot;cn.mybatis.beans.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        update t_user set name=#&#123;name&#125;,age=#&#123;age&#125; where id=#&#123;id&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/update&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询得到一个user对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.ysk.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_employee</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li>tomcat8可以运行</li></ul><h1 id="properties配置文件"><a href="#properties配置文件" class="headerlink" title="properties配置文件"></a>properties配置文件</h1><h1 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h1><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>安装依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继承 BaseMapper<T></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本CRUD"><a href="#基本CRUD" class="headerlink" title="基本CRUD"></a>基本CRUD</h2><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\mp01.png" alt="mp01"></p><h2 id="标准分页查询"><a href="#标准分页查询" class="headerlink" title="标准分页查询"></a>标准分页查询</h2><p>new PaginationInnerInterceptor()：分页查询拦截器</p><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 定义mp拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加具体的拦截器</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">pageSelect</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// arg0：当前页码 arg1：每页显示数</span></span><br><span class="line">    IPage page=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前页码值</span></span><br><span class="line">    System.out.println(page.getCurrent());</span><br><span class="line">    <span class="comment">// 每页显示数</span></span><br><span class="line">    System.out.println(page.getSize());</span><br><span class="line">    <span class="comment">// 一共多少页</span></span><br><span class="line">    System.out.println(page.getPages());</span><br><span class="line">    <span class="comment">// 一个多少条数据</span></span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    System.out.println(page.getRecords());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开日志</p><p>可查看sql语句等信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>QueryWrapper<T></p><p>qw.eq：查询与字段相等的</p><p>qw.lt：查询小于字段的</p><p>qw.gt：查询大于字段的</p><p>qw.le：查询小于等于字段的</p><p>qw.ge：查询大于等于字段的</p><p>qw.between：范围查询</p><p>qw.like：模糊查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式1：常规格式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;Book&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.lt(<span class="string">&quot;price&quot;</span>,<span class="string">&quot;100&quot;</span>);</span><br><span class="line">    qw.gt(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;50&quot;</span>);</span><br><span class="line">    List&lt;Book&gt; books = bookDao.selectList(qw);</span><br><span class="line">    System.out.println(books);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式2：链式编程格式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;Book&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.lt(<span class="string">&quot;price&quot;</span>,<span class="string">&quot;100&quot;</span>).gt(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;50&quot;</span>);</span><br><span class="line">    List&lt;Book&gt; books = bookDao.selectList(qw);</span><br><span class="line">    System.out.println(books);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式3：lambda格式（推荐）</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;Book&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.lambda().lt(Book::getPrice,<span class="number">100</span>).gt(Book::getPrice,<span class="number">10</span>);</span><br><span class="line">    List&lt;Book&gt; books = bookDao.selectList(qw);</span><br><span class="line">    System.out.println(books);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式4：lambda格式（推荐）</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    lqw.lt(Book::getPrice,<span class="number">100</span>).gt(Book::getPrice,<span class="number">10</span>);</span><br><span class="line">    List&lt;Book&gt; books = bookDao.selectList(lqw);</span><br><span class="line">    System.out.println(books);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .or()：或查询 示例：lqw.lt(Book::getPrice,100).or().gt(Book::getPrice,10);</span></span><br></pre></td></tr></table></figure><h2 id="条件查询null判断"><a href="#条件查询null判断" class="headerlink" title="条件查询null判断"></a>条件查询null判断</h2><p>lt、gt等方法 添加上第一个参数</p><p>如果判断为true就连接查询条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    lqw.lt(Book.getPrice != <span class="literal">null</span>,Book::getPrice,<span class="number">100</span>).gt(Book::getPrice,<span class="number">10</span>);</span><br><span class="line">    List&lt;Book&gt; books = bookDao.selectList(lqw);</span><br><span class="line">    System.out.println(books);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h2><p>查询结果包含模型类中部分属性</p><p>lqw.select()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    lqw.select(Book::getId,Book::getName,Book::getPrice);</span><br><span class="line">    List&lt;Book&gt; books = bookDao.selectList(lqw);</span><br><span class="line">    System.out.println(books);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果包含模型类中未定义的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;Book&gt; qm=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    qm.select(<span class="string">&quot;count(*) as count&quot;</span>);</span><br><span class="line">    qm.groupBy(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">    List&lt;Book&gt; books = bookDao.selectList(lqw);</span><br><span class="line">    System.out.println(books);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射匹配兼容性"><a href="#映射匹配兼容性" class="headerlink" title="映射匹配兼容性"></a>映射匹配兼容性</h2><p>字段映射与表名映射</p><p>@TableName()：表与数据表绑定、</p><p>@TableField()：属性与数据表字段绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tbl_book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;book_name&quot;,select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String dd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="id生成策略"><a href="#id生成策略" class="headerlink" title="id生成策略"></a>id生成策略</h2><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\idpro.png" alt="idpro"></p><h2 id="全局配置（表名映射前缀，id生成策略）"><a href="#全局配置（表名映射前缀，id生成策略）" class="headerlink" title="全局配置（表名映射前缀，id生成策略）"></a>全局配置（表名映射前缀，id生成策略）</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># id 生成策略</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br><span class="line">      <span class="comment"># 类名前缀添加</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br></pre></td></tr></table></figure><h2 id="多数据操作"><a href="#多数据操作" class="headerlink" title="多数据操作"></a>多数据操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询多数据</span></span><br><span class="line">List&lt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">userDao.selectBatchIds(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除多数据</span></span><br><span class="line">List&lt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">userDao.deleteBatchIds(list);</span><br></pre></td></tr></table></figure><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>基础配置</p><p>@TableLogic(value：没有删除的值,delval：删除的值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic(value = &quot;0&quot;,delval = &quot;1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><p>全局配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span></span><br><span class="line">      <span class="comment"># 对应数据库的字段</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="comment"># 没被删除的值</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 删除后的值</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>解决并发问题</p><p>添加字段与属性，属性添加@Version注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><p>配置mp拦截器</p><p>new OptimisticLockerInnerInterceptor()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 定义mp拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加具体的拦截器</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加乐观锁 拦截器</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        代码生成器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        模板引擎--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置，启动自动生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置数据源</span></span><br><span class="line">        DataSourceConfig dataSourceConfig=<span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">&quot;702343&quot;</span>);</span><br><span class="line"></span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置全局配置</span></span><br><span class="line">        GlobalConfig globalConfig=<span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        globalConfig.setOutputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/mybatisplus/src/main/java&quot;</span>);</span><br><span class="line">        globalConfig.setOpen(<span class="literal">false</span>);</span><br><span class="line">        globalConfig.setAuthor(<span class="string">&quot;Yesk&quot;</span>);</span><br><span class="line">        globalConfig.setFileOverride(<span class="literal">true</span>);</span><br><span class="line">        globalConfig.setMapperName(<span class="string">&quot;%sDao&quot;</span>);</span><br><span class="line">        globalConfig.setIdType(IdType.ASSIGN_ID);</span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包相关配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">packageConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        packageConfig.setParent(<span class="string">&quot;com.itheima&quot;</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;domain&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;dao&quot;</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        <span class="comment">// 设置参与生成的表名</span></span><br><span class="line">        strategyConfig.setInclude(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置的前缀不参与生成</span></span><br><span class="line">        strategyConfig.setTablePrefix(<span class="string">&quot;tbl_&quot;</span>);</span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">        strategyConfig.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        strategyConfig.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习笔记</title>
      <link href="/2023/09/08/linux/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/08/linux/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>Centos 7版本安装docker</p><h3 id="1、Docker及系统版本"><a href="#1、Docker及系统版本" class="headerlink" title="1、Docker及系统版本"></a>1、Docker及系统版本</h3><p>官网奉上：<a href="https://www.docker.com/">https://www.docker.com/</a><br>Docker从17.03版本之后分为CE（Community Edition: 社区版）和EE（Enterprise Edition: 企业版）。相对于社区版本，企业版本强调安全性，但需付费使用。这里我们使用社区版本即可。<br>Docker支持64位版本的CentOS 7和CentOS 8及更高版本，它要求Linux内核版本不低于3.10。<br>查看Linux版本的命令这里推荐两种：lsb_release -a或cat &#x2F;etc&#x2F;redhat-release。<br>lsb_release -a查看效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ ~]$ lsb_release -a</span><br><span class="line">LSB Version: :core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID: CentOS</span><br><span class="line">Description: CentOS Linux release 7.6.1810 (Core)</span><br><span class="line">Release: 7.6.1810</span><br><span class="line">Codename: Core</span><br></pre></td></tr></table></figure><br><p><code>cat /etc/redhat-release</code>查看版本效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[~]$ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure><br><p>显然，当前Linux系统为CentOS7。再查一下内核版本是否不低于3.10。<br>查看内核版本有三种方式：<br>● cat &#x2F;proc&#x2F;version<br>● uname -a<br>● uname -r<br>三种形式都可以查看到内容版本，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ ~]$ uname -r</span><br><span class="line">3.10.0-1160.45.1.el7.x86_64</span><br></pre></td></tr></table></figure><p>可以看到，当前Linux内核版本满足Docker的需要。</p><br><h3 id="2、Docker的自动化安装"><a href="#2、Docker的自动化安装" class="headerlink" title="2、Docker的自动化安装"></a>2、<strong>Docker的自动化安装</strong></h3><p>Docker官方和国内daocloud都提供了一键安装的脚本，使得Docker的安装更加便捷。<br>官方的一键安装方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>国内 daocloud一键安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><p>执行上述任一条命令，耐心等待即可完成Docker的安装。</p><br><h3 id="3、Docker手动安装"><a href="#3、Docker手动安装" class="headerlink" title="3、Docker手动安装"></a>3、Docker手动安装</h3><p>手动安装Docker分三步：卸载、设置仓库、安装。</p><br><h4 id="3-1、卸载Docker（可选）"><a href="#3-1、卸载Docker（可选）" class="headerlink" title="3.1、卸载Docker（可选）"></a>3.1、卸载Docker（可选）</h4><p>第一步，卸载历史版本。这一步是可选的，如果之前安装过旧版本的Docker，可以使用如下命令进行卸载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><br><h4 id="3-2、设置源仓库"><a href="#3-2、设置源仓库" class="headerlink" title="3.2、设置源仓库"></a>3.2、设置源仓库</h4><p>第二步，设置仓库。新主机上首次安装Docker Engine-Community之前，需要设置Docker仓库。此后可从仓库安装和更新Docker。<br>在设置仓库之前，需先按照所需的软件包。yum-utils提供了yum-config-manager，并且device mapper存储驱动程序需要device-mapper-persistent-data和lvm2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><br><p>执行上述命令，安装完毕即可进行仓库的设置。使用官方源地址设置命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>通常，官方的源地址比较慢，可将上述的源地址替换为国内比较快的地址：<br>● 阿里云：<a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a><br>● 清华大学源：<a href="https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo">https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</a></p><p>仓库设置完毕，即可进行Docker的安装。</p><h4 id="3-3、Docker安装"><a href="#3-3、Docker安装" class="headerlink" title="3.3、Docker安装"></a>3.3、Docker安装</h4><p>执行一下命令，安装最新版本的 Docker Engine-Community 和 containerd。<br>sudo yum install -y docker-ce docker-ce-cli containerd.io<br>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。但安装完成之后的默认是未启动的，需要进行启动操作。<br>如果不需要docker-ce-cli或containerd.io可直接执行如下命令：<br>yum install -y docker-ce<br>至此，完成Docker安装。</p><br><h4 id="3-4、Docker启动"><a href="#3-4、Docker启动" class="headerlink" title="3.4、Docker启动"></a>3.4、Docker启动</h4><p>启动Docker的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><br><h4 id="3-5、验证是否安装成功"><a href="#3-5、验证是否安装成功" class="headerlink" title="3.5、验证是否安装成功"></a>3.5、验证是否安装成功</h4><p>通过运行hello-world镜像来验证是否正确安装了Docker Engine-Community。</p><br><h5 id="3-5-1、拉取镜像"><a href="#3-5-1、拉取镜像" class="headerlink" title="3.5.1、拉取镜像"></a>3.5.1、拉取镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull hello-world</span><br></pre></td></tr></table></figure><h5 id="3-5-2、查看镜像"><a href="#3-5-2、查看镜像" class="headerlink" title="3.5.2、查看镜像"></a>3.5.2、查看镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><h5 id="3-5-3、运行镜像"><a href="#3-5-3、运行镜像" class="headerlink" title="3.5.3、运行镜像"></a>3.5.3、运行镜像</h5><p>如果执行之后，控制台显示如下信息，则说明Docker安装和启动成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@hecs-360704 ~]# docker run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br><span class="line">……</span><br></pre></td></tr></table></figure><br><p>除了启动Docker，一些其他启动相关的命令：<br>● 守护进程重启：systemctl daemon-reload<br>● 重启Docker服务：systemctl restart docker &#x2F; service docker restart<br>● 关闭Docker服务：docker service docker stop &#x2F; docker systemctl stop docker</p><br><h5 id="3-6、删除Docker"><a href="#3-6、删除Docker" class="headerlink" title="3.6、删除Docker"></a>3.6、删除Docker</h5><p>删除安装包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker-ce</span><br></pre></td></tr></table></figure><p>删除镜像、容器、配置文件等内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><br><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p><strong>1、docker run</strong></p><p>启动一个新的容器。可以通过指定镜像、容器名、端口映射等参数启动运行容器。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name mynginx nginx</span><br></pre></td></tr></table></figure><p>这个命令会启动一个名为mynginx的容器，使用nginx镜像，并将容器内80端口映射到主机的8080端口。</p><p>参数说明：</p><ul><li>-d：后台运行容器。</li><li>-p：指定端口映射，格式为主机端口:容器端口。</li><li>–name：指定容器名。</li><li>nginx：指定使用的镜像。</li></ul><br><p><strong>2、docker stop</strong></p><p>停止一个正在运行的容器。指定容器名或容器ID即可停止容器。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mynginx</span><br></pre></td></tr></table></figure><p>这个命令会停止名为mynginx的容器。</p><p>参数说明：</p><ul><li>mynginx：指定容器名。</li></ul><br><p><strong>2、docker rm</strong></p><p>删除一个或多个容器。指定容器名或容器ID即可删除容器。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm mynginx</span><br></pre></td></tr></table></figure><p>这个命令会删除名为mynginx的容器。</p><p>参数说明：</p><ul><li>mynginx：指定容器名。</li></ul><br><p><strong>3、docker ps</strong></p><p>列出正在运行的容器。使用该命令可以查看当前正在运行的容器。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>这个命令会列出当前正在运行的容器的信息。</p><p>参数说明：</p><p>无。</p><br><p><strong>4、docker images</strong></p><p>列出本地镜像。使用该命令可以查看本地已经下载的镜像。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>这个命令会列出本地已经下载的镜像的信息。</p><br><p><strong>5、docker pull</strong></p><p>从远程镜像仓库拉取镜像。使用该命令可以从远程镜像仓库下载镜像。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>这个命令会从远程镜像仓库下载最新版本的nginx镜像。</p><p>参数说明：</p><ul><li>nginx：指定要下载的镜像名。</li></ul><br><p><strong>6、docker build</strong></p><p>在本地构建一个新的镜像。使用该命令可以在本地构建一个新的镜像。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mynginx .</span><br></pre></td></tr></table></figure><p>这个命令会在当前目录下的Dockerfile文件中构建一个新的镜像，并命名为mynginx。</p><p>参数说明：</p><ul><li>-t：指定镜像名。</li><li>.：指定构建上下文路径。</li></ul><br><p><strong>7、docker inspect</strong></p><p>查看容器或镜像的详细信息。使用该命令可以查看容器或镜像的详细信息。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect mynginx</span><br></pre></td></tr></table></figure><p>这个命令会查看名为mynginx的容器的详细信息。</p><p>参数说明：</p><ul><li>mynginx：指定容器或镜像名。</li></ul><br><p><strong>8、docker logs</strong></p><p>查看容器的日志。使用该命令可以查看容器的日志。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs mynginx</span><br></pre></td></tr></table></figure><p>这个命令会查看名为mynginx的容器的日志。</p><p>参数说明：</p><ul><li>mynginx：指定容器名。</li></ul><br><p><strong>9、docker exec</strong></p><p>在正在运行的容器中执行命令。使用该命令可以在正在运行的容器中执行命令。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mynginx bash</span><br></pre></td></tr></table></figure><p>这个命令会在名为mynginx的容器中打开一个交互式的终端。</p><p>参数说明：</p><ul><li>-it：以交互式方式打开终端。</li><li>mynginx：指定容器名。</li></ul><br><p><strong>10、docker network</strong></p><p>管理 Docker 网络。使用该命令可以管理Docker网络。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create mynetwork</span><br></pre></td></tr></table></figure><p>这个命令会创建一个名为mynetwork的网络。</p><p>参数说明：</p><ul><li>mynetwork：指定网络名。</li></ul><br><p><strong>11、docker volume</strong></p><p>管理 Docker 数据卷。使用该命令可以管理Docker数据卷。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create myvolume</span><br></pre></td></tr></table></figure><p>这个命令会创建一个名为myvolume的数据卷。</p><p>参数说明：</p><ul><li>myvolume：指定数据卷名。</li></ul><br><p><strong>12、docker-compose</strong></p><p>使用 Docker Compose 管理多个容器应用。使用该命令可以使用Docker Compose管理多个容器应用。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>这个命令会启动Docker Compose配置文件中定义的所有容器。</p><p>参数说明：</p><ul><li>-d：后台运行容器。</li></ul><br><h2 id="docker安装Nacos"><a href="#docker安装Nacos" class="headerlink" title="docker安装Nacos"></a>docker安装Nacos</h2><ol><li>docker拉去镜像</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server:1.2.0</span><br></pre></td></tr></table></figure><ol start="2"><li>创建容器</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --env MODE=standalone --name nacos --restart=always -d -p 8848:8848 nacos/nacos-server:1.2.0</span><br></pre></td></tr></table></figure><ul><li>MODE&#x3D;standalone 单机版</li><li>–restart&#x3D;always 开机启动</li><li>-p 8848:8848 映射端口</li><li>-d 创建一个守护式容器在后台运行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker  run \</span><br><span class="line">--name nacos -d \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart=always \</span><br><span class="line">-e JVM_XMS=256m \</span><br><span class="line">-e JVM_XMX=256m \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-v /mydata/nacos/logs:/home/nacos/logs \</span><br><span class="line">-v /mydata/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><ol start="3"><li>访问地址：<a href="http://192.168.121.130:8848/nacos">http://192.168.121.130:8848/nacos</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/03/hello-world/"/>
      <url>/2023/09/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架笔记</title>
      <link href="/2023/09/02/SSM%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/02/SSM%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringFramework"><a href="#SpringFramework" class="headerlink" title="SpringFramework"></a>SpringFramework</h1><h1 id="SSM整合理解"><a href="#SSM整合理解" class="headerlink" title="SSM整合理解"></a>SSM整合理解</h1><p>什么是SSM整合?</p><p><strong>微观</strong>：将学习的Spring SpringMVC Mybatis框架应用到项目中!</p><ul><li><p>SpringMVC框架负责控制层</p></li><li><p>Spring框架负责整体和业务层的声明式事务管理</p></li><li><p>MyBatis框架负责数据库访问层</p></li></ul><p><strong>宏观</strong>：Spring 接管一切（将框架核心组件交给Spring进行loC管理)，代码更加简洁。</p><ul><li><p>SpringMVC管理表述层、SpringMVC相关组件</p></li><li><p>Spring管理业务层、持久层、以及数据库相关(DataSource,MyBatis)的组件</p></li><li><p>使用loC的方式管理一切所需组件</p></li></ul><p><strong>实施</strong>：通过编写配置文件，实现SpringloC容器接管一切组件。</p><p><strong>SSM整合核心问题明确</strong></p><p>SSM整合需要几个IoC容器？</p><p>两个容器（web容器和root容器）</p><p>每个IoC容器对应哪些类型组件？</p><table><thead><tr><th>web容器</th><th>web相关组件（controller，springmvc核心组件）</th></tr></thead><tbody><tr><td>root容器</td><td>业务和持久层相关组件（service，aop，tx，dataSource，mybatis，mapper等）</td></tr></tbody></table><p>Ioc容器之间关系和调用方向？</p><p>web容器是root容器的子容器，父子容器关系。</p><ul><li>父容器：root容器，盛放service、mapper、mybatis等相关组件</li><li>子容器：web容器，盛放controller、web相关组件</li></ul><p>具体多少配置类以及对应容器关系？</p><table><thead><tr><th>配置名</th><th>对应内容</th><th>对应容器</th></tr></thead><tbody><tr><td>WebJavaConfig</td><td>controller,springmvc相关</td><td>web容器</td></tr><tr><td>ServiceJavaConfig</td><td>service,aop,tx相关</td><td>root容器</td></tr><tr><td>MapperJavaConfig</td><td>mapper,datasource,mybatis相关</td><td>root容器</td></tr></tbody></table><p>Ioc初始化方式和配置位置？</p><h1 id="SSM整合配置实战"><a href="#SSM整合配置实战" class="headerlink" title="SSM整合配置实战"></a>SSM整合配置实战</h1><p>配置maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jakarta.annotation-api.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">jakarta.annotation-api.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jakarta.jakartaee-web-api.version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">jakarta.jakartaee-web-api.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson-databind.version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">jackson-databind.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hibernate-validator.version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">hibernate-validator.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pagehelper.version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">pagehelper.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jakarta.servlet.jsp.jstl-api.version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">jakarta.servlet.jsp.jstl-api.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jakarta.annotation-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            springmvc</span></span><br><span class="line"><span class="comment">                spring-webmvc</span></span><br><span class="line"><span class="comment">                jakarta.jakartaee-web-api</span></span><br><span class="line"><span class="comment">                jackson-databind</span></span><br><span class="line"><span class="comment">                nibernate-validator / anno</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jakarta.jakartaee-web-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jakarta.servlet.jsp.jstl-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson-databind.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate-validator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate-validator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="依赖整合和添加"><a href="#依赖整合和添加" class="headerlink" title="依赖整合和添加"></a>依赖整合和添加</h2><h2 id="控制层配置编写-springMVC整合"><a href="#控制层配置编写-springMVC整合" class="headerlink" title="控制层配置编写(springMVC整合)"></a>控制层配置编写(springMVC整合)</h2><blockquote><p>主要配置controller,springmvc相关组件配置</p></blockquote><p>位置：WebJavaConfig.java（命名随意）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. controller</span></span><br><span class="line"><span class="comment"> * 2. 全局异常处理器</span></span><br><span class="line"><span class="comment"> * 3. handlerMapping handlerAdapter</span></span><br><span class="line"><span class="comment"> * 4. 静态资源处理</span></span><br><span class="line"><span class="comment"> * 5. jsp 视图解析器前后缀</span></span><br><span class="line"><span class="comment"> * 6. json转化器</span></span><br><span class="line"><span class="comment"> * 7. 拦截器...</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 实现springmvc组件声明标准化接口WebMvcConfigurer提供了各种组件对应的方法</span></span><br><span class="line"><span class="comment">   2. 添加配置类注解<span class="doctag">@Configuration</span></span></span><br><span class="line"><span class="comment">   3. 添加mvc复合功能开关<span class="doctag">@EnableWebMvc</span></span></span><br><span class="line"><span class="comment">   4. 添加controller层扫描注解</span></span><br><span class="line"><span class="comment">   5. 开启默认处理器，支持静态资源处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制层配置</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;cn.ysk.controller&quot;,&quot;cn.ysk.exceptionhandler&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcJavaConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态资源处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"><span class="comment">//        registry.addInterceptor()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层配置编写-AOP-TX整合"><a href="#业务层配置编写-AOP-TX整合" class="headerlink" title="业务层配置编写(AOP&#x2F;TX整合)"></a>业务层配置编写(AOP&#x2F;TX整合)</h2><blockquote><p>主要配置service，注解aop和声明事务相关配置</p></blockquote><p>位置：ServiceJavaConfig.java（命名随意）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * desc：业务层配置类：service，aop，tx</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.service</span></span><br><span class="line"><span class="comment"> * 2.开启aop注解的支持aspect：<span class="doctag">@Before</span> <span class="doctag">@After</span> <span class="doctag">@AfterReturning</span> <span class="doctag">@AfterThrowing</span> <span class="doctag">@Around</span> <span class="doctag">@Aspect</span> <span class="doctag">@Order</span></span></span><br><span class="line"><span class="comment"> * 3.tx声明式事务管理：1.对应的事务管理器实现 2.开启事务注解支持 <span class="doctag">@Transactional</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceJavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层配置编写-MyBatis整合"><a href="#持久层配置编写-MyBatis整合" class="headerlink" title="持久层配置编写(MyBatis整合)"></a>持久层配置编写(MyBatis整合)</h2><blockquote><p>主要配置mapper代理对象，连接池和mybatis核心组件配置</p></blockquote><p>1.mybatis整合思路</p><p>mybatis核心api使用回顾：</p><p>总结：</p><ul><li>将SqlSessionFactory实例存储到Ioc容器</li><li>将Mapper实例存储到Ioc容器</li></ul><p>mybatis整合思路理解：</p><p>mybatis的api实例化需要复杂的过程。</p><p>例如，自己实现sqlSeesionFactory加入ioc容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 读取外部配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">ips</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(ips);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容器初始化配置类"><a href="#容器初始化配置类" class="headerlink" title="容器初始化配置类"></a>容器初始化配置类</h2><h2 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h2>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven学习笔记</title>
      <link href="/2023/09/02/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/02/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven简介和快速入门"><a href="#Maven简介和快速入门" class="headerlink" title="Maven简介和快速入门"></a>Maven简介和快速入门</h1><h2 id="Maven介绍"><a href="#Maven介绍" class="headerlink" title="Maven介绍"></a>Maven介绍</h2><p>Maven是一款为Java项目构建管理、依赖管理的工具（软件)，使用Maven可以自动化构建、测试、打包和发布项目，大大提高了开发效率和质量。<br>总结：Maven就是一个软件，掌握软件安装、配置、以及基本功能(项目构建、依赖管理)。</p><br><h2 id="Maven主要作用理解"><a href="#Maven主要作用理解" class="headerlink" title="Maven主要作用理解"></a>Maven主要作用理解</h2><p><strong>1.场景概念</strong></p><p>场景1：例如我们项目需要第三方库（依赖)，如Druid连接池、MySQL数据库驱动和Jackson等。那么我们可以将需要的依赖项的信息编写到 Maven 工程的配置文件，Maven软件就会自动下载并复制这些依赖项到项目中，也会自动下载依赖需要的依赖!确保依赖版本正确无冲突和依赖完整!<br>场景2：项目开发完成后，想要将项目打成.war文件，并部署到服务器中运行，使用Maven软件，我们可以通过一行构建命令(mvn package)快速项目构建和打包!节省大量时间!</p><p><strong>2.依赖管理:</strong><br>Maven可以管理项目的依赖，包括自动下载所需依赖库、自动下载依赖需要的依赖并且保证版本没有冲突、依赖版本管理等。通过Maven，我们可以方便地维护项目所依赖的外部库，而我们仅仅需要编写配置即可。</p><p><strong>3.构建管理:</strong><br>项目构建是指将源代码、配置文件、资源文件等转化为能够运行或部署的应用程序或库的过程!<br>Maven可以管理项目的编译、测试、打包、部署等构建过程。通过实现标准的构建生命周期，Maven 可以确保每一个构建过程都遵循同样的规则和最佳实践。同时，Maven的插件机制也使得开发者可以对构建过程进行扩展和定制。主动触发构建，只需要简单的命令操作即可。</p><br><h2 id="Maven安装与配置"><a href="#Maven安装与配置" class="headerlink" title="Maven安装与配置"></a>Maven安装与配置</h2><p>…</p><br><h1 id="基于IDEA的Maven工程创建"><a href="#基于IDEA的Maven工程创建" class="headerlink" title="基于IDEA的Maven工程创建"></a>基于IDEA的Maven工程创建</h1><p><strong>梳理Maven工程GAVP属性</strong></p><blockquote><p>Maven 工程相对之前的工程，多出一组gavp属性，gav需要我们在创建项目的时指定，p有默认值，后期通过配置文件修改。既然要填写的属性，我们先行了解下这组属性的含义!</p></blockquote><p>1.GroupID格式: com.{公司&#x2F;BU }.业务线.[子业务线]，最多4级T<br>说明: {公司&#x2F;BU}例如: alibaba&#x2F;taobao&#x2F;tmall&#x2F;aliexpress 等BU一级;子业务线可选。正例: com.taobao.tddl 或 com.alibaba.sourcing.multilang</p><p>2.ArtifactID格式:产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。正例: tc-client &#x2F; uic-api &#x2F; tair-tool &#x2F; bookstore</p><p>3.Version版本号格式推荐:主版本号.次版本号.修订号<br>1）主版本号:当做了不兼容的API修改，或者增加了能改变产品方向的新功能。2)次版本号:当做了向下兼容的功能性新增(新增类、接口等)。<br>3）修订号:修复bug，没有修改方法签名的功能加强，保持API兼容性。</p><p>例如:初始→1.0.0修改 bug →1.0.1功能调整→1.1.1等</p><br><p><strong>Packaging定义规则;</strong><br>指示将项目打包为什么类型的文件，idea根据 packaging值，识别 maven项目类型!</p><p>packaging 属性为jar(默认值)，代表普通的Java工程，打包以后是.jar结尾的文件。</p><p>packaging 属性为war，代表Java的 web工程，打包以后.war结尾的文件。<br>packaging属性为pom，代表不会打包，用来做继承的父工程。</p><br><h2 id="工程快速搭建"><a href="#工程快速搭建" class="headerlink" title="工程快速搭建"></a>工程快速搭建</h2><p>创建maven项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">手动创建web项目</span><br><span class="line">1.创建一个Javase maven工程</span><br><span class="line">2.补全项目结构</span><br><span class="line">main</span><br><span class="line">webapp</span><br><span class="line">WEB-INFO</span><br><span class="line">web.xml</span><br><span class="line">3.pom.xml</span><br><span class="line">    packaging war</span><br><span class="line">    4.刷新 - webapp多了一个小蓝点</span><br></pre></td></tr></table></figure><p><strong>插件创建</strong></p><p>a. 安装插件JBLJavaToWeb<br>file &#x2F; settings &#x2F; plugins &#x2F; marketplace 下搜索安装</p><p>b. 创建一个javasemaven工程</p><p>c. 右键、使用插件快速补全web项目</p><h1 id="Maven核心功能依赖和构建管理"><a href="#Maven核心功能依赖和构建管理" class="headerlink" title="Maven核心功能依赖和构建管理"></a>Maven核心功能依赖和构建管理</h1><h2 id="依赖管理和配置"><a href="#依赖管理和配置" class="headerlink" title="依赖管理和配置"></a>依赖管理和配置</h2><p>…</p><h2 id="依赖传递和依赖冲突"><a href="#依赖传递和依赖冲突" class="headerlink" title="依赖传递和依赖冲突"></a>依赖传递和依赖冲突</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">依赖传递:导入依赖,会自动导入依赖的依赖!( compiLe dependenices)</span><br><span class="line">简化依赖的导入确保依赖的版本无冲突。</span><br><span class="line">依赖冲突:发现已经存在依赖(重复依赖）会终止依赖传递!避免循环依赖和重复依赖的问题!</span><br><span class="line">依赖冲突发生场景:重复依赖!!</span><br><span class="line">A- B 1.0</span><br><span class="line">c -B 2.0</span><br><span class="line">A c依赖传递B</span><br><span class="line"></span><br><span class="line">依赖冲突的解决原则:</span><br><span class="line">第一原则:谁短谁优先!引用的路径长度</span><br><span class="line">A- c - B 1.0</span><br><span class="line">F - B 2.0       A C F B 2.0</span><br><span class="line">第二原则:谁上谁优先! dependencies声明的先后顺序</span><br><span class="line">A - B 1.0</span><br><span class="line">F - B 2.0</span><br><span class="line">A - F B 1.0</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">前提 </span><br><span class="line">A 1.1 -&gt; B 1.1 -&gt; C 1.1</span><br><span class="line">F 2.2 -&gt; B 2.2</span><br><span class="line"></span><br><span class="line">pom声明：</span><br><span class="line">F 2.2</span><br><span class="line">A 1.1</span><br><span class="line">B 2.2</span><br><span class="line">结果：</span><br><span class="line">F 2.2 A 1.1 B 2.2 (C 1.1 不会被引入，因为依赖冲突，后续的依赖传递终止)</span><br></pre></td></tr></table></figure><br><h2 id="依赖导入失败解决办法"><a href="#依赖导入失败解决办法" class="headerlink" title="依赖导入失败解决办法"></a>依赖导入失败解决办法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在使用Maven构建项目时，可能会发生依赖项下载错误的情况，主要原因有以下几种:</span><br><span class="line">1.下载依赖时出现网络故障或仓库服务器宕机等原因，导致无法连接至Maven 仓库，从而无法下载依赖。</span><br><span class="line"></span><br><span class="line">2.依赖项的版本号或配置文件中的版本号错误，或者依赖项没有正确定义，导致 Maven下载的依赖项与实际需要的不一致，从而引发错误。</span><br><span class="line"></span><br><span class="line">3.本地Maven仓库或缓存被污染或损坏，导致Maven无法正确地使用现有的依赖项，并且也无法重新下载!</span><br><span class="line">解决方案:</span><br><span class="line">1. 检查网络连接和Maven仓库服务器状态。</span><br><span class="line">2. 确保依赖项的版本号与项目对应的版本号匹配，并检查POM文件中的依赖项是否正确。</span><br><span class="line">3. 清除本地Maven仓库缓存(lastUpdated文件)，因为只要存在lastupdated缓存文件，刷新也不会重新下载。本地仓库中，根据依赖的gav属性依次向下查找文件夹，最终删除内部的文件，刷新重新下载即可!</span><br></pre></td></tr></table></figure><br><h2 id="扩展构建管理和插件配置"><a href="#扩展构建管理和插件配置" class="headerlink" title="扩展构建管理和插件配置"></a>扩展构建管理和插件配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">构建概念:</span><br><span class="line">项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。</span><br><span class="line">清理 编译 测试 报告 打包 部署</span><br><span class="line">主动触发场景:</span><br><span class="line">·重新编译∶ 编译不充分,部分文件没有被编译!</span><br><span class="line">·打包: 独立部署到外部服务器软件,打包部署</span><br><span class="line">·部署本地或者私服仓库: maven工程加入到本地或者私服仓库,供其他工程使用命令方式构建:</span><br><span class="line">语法: mvn构建命令构建命令...</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>maven打包插件版本过低会打包错误</p><p>导入新的插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2学习笔记</title>
      <link href="/2023/08/31/%E5%89%8D%E7%AB%AF/vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/31/%E5%89%8D%E7%AB%AF/vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Vue是什么</p><p>概念：Vue是一个用于构建用户界面的渐进式框架</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动词过去式-动词过去分词不规则变化表</title>
      <link href="/2023/08/31/%E8%8B%B1%E8%AF%AD/%E5%8A%A8%E8%AF%8D%E8%BF%87%E5%8E%BB%E5%BC%8F-%E5%8A%A8%E8%AF%8D%E8%BF%87%E5%8E%BB%E5%88%86%E8%AF%8D%E4%B8%8D%E8%A7%84%E5%88%99%E5%8F%98%E5%8C%96%E8%A1%A8/"/>
      <url>/2023/08/31/%E8%8B%B1%E8%AF%AD/%E5%8A%A8%E8%AF%8D%E8%BF%87%E5%8E%BB%E5%BC%8F-%E5%8A%A8%E8%AF%8D%E8%BF%87%E5%8E%BB%E5%88%86%E8%AF%8D%E4%B8%8D%E8%A7%84%E5%88%99%E5%8F%98%E5%8C%96%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://space7z.github.io/images/english/AAA.jpg" alt="AAA"></p><p><img src="https://space7z.github.io/images/english/AAB.jpg" alt="AAB"></p><p><img src="https://space7z.github.io/images/english/ABB.jpg" alt="ABB"></p><p><img src="https://space7z.github.io/images/english/ABC.jpg" alt="ABC"></p><p><img src="https://space7z.github.io/images/english/ABA.jpg" alt="ABA"></p><h1 id="AAA型"><a href="#AAA型" class="headerlink" title="AAA型"></a><strong>AAA型</strong></h1><p><strong>（原形→原形→原形）</strong></p><table><thead><tr><th><strong>动词原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>cut</td><td>cut</td><td>cut</td><td>割</td></tr><tr><td>shut</td><td>shut</td><td>shut</td><td>关上</td></tr><tr><td>let</td><td>let</td><td>let</td><td>让</td></tr><tr><td>set</td><td>set</td><td>set</td><td>安置</td></tr><tr><td>hit</td><td>hit</td><td>hit</td><td>打</td></tr><tr><td>split</td><td>split</td><td>split</td><td>劈开</td></tr><tr><td>spit</td><td>spit&#x2F;spat</td><td>spit&#x2F;spat</td><td>吐出</td></tr><tr><td>quit</td><td>quit&#x2F;quitted</td><td>quit&#x2F;quitted</td><td>放弃</td></tr><tr><td>cast</td><td>cast</td><td>cast</td><td>抛</td></tr><tr><td>forecast</td><td>forecast&#x2F;forecasted</td><td>forecast&#x2F;forecasted</td><td>预测</td></tr><tr><td>broadcast</td><td>broadcast&#x2F; broadcasted</td><td>broadcast&#x2F; broadcasted</td><td>广播</td></tr><tr><td>cost</td><td>cost</td><td>cost</td><td>花费</td></tr><tr><td>burst</td><td>burst</td><td>burst</td><td>突然发生</td></tr><tr><td>bid</td><td>bid&#x2F;bade</td><td>bid&#x2F;bidden</td><td>出价</td></tr><tr><td>rid</td><td>rid&#x2F;ridded</td><td>rid&#x2F;ridded</td><td>免除</td></tr><tr><td>spread</td><td>spread</td><td>spread</td><td>传播</td></tr><tr><td>read</td><td>read</td><td>read</td><td>读</td></tr><tr><td>put</td><td>put</td><td>put</td><td>放置</td></tr><tr><td>hurt</td><td>hurt</td><td>hurt</td><td>受伤</td></tr><tr><td>bet</td><td>bet</td><td>bet</td><td>赌博，打赌</td></tr></tbody></table><br><h1 id="ABB型"><a href="#ABB型" class="headerlink" title="ABB型"></a><strong>ABB型</strong></h1><p><strong>（原形→过去式→过去式）</strong></p><table><thead><tr><th><strong>动词原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>buy</td><td>bought</td><td>bought</td><td>买</td></tr><tr><td>fight</td><td>fought</td><td>fought</td><td>作战</td></tr><tr><td>seek</td><td>sought</td><td>sought</td><td>寻觅</td></tr><tr><td>think</td><td>thought</td><td>thought</td><td>思考</td></tr><tr><td>bring</td><td>brought</td><td>brought</td><td>拿来</td></tr><tr><td>catch</td><td>caught</td><td>caught</td><td>捕捉</td></tr><tr><td>teach</td><td>taught</td><td>taught</td><td>教</td></tr><tr><td>dig</td><td>dug</td><td>dug</td><td>挖</td></tr><tr><td>spin</td><td>spun</td><td>spun</td><td>旋转</td></tr><tr><td>stick</td><td>stuck</td><td>stuck</td><td>粘住</td></tr><tr><td>strike</td><td>struck</td><td>struck</td><td>打</td></tr><tr><td>swing</td><td>swung</td><td>swung</td><td>摇荡</td></tr><tr><td>win</td><td>won</td><td>won</td><td>获胜</td></tr><tr><td>hang</td><td>hung</td><td>hung</td><td>悬挂</td></tr><tr><td>bleed</td><td>bled</td><td>bled</td><td>流血</td></tr><tr><td>feed</td><td>fed</td><td>fed</td><td>喂养</td></tr><tr><td>flee</td><td>fled</td><td>fled</td><td>逃走</td></tr><tr><td>speed</td><td>sped&#x2F;speeded</td><td>sped&#x2F;speeded</td><td>加速</td></tr><tr><td>lead</td><td>led</td><td>led</td><td>引导</td></tr><tr><td>bend</td><td>bent</td><td>bent</td><td>使弯曲</td></tr><tr><td>lend</td><td>lent</td><td>lent</td><td>借出</td></tr><tr><td>send</td><td>sent</td><td>sent</td><td>寄</td></tr><tr><td>spend</td><td>spent</td><td>spent</td><td>花费</td></tr><tr><td>feel</td><td>felt</td><td>felt</td><td>触摸</td></tr><tr><td>deal</td><td>dealt</td><td>dealt</td><td>分配</td></tr><tr><td>build</td><td>built</td><td>built</td><td>建造</td></tr><tr><td>rebuild</td><td>rebuilt</td><td>rebuilt</td><td>改建</td></tr><tr><td>keep</td><td>kept</td><td>kept</td><td>保持</td></tr><tr><td>sleep</td><td>slept</td><td>slept</td><td>睡</td></tr><tr><td>sweep</td><td>swept</td><td>swept</td><td>打扫</td></tr><tr><td>weep</td><td>wept</td><td>wept</td><td>哭泣</td></tr><tr><td>make</td><td>made</td><td>made</td><td>制作</td></tr><tr><td>lay</td><td>laid</td><td>laid</td><td>放置</td></tr><tr><td>pay</td><td>paid</td><td>paid</td><td>支付</td></tr><tr><td>say</td><td>said</td><td>said</td><td>说</td></tr><tr><td>stand</td><td>stood</td><td>stood</td><td>站立</td></tr><tr><td>understand</td><td>understood</td><td>understood</td><td>了解</td></tr><tr><td>misunderstand</td><td>misunderstood</td><td>misunderstood</td><td>误会</td></tr><tr><td>sell</td><td>sold</td><td>sold</td><td>卖</td></tr><tr><td>tell</td><td>told</td><td>told</td><td>告诉</td></tr><tr><td>retell</td><td>retold</td><td>retold</td><td>复述</td></tr><tr><td>shine</td><td>shone</td><td>shone</td><td>发光</td></tr><tr><td>smell</td><td>smelt&#x2F;smelled</td><td>smelt&#x2F;smelled</td><td>发出气味</td></tr><tr><td>spell</td><td>spelt&#x2F;spelled</td><td>spelt&#x2F;spelled</td><td>拼写</td></tr><tr><td>burn</td><td>burnt&#x2F;burned</td><td>burnt&#x2F;burned</td><td>燃烧</td></tr><tr><td>learn</td><td>learnt&#x2F;learned</td><td>learnt&#x2F;learned</td><td>学习</td></tr><tr><td>dream</td><td>dreamt&#x2F;dreamed</td><td>dreamt&#x2F;dreamed</td><td>做梦</td></tr><tr><td>get</td><td>got</td><td>got&#x2F;gotten</td><td>得到</td></tr><tr><td>shoot</td><td>shot</td><td>shot</td><td>射击</td></tr><tr><td>mean</td><td>meant</td><td>meant</td><td>表…意思</td></tr><tr><td>meet</td><td>met</td><td>met</td><td>遇到</td></tr><tr><td>bless</td><td>blest&#x2F;blessed</td><td>blest&#x2F;blessed</td><td>祝福</td></tr><tr><td>lose</td><td>lost</td><td>lost</td><td>遗失</td></tr><tr><td>sit</td><td>sat</td><td>sat</td><td>坐</td></tr><tr><td>leave</td><td>left</td><td>left</td><td>离开</td></tr><tr><td>hold</td><td>held</td><td>held</td><td>拿住</td></tr><tr><td>light</td><td>lit&#x2F;lighted</td><td>lit&#x2F;lighted</td><td>点着</td></tr><tr><td>slide</td><td>slid</td><td>slid</td><td>滑行</td></tr><tr><td>hear</td><td>heard</td><td>heard</td><td>听到</td></tr><tr><td>find</td><td>found</td><td>found</td><td>找出</td></tr><tr><td>wind</td><td>wound</td><td>wound</td><td>蜿蜒前进</td></tr><tr><td>have&#x2F;has</td><td>had</td><td>had</td><td>有</td></tr><tr><td>swell</td><td>swelled</td><td>swelled&#x2F;swollen</td><td>肿胀</td></tr><tr><td>dive</td><td>dived&#x2F;dove</td><td>dived</td><td>跳水</td></tr><tr><td>throw</td><td>threw</td><td>thrown</td><td>扔</td></tr></tbody></table><br><h1 id="ABA型"><a href="#ABA型" class="headerlink" title="ABA型"></a>ABA型</h1><p>（原形→过去式→原形）</p><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>become</td><td>bacome</td><td>become</td><td>成为</td></tr><tr><td>come</td><td>came</td><td>come</td><td>来</td></tr><tr><td>overcome</td><td>overcame</td><td>overcome</td><td>克服</td></tr><tr><td>run</td><td>ran</td><td>run</td><td>跑</td></tr></tbody></table><br><h1 id="AAB型"><a href="#AAB型" class="headerlink" title="AAB型"></a>AAB型</h1><p>(原形→原形→过去分词）</p><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>beat</td><td>beat</td><td>beaten</td><td>打；敲打</td></tr></tbody></table><br><h1 id="ABC型"><a href="#ABC型" class="headerlink" title="ABC型"></a>ABC型</h1><p>（原形→过去式→过去分词）</p><table><thead><tr><th><strong>动词原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>begin</td><td>began</td><td>begun</td><td>开始</td></tr><tr><td>drink</td><td>drank</td><td>drunk</td><td>喝</td></tr><tr><td>ring</td><td>rang</td><td>rung</td><td>响铃</td></tr><tr><td>sing</td><td>sang</td><td>sung</td><td>唱歌</td></tr><tr><td>swim</td><td>swam</td><td>swum</td><td>游泳</td></tr><tr><td>sink</td><td>sank&#x2F;sunk</td><td>sunk&#x2F;sunken</td><td>下沉</td></tr><tr><td>shrink</td><td>shrank&#x2F;shrunk</td><td>shrunk</td><td>缩水</td></tr><tr><td>choose</td><td>chose</td><td>chosen</td><td>选择</td></tr><tr><td>freeze</td><td>froze</td><td>frozen</td><td>结冰</td></tr><tr><td>speak</td><td>spoke</td><td>spoken</td><td>说</td></tr><tr><td>steal</td><td>stole</td><td>stolen</td><td>偷</td></tr><tr><td>break</td><td>broke</td><td>broken</td><td>打破</td></tr><tr><td>rise</td><td>rose</td><td>risen</td><td>上升</td></tr><tr><td>arise</td><td>arose</td><td>arisen</td><td>出现</td></tr><tr><td>drive</td><td>drove</td><td>driven</td><td>驾驶</td></tr><tr><td>ride</td><td>rode</td><td>ridden</td><td>骑</td></tr><tr><td>write</td><td>wrote</td><td>written</td><td>书写</td></tr><tr><td>blow</td><td>blew</td><td>blown</td><td>吹</td></tr><tr><td>grow</td><td>grew</td><td>grown</td><td>成长</td></tr><tr><td>know</td><td>knew</td><td>known</td><td>知道</td></tr><tr><td>throw</td><td>threw</td><td>thrown</td><td>扔</td></tr><tr><td>shake</td><td>shook</td><td>shaken</td><td>摇</td></tr><tr><td>take</td><td>took</td><td>taken</td><td>拿</td></tr><tr><td>mistake</td><td>mistook</td><td>mistaken</td><td>误认</td></tr><tr><td>undertake</td><td>undertook</td><td>undertaken</td><td>承担</td></tr><tr><td>tear</td><td>tore</td><td>torn</td><td>撕裂</td></tr><tr><td>wear</td><td>wore</td><td>worn</td><td>穿着</td></tr><tr><td>swear</td><td>swore</td><td>sworn</td><td>发誓</td></tr><tr><td>draw</td><td>drew</td><td>drawn</td><td>拉</td></tr><tr><td>fly</td><td>flew</td><td>flown</td><td>飞</td></tr><tr><td>wake</td><td>woke&#x2F;waked</td><td>woken&#x2F;waked</td><td>醒着</td></tr><tr><td>awake</td><td>awoke&#x2F;awaked</td><td>awoken&#x2F;awaked</td><td>醒来</td></tr><tr><td>see</td><td>saw</td><td>seen</td><td>看</td></tr><tr><td>foresee</td><td>foresaw</td><td>foreseen</td><td>遇见</td></tr><tr><td>bite</td><td>bit</td><td>bitten</td><td>咬</td></tr><tr><td>hide</td><td>hid</td><td>hidden&#x2F;hid</td><td>隐藏</td></tr><tr><td>eat</td><td>ate</td><td>eaten</td><td>吃</td></tr><tr><td>fall</td><td>fell</td><td>fallen</td><td>掉落</td></tr><tr><td>give</td><td>gave</td><td>given</td><td>给</td></tr><tr><td>forgive</td><td>forgave</td><td>forgiven</td><td>原谅</td></tr><tr><td>forget</td><td>forgot</td><td>forgotten</td><td>忘记</td></tr><tr><td>forbid</td><td>forbade&#x2F;forbad</td><td>forbidden</td><td>禁止</td></tr><tr><td>show</td><td>showed</td><td>shown&#x2F;showed</td><td>显露</td></tr><tr><td>shave</td><td>shaved</td><td>shaven&#x2F;shaved</td><td>刮（胡子）</td></tr><tr><td>prove</td><td>proved</td><td>proven&#x2F;proved</td><td>证明</td></tr><tr><td>sew</td><td>sewed</td><td>sewn&#x2F;sewed</td><td>缝合</td></tr><tr><td>sow</td><td>sowed</td><td>sown&#x2F;sowed</td><td>种植</td></tr><tr><td>go</td><td>went</td><td>gone</td><td>去</td></tr><tr><td>do&#x2F;does</td><td>did</td><td>done</td><td>做</td></tr><tr><td>lie</td><td>lay</td><td>lain</td><td>躺</td></tr><tr><td>be(am&#x2F;is&#x2F;are)</td><td>was&#x2F;were</td><td>been</td><td>是</td></tr></tbody></table><br><h1 id="有两种形式"><a href="#有两种形式" class="headerlink" title="有两种形式"></a><strong>有两种形式</strong></h1><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>bear</td><td>bore</td><td>born</td><td>生</td></tr><tr><td></td><td>bore</td><td>borne</td><td></td></tr><tr><td>hang</td><td>hanged</td><td>hanged</td><td>吊死</td></tr><tr><td></td><td>hung</td><td>hung</td><td>挂</td></tr><tr><td>learn</td><td>learned</td><td>learned</td><td>学</td></tr><tr><td></td><td>learnt</td><td>learnt</td><td></td></tr><tr><td>lie</td><td>lied</td><td>lied</td><td>说谎</td></tr><tr><td></td><td>lay</td><td>lain</td><td>躺</td></tr><tr><td>show</td><td>showed</td><td>showed</td><td>给……看</td></tr><tr><td></td><td>showed</td><td>shown</td><td></td></tr><tr><td>spell</td><td>spelled</td><td>spelled</td><td>拼写</td></tr><tr><td></td><td>spelt</td><td>spelt</td><td></td></tr><tr><td>burn</td><td>burned</td><td>burned</td><td>烧</td></tr><tr><td></td><td>burnt</td><td>burnt</td><td></td></tr><tr><td>smell</td><td>smelled</td><td>smelled</td><td>闻</td></tr><tr><td></td><td>smelt</td><td>smelt</td><td></td></tr><tr><td>shine</td><td>shined</td><td>shined</td><td>照耀</td></tr><tr><td></td><td>shone</td><td>shone</td><td></td></tr><tr><td>dream</td><td>dreamed</td><td>dreamed</td><td>做梦</td></tr><tr><td></td><td>dreamt</td><td>dreamt</td><td></td></tr><tr><td>wake</td><td>waked</td><td>waked</td><td>醒</td></tr><tr><td></td><td>woke</td><td>woken</td><td></td></tr><tr><td>hide</td><td>hid</td><td>hid</td><td>躲藏</td></tr><tr><td></td><td>hid</td><td>hidden</td><td></td></tr><tr><td>bite</td><td>bit</td><td>bit</td><td>咬</td></tr><tr><td></td><td>bit</td><td>bitten</td><td></td></tr><tr><td>light</td><td>lighted</td><td>lighted</td><td>点着</td></tr><tr><td></td><td>lit</td><td>lit</td><td></td></tr><tr><td>prove</td><td>proved</td><td>proved</td><td>证明</td></tr><tr><td></td><td>proved</td><td>proven</td><td></td></tr><tr><td>quit</td><td>quit</td><td>quit</td><td>放弃</td></tr><tr><td></td><td>quitted</td><td>quitted</td><td></td></tr><tr><td>rid</td><td>rid</td><td>rid</td><td>免除；去掉</td></tr><tr><td></td><td>ridded</td><td>ridded</td><td></td></tr><tr><td>saw</td><td>sawed</td><td>sawed</td><td>锯</td></tr><tr><td></td><td>sawed</td><td>sawn</td><td></td></tr><tr><td>sew</td><td>sewed</td><td>sewed</td><td>缝纫</td></tr><tr><td></td><td>sewed</td><td>sown</td><td></td></tr><tr><td>shine</td><td>shone</td><td>shone</td><td>发光；闪亮</td></tr><tr><td></td><td>shined</td><td>shined</td><td></td></tr><tr><td>sink</td><td>sank</td><td>sunk</td><td>下沉</td></tr><tr><td></td><td>sank</td><td>sunken</td><td></td></tr><tr><td>sow</td><td>sowed</td><td>sowed</td><td>种植</td></tr><tr><td></td><td>sowed</td><td>sown</td><td></td></tr><tr><td>spit</td><td>spat</td><td>spat</td><td>吐</td></tr><tr><td></td><td>spit</td><td>spit</td><td></td></tr><tr><td>spring</td><td>sprang</td><td>sprung</td><td>跳跃</td></tr><tr><td></td><td>sprung</td><td>sprung</td><td></td></tr><tr><td>wet</td><td>wet</td><td>wet</td><td>浸湿；弄湿</td></tr></tbody></table><br><h1 id="情态动词"><a href="#情态动词" class="headerlink" title="情态动词"></a><strong>情态动词</strong></h1><table><thead><tr><th>原形</th><th>过去式</th><th>过去分词</th><th>汉语意思</th></tr></thead><tbody><tr><td>can</td><td>could</td><td>∕</td><td>能</td></tr><tr><td>may</td><td>might</td><td>∕</td><td>也许</td></tr><tr><td>must</td><td>∕</td><td>∕</td><td>必须</td></tr><tr><td>shall</td><td>should</td><td>∕</td><td>将要</td></tr><tr><td>will</td><td>would</td><td>∕</td><td>会</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> english </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo相关</title>
      <link href="/2023/08/30/hexo%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/08/30/hexo%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Butterfly主题"><a href="#Butterfly主题" class="headerlink" title="Butterfly主题"></a>Butterfly主题</h1><h2 id="添加音乐播放器"><a href="#添加音乐播放器" class="headerlink" title="添加音乐播放器"></a>添加音乐播放器</h2><p>hexo-tag-aplayer官方github地址：</p><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer">https://github.com/MoePlayer/hexo-tag-aplayer</a></p><ol><li>安装插件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><br><ol start="2"><li>修改Hexo配置文件（_config.yml）</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加刚刚用npm下载插件的配置在_config文件中,同时实现全局音乐</span></span><br><span class="line"><span class="comment"># 将asset_inject设置成false</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><br><ol start="3"><li>修改Butterfly主题配置文件</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开启音乐播放器</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span> <span class="comment">#每个页面都有Aplayer</span></span><br></pre></td></tr></table></figure><br><ol start="4"><li>插入音乐信息在Butterfly主题配置文件</li></ol><p>音乐来源于网易云 data-id 可以通过分享复制该歌的链接 即可获取歌曲id<br>以单曲樱花樱花想见你为例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;464916877&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-fixed=&quot;true&quot; data-autoplay=&quot;true&quot;&gt; &lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：该数据类型是<strong>song</strong>类型</p></blockquote><br><ol start="5"><li>修改主题文件配置文件pjax</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现不会因跳转其他页面而重新播放音乐</span></span><br><span class="line"><span class="comment">#相当于异步请求的ajax</span></span><br><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github相关</title>
      <link href="/2023/08/29/github%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/08/29/github%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h1><p>…or create a new repository on the command line</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# syt&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:space7z/syt.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><br><p>…or push an existing repository from the command line</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:space7z/syt.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><br><p>…or import code from another repository</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化脚本编程之CMD/DOS命令行</title>
      <link href="/2023/08/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E4%B9%8BCMD-DOS%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2023/08/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E4%B9%8BCMD-DOS%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="cmd命令"><a href="#cmd命令" class="headerlink" title="cmd命令"></a>cmd命令</h1><h2 id="mkdir创建文件夹"><a href="#mkdir创建文件夹" class="headerlink" title="mkdir创建文件夹"></a>mkdir创建文件夹</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> d:\<span class="built_in">ping</span></span><br></pre></td></tr></table></figure><br><h2 id="dir查看目录列表"><a href="#dir查看目录列表" class="headerlink" title="dir查看目录列表"></a>dir查看目录列表</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> d:\</span><br></pre></td></tr></table></figure><br><h2 id="cmd变量"><a href="#cmd变量" class="headerlink" title="cmd变量"></a>cmd变量</h2><p>设置变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set 变量名 = 值</span><br></pre></td></tr></table></figure><p>删除变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set 变量名=</span><br></pre></td></tr></table></figure><p>获取变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set 变量名</span><br></pre></td></tr></table></figure><br><p>运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set /a 1+2</span><br><span class="line">set /a var = 1+2</span><br></pre></td></tr></table></figure><br><p>bat脚本文件</p><p>运算进行输出</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /a var=<span class="number">4</span>*<span class="number">5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></span><br><span class="line"><span class="built_in">pause</span> &gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure><br><p>接收用户输入</p><p>需要编码为ansi</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p var=请输入一个数字：</span><br><span class="line"><span class="built_in">echo</span> 您输入的数字是：<span class="variable">%var%</span></span><br><span class="line"><span class="built_in">pause</span> &gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure><br><h2 id="自定义窗口"><a href="#自定义窗口" class="headerlink" title="自定义窗口"></a>自定义窗口</h2><p>设置窗口标题</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">title</span> <span class="built_in">cmd</span> xxx</span><br></pre></td></tr></table></figure><p>查看设备状态</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mode</span></span><br></pre></td></tr></table></figure><p>修改cmd</p><p>修改窗口大小为80*40</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mode</span> <span class="number">80</span>,<span class="number">40</span></span><br></pre></td></tr></table></figure><p>修改颜色</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">color</span> /? # 查看帮助</span><br><span class="line"></span><br><span class="line"><span class="built_in">color</span> 背景色字体色</span><br><span class="line"># 需要连在一起 例如 <span class="built_in">color</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><br><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>在网络中ping是一个十分强大的TCP&#x2F;IP工具。它的作用主要为：</p><p>1、用来检测网络的连通情况和分析网络速度</p><p>2、根据域名得到服务器IP</p><p>3、根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量。</p><p>我们通常会用它来直接ping ip地址，来测试网络的连通情况。</p><br><p>查看帮助</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> /?</span><br></pre></td></tr></table></figure><h3 id="排查网络故障"><a href="#排查网络故障" class="headerlink" title="排查网络故障"></a>排查网络故障</h3><p>检查本地TCP&#x2F;IP协议是否安装正常</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> localhost</span><br></pre></td></tr></table></figure><p>检查网关连接是否畅通</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>检查电脑与外部网络连接是否畅通</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> www.baidu.com</span><br></pre></td></tr></table></figure><p>丢失率为0为正常</p><br><h2 id="goto跳转"><a href="#goto跳转" class="headerlink" title="goto跳转"></a>goto跳转</h2><p>跳转执行定义部分的代码</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">rem 以下是主体部分“</span></span><br><span class="line"><span class="built_in">echo</span> hello world</span><br><span class="line"></span><br><span class="line"># 跳转到路径part1</span><br><span class="line"><span class="keyword">goto</span> part1</span><br><span class="line"></span><br><span class="line"># 定义路径part1</span><br><span class="line">:part1</span><br><span class="line"><span class="built_in">echo</span> i am ready to <span class="keyword">exit</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem 暂停作用</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><br><h2 id="start运行"><a href="#start运行" class="headerlink" title="start运行"></a>start运行</h2><p>作用：打开盘符、文件、文件夹、网址、程序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 以最大窗口方式打开D盘</span><br><span class="line"><span class="built_in">start</span> /max D:\</span><br><span class="line"># 以小窗口方式打开D盘</span><br><span class="line"><span class="built_in">start</span> /min D:\</span><br><span class="line"></span><br><span class="line"># 打开文件、文件夹</span><br><span class="line"><span class="built_in">start</span> f:\<span class="number">1</span>.txt</span><br><span class="line"></span><br><span class="line"># 打开网址</span><br><span class="line"><span class="built_in">start</span> www.baidu.com</span><br><span class="line"></span><br><span class="line"># 如果是打开文件夹，将会运行新的<span class="built_in">cmd</span>窗口名为aa bc</span><br><span class="line"><span class="built_in">start</span> &quot;aa bc&quot;</span><br><span class="line"></span><br><span class="line"># 如果想要打开的是当前盘下的aa bc文件夹,需要前面加上&quot;&quot;</span><br><span class="line"><span class="built_in">start</span> &quot;&quot; &quot;aa bc&quot;</span><br></pre></td></tr></table></figure><br><h2 id="call调用命令"><a href="#call调用命令" class="headerlink" title="call调用命令"></a>call调用命令</h2><p>程序的相互调用</p><p>main.bat</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 我是主程序</span><br><span class="line"><span class="keyword">call</span> test.bat</span><br><span class="line"><span class="built_in">echo</span> 引用完成</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>test.bat</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> hello world</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><br><h2 id="sort排序命令"><a href="#sort排序命令" class="headerlink" title="sort排序命令"></a>sort排序命令</h2><p>将文件内容排序</p><p>查看帮助</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort /?</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将文件内容排序，输出</span><br><span class="line"><span class="built_in">sort</span> text.txt</span><br><span class="line"># 将文件排序，保存为另一个文件</span><br><span class="line"><span class="built_in">sort</span> text1.txt &gt; text2.txt</span><br><span class="line"># 查看文件内容</span><br><span class="line"><span class="built_in">type</span> text2.txt</span><br></pre></td></tr></table></figure><br><h2 id="cmd-重定向"><a href="#cmd-重定向" class="headerlink" title="cmd 重定向"></a>cmd 重定向</h2><p>重定向操作符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;、&gt;&gt;、&lt;</span><br></pre></td></tr></table></figure><p>句柄的数字代码描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0：键盘输入</span><br><span class="line">1：输出到命令提示符窗口</span><br><span class="line">2：错误输出</span><br></pre></td></tr></table></figure><br><p>使用示例</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># &gt;：将<span class="built_in">ping</span>的返回数据，保存到指定目录文件中(会覆盖之前的内容)</span><br><span class="line"><span class="built_in">ping</span> www.baidu.com &gt; d:\<span class="built_in">ping</span>\baidu.txt</span><br><span class="line"></span><br><span class="line"># &gt;&gt;：追加内容使用 &gt;&gt;</span><br><span class="line"><span class="built_in">ping</span> www.baidu.com &gt;&gt; d:\<span class="built_in">ping</span>\baidu.txt</span><br><span class="line"></span><br><span class="line"># &lt;：将文件内容排序输出到窗口</span><br><span class="line"><span class="built_in">sort</span> &lt; d:\<span class="built_in">ping</span>\baidu.txt</span><br><span class="line"></span><br><span class="line"># 将错误信息输出到指定文件（di命令不存在）</span><br><span class="line">di &gt; right.txt <span class="number">2</span> &gt; error.txt</span><br></pre></td></tr></table></figure><br><h2 id="shutdown关机命令"><a href="#shutdown关机命令" class="headerlink" title="shutdown关机命令"></a>shutdown关机命令</h2><p>查看帮助</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown /?</span><br></pre></td></tr></table></figure><br><h2 id="teInet远程登录命令"><a href="#teInet远程登录命令" class="headerlink" title="teInet远程登录命令"></a>teInet远程登录命令</h2><p>telnet：查看某个端口是否可访问。开发人员搞开发的时候，经常要用的端口就是8080.那么你可以启动服务器，用telnet去查看这个端口是否可用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet www.baidu.com 80</span><br></pre></td></tr></table></figure><p>需要在程序与功能 -&gt; 启动或关闭Windows功能中开启</p><br><h2 id="特殊字符串"><a href="#特殊字符串" class="headerlink" title="特殊字符串"></a>特殊字符串</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| 命令管道符将第一条命令的结果作为第二条命令的参数来使用</span><br><span class="line">&amp; 组合命令当第一个命令执行失败了，后边的命令继续执行</span><br><span class="line">&amp;&amp; 组合命令第一个命令失败时，后边的命令也不执行</span><br><span class="line">|| 组合命令第一个命令失败时才执行后边的命令</span><br><span class="line">()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><br><h2 id="dispart硬盘管理命令"><a href="#dispart硬盘管理命令" class="headerlink" title="dispart硬盘管理命令"></a>dispart硬盘管理命令</h2><p>通过命令行方式对磁盘进行操作</p><p>diskpart</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">进入diskpart：diskpart</span><br><span class="line">查看磁盘列表：list disk</span><br><span class="line">打开计算机管理界面：compmgmt</span><br><span class="line">选择磁盘1：select disk 1</span><br><span class="line">格式化磁盘 clean</span><br><span class="line">创建主分区 creat partition primary</span><br><span class="line">定义磁盘 format fs=ntfs quick label=&quot;E&quot;</span><br><span class="line"></span><br><span class="line">文件系统格式（）</span><br></pre></td></tr></table></figure><h2 id="chkdsk磁盘修复命令"><a href="#chkdsk磁盘修复命令" class="headerlink" title="chkdsk磁盘修复命令"></a>chkdsk磁盘修复命令</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查找并修复d盘</span><br><span class="line"><span class="built_in">chkdsk</span> d: /f /r</span><br></pre></td></tr></table></figure><p>chkdsk：系统当掉或非法关机</p><h2 id="scannow系统修复"><a href="#scannow系统修复" class="headerlink" title="scannow系统修复"></a>scannow系统修复</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看帮助</span><br><span class="line">sfc /?</span><br></pre></td></tr></table></figure><br><h2 id="slmgr激活系统"><a href="#slmgr激活系统" class="headerlink" title="slmgr激活系统"></a>slmgr激活系统</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 查看windwos版本</span><br><span class="line">winver</span><br><span class="line"></span><br><span class="line"># 查看激活信息 使用参数</span><br><span class="line">slmgr</span><br><span class="line"></span><br><span class="line"># 查看过期信息</span><br><span class="line">slmgr /xpr</span><br><span class="line"></span><br><span class="line"># 查看详细信息</span><br><span class="line">slmgr /dli</span><br><span class="line"></span><br><span class="line"># 卸载密钥</span><br><span class="line">slmgr /upk</span><br><span class="line"></span><br><span class="line"># 安装密钥</span><br><span class="line">slmgr /ipk xxx</span><br><span class="line"></span><br><span class="line"># 激活</span><br><span class="line">slmgr /apo</span><br></pre></td></tr></table></figure><br><h2 id="wget爬虫命令"><a href="#wget爬虫命令" class="headerlink" title="wget爬虫命令"></a>wget爬虫命令</h2><p>下载exe文件放入到System32中</p><p><a href="https://eternallybored.org/misc/wget/">https://eternallybored.org/misc/wget/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Wget的使用</span><br><span class="line">1)支持断点下载功能</span><br><span class="line">2)同时支持FTP和HTTP下载方式</span><br><span class="line">3)支持代理服务器</span><br><span class="line">4)设置简单方便</span><br><span class="line">5)程序小，完全免费</span><br><span class="line"></span><br><span class="line">-o --output-file=FILE将软件输出信息保存到文件;</span><br><span class="line">-i --input-file=FILE从文件中取得URL;</span><br><span class="line">-r --recursive下载整个网站、目录（小心使用)</span><br><span class="line">-l --level=NUMBER下载层次</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><p>简单使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 输出信息保存到文件</span><br><span class="line">wget -o d:\log www.baidu.com</span><br></pre></td></tr></table></figure><br><h2 id="reg操作注册表命令"><a href="#reg操作注册表命令" class="headerlink" title="reg操作注册表命令"></a>reg操作注册表命令</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查询注册表内容</span><br><span class="line">reg query</span><br><span class="line"># 往注册表中添加内容</span><br><span class="line">reg add</span><br><span class="line">reg delete</span><br><span class="line">reg export</span><br><span class="line">reg import</span><br></pre></td></tr></table></figure><br><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><h3 id="netstat网络管理命令"><a href="#netstat网络管理命令" class="headerlink" title="netstat网络管理命令"></a>netstat网络管理命令</h3><p>查询tcp&#x2F;ip连接命令</p><p>以数字显示地址和ip地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n</span><br></pre></td></tr></table></figure><br><p>查询端口被哪个进程占用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat  查询tcp/ip连接命令</span><br><span class="line"></span><br><span class="line">tasklist 列举任务进程</span><br><span class="line">taskill 杀死任务进程</span><br><span class="line">taskmgr 打开任务管理器</span><br></pre></td></tr></table></figure><h2 id="cmd打造搜索引擎"><a href="#cmd打造搜索引擎" class="headerlink" title="cmd打造搜索引擎"></a>cmd打造搜索引擎</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p var=请输入要搜索的关键字：</span><br><span class="line"></span><br><span class="line"><span class="built_in">start</span> https://www.baidu.com/s?wd=<span class="variable">%var%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span> &gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure><br><p>查询文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> windwos操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-爬虫</title>
      <link href="/2023/08/25/python/python-%E7%88%AC%E8%99%AB/"/>
      <url>/2023/08/25/python/python-%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面源码</span></span><br><span class="line"><span class="comment"># read()：返回字节形式的二进制数据</span></span><br><span class="line"><span class="comment"># 二进制-&gt;字符串 解码：decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">conent = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(conent)</span><br></pre></td></tr></table></figure><br><h2 id="一个类型和六个方法"><a href="#一个类型和六个方法" class="headerlink" title="一个类型和六个方法"></a>一个类型和六个方法</h2><p>urllib.request</p><p><strong>一个类型：</strong></p><ul><li>HTTPResponse类型</li></ul><p><strong>六个方法：</strong></p><ul><li>read()：一行一行读</li><li>read(n)：读取n个字节</li><li>readline()：一次读取一行</li><li>readlines()：一次读取一行，读完为止</li><li>getcode()：获取响应状态码</li><li>geturl()：获取url地址</li><li>getheaders()：获取一个状态信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个类型和六个方法</span></span><br><span class="line"><span class="comment"># response是HTTPResponse的类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment"># read()：一行一行读</span></span><br><span class="line">response.read()</span><br><span class="line"><span class="comment"># read(n)：读取n个字节</span></span><br><span class="line"><span class="comment"># readline()：一次读取一行</span></span><br><span class="line"><span class="comment"># readlines()：一次读取一行，读完为止</span></span><br><span class="line"><span class="comment"># getcode()：获取响应状态码</span></span><br><span class="line"><span class="comment"># geturl()：获取url地址</span></span><br><span class="line"><span class="comment"># getheaders()：获取一个状态信息</span></span><br></pre></td></tr></table></figure><br><h2 id="urllib下载"><a href="#urllib下载" class="headerlink" title="urllib下载"></a>urllib下载</h2><p>将爬取的数据下载保存</p><p>使用urllib.request.urlretrieve(url,filename)方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url_page = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数1：url代表的是下载来源的地址 参数2：filename代表文件的名字</span></span><br><span class="line">urllib.request.urlretrieve(url=url_page,filename=<span class="string">&#x27;baidu.html&#x27;</span>)</span><br></pre></td></tr></table></figure><br><h2 id="请求对象的定制"><a href="#请求对象的定制" class="headerlink" title="请求对象的定制"></a>请求对象的定制</h2><p>定制Reqeust对象，用于破解反爬</p><br><p><strong>url的组成：</strong></p><ul><li>协议 http&#x2F;https</li><li>主机 <a href="http://www.baidu.com/">www.baidu.com</a></li><li>端口号 80&#x2F;443</li><li>路径 参数 锚点</li></ul><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面源码</span></span><br><span class="line"><span class="comment"># read()：返回字节形式的二进制数据</span></span><br><span class="line"><span class="comment"># 二进制-&gt;字符串 解码：decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><h3 id="get请求的uquote方法"><a href="#get请求的uquote方法" class="headerlink" title="get请求的uquote方法"></a>get请求的uquote方法</h3><p>urllib.parse.quote(string)：</p><ul><li>将字符串转为unicode编码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?wd=&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name = urllib.parse.quote(<span class="string">&#x27;周杰伦&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url = url+name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h3 id="get请求的urlencode方法"><a href="#get请求的urlencode方法" class="headerlink" title="get请求的urlencode方法"></a>get请求的urlencode方法</h3><p>urllib.parse.urlencode()：</p><ul><li>将字典类型的请求参数转为unicode编码类型地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://search.bilibili.com/all?&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典格式的请求参数</span></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;keyword&#x27;</span>:<span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># urlencode()方法将字典数据转为unicode编码</span></span><br><span class="line">new_url = urllib.parse.urlencode(data)</span><br><span class="line">url=url+new_url</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h3 id="post请求方式"><a href="#post请求方式" class="headerlink" title="post请求方式"></a>post请求方式</h3><ul><li>urllib.request.Request中传入data（请求体）数据</li><li>传入的data数据类型要求是bytes类型（.encode(‘utf-8’)）</li></ul><h4 id="请求百度翻译案例"><a href="#请求百度翻译案例" class="headerlink" title="请求百度翻译案例"></a>请求百度翻译案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inp = <span class="built_in">input</span>(<span class="string">&#x27;输入要翻译的单词：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:inp,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数必须要进行编码</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象，post请求的参数是不会拼接在url的后面，而是需要放在请求对象的参数中</span></span><br><span class="line">request = urllib.request.Request(url=url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_content = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(json_content)</span><br></pre></td></tr></table></figure><br><h4 id="请求百度翻译-详细翻译案例"><a href="#请求百度翻译-详细翻译案例" class="headerlink" title="请求百度翻译-详细翻译案例"></a>请求百度翻译-详细翻译案例</h4><p>请求<a href="https://fanyi.baidu.com/v2transapi?from=zh&to=en%EF%BC%8C%E4%B8%BB%E8%A6%81%E7%BB%99headers%E4%BC%A0%E5%85%A5Cookie%E3%80%82">https://fanyi.baidu.com/v2transapi?from=zh&amp;to=en，主要给headers传入Cookie。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/v2transapi?from=zh&amp;to=en&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求所需的请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;BIDUPSID=15D0345C5FEAEBEB63406F4630EA306A; PSTM=1688301634; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; BDUSS=8wdmxKNmFuRXFDWGV0WGl1R2RQNm1JRlp3bUZrQlBzcVE5VDJ4ZEpBWG9FOGxrSVFBQUFBJCQAAAAAAAAAAAEAAAC7WZdH5dDSo8zswfq7qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOiGoWTohqFkbU; BDUSS_BFESS=8wdmxKNmFuRXFDWGV0WGl1R2RQNm1JRlp3bUZrQlBzcVE5VDJ4ZEpBWG9FOGxrSVFBQUFBJCQAAAAAAAAAAAEAAAC7WZdH5dDSo8zswfq7qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOiGoWTohqFkbU; BAIDUID=15D0345C5FEAEBEBE8ADB92F2F6DB823:SL=0:NR=10:FG=1; MCITY=-261%3A; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1692619213,1692672197,1692879955,1692963695; BAIDUID_BFESS=15D0345C5FEAEBEBE8ADB92F2F6DB823:SL=0:NR=10:FG=1; delPer=0; PSINO=7; BA_HECTOR=242kak0020a10la0ah2k2k2n1ieh8fk1p; ZFY=HvecObAcJy1avdd5H92kD5zGBncA7BCWwCksLGvyitk:C; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; H_PS_PSSID=36560_39227_39216_39223_39097_39194_39037_39199_39241_26350_39239_39138_39225_39137_39100; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1692971267; ab_sr=1.0.1_NjNmMjhkYzQwYzllM2NhMDI0ZWY4NTIxNzgwYmY1YWZkZjIzZDliMzJlYjIxNDNkNzVjODk1NmViNWQ3MWNiOTY2YjM3MzA3N2MxODc1ZjVhY2RjZjVlYTY0NjY1MGFjMGE5ODIxZWYxY2VmMjgzYzdkYmU1OWUyMThhMTY5NTllNWM2NmY2YmJlZTM2MTgwMDYyNzlkODk3YzRkOTlmY2ZhMjNlY2Q5NWZlNTMyZWExN2EyMTY5NTkwMWM0ZTI3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求所需的请求体</span></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;transtype&#x27;</span>: <span class="string">&#x27;realtime&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;simple_means_flag&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: <span class="number">232427.485594</span>,</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;b1fca92a0a57e2d52767d7230e097f07&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ts&#x27;</span>: <span class="string">&#x27;1692970603111&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数必须要进行编码</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象，post请求的参数是不会拼接在url的后面，而是需要放在请求对象的参数中</span></span><br><span class="line">request = urllib.request.Request(url=url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_content = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(json_content)</span><br></pre></td></tr></table></figure><br><h2 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h2><h4 id="Ajax的get请求"><a href="#Ajax的get请求" class="headerlink" title="Ajax的get请求"></a>Ajax的get请求</h4><p><strong>爬取豆瓣第一页案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content= response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;douban.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><br><p><strong>爬取豆瓣前n页案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=20&amp;limit=20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span> : (page-<span class="number">1</span>)*<span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span> : <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">    url = base_url+params</span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;douban&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页：&#x27;</span>))</span><br><span class="line">    end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入最终页：&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        download(page, content)</span><br></pre></td></tr></table></figure><br><h4 id="Ajax的post请求"><a href="#Ajax的post请求" class="headerlink" title="Ajax的post请求"></a>Ajax的post请求</h4><p>请求头中带<strong>X-Requested-With: XMLHttpRequest</strong>的是ajax请求</p><p><strong>爬取肯德基案例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname</span></span><br><span class="line"><span class="comment"># X-Requested-With: XMLHttpRequest</span></span><br><span class="line"><span class="comment"># 第一页</span></span><br><span class="line"><span class="comment"># cname: 南宁</span></span><br><span class="line"><span class="comment"># pid:</span></span><br><span class="line"><span class="comment"># pageIndex: 1</span></span><br><span class="line"><span class="comment"># pageSize: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二页</span></span><br><span class="line"><span class="comment"># cname: 南宁</span></span><br><span class="line"><span class="comment"># pid:</span></span><br><span class="line"><span class="comment"># pageIndex: 2</span></span><br><span class="line"><span class="comment"># pageSize: 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;南宁&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: page,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    request = urllib.request.Request(url=base_url,data=data,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;kfcStore_&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页：&#x27;</span>))</span><br><span class="line">    end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入最终页：&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        download(page, content)</span><br></pre></td></tr></table></figure><br><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>urllib.error.HTTPError：要么 url 不对，要么 ip 被封</li><li>urllib.error.URLError：HTTPError的父类，没有网络连接 、服务器连接失败、找不到指定的服务器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &#x27;http://www.kfc.com.cn/kfccda/storelist/index.aspxa&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://www.basderrr.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请求地址错误&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请求url错误&#x27;</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Cookie登录"><a href="#Cookie登录" class="headerlink" title="Cookie登录"></a>Cookie登录</h2><p>请求headers中添加Cookie参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://weibo.cn/7482628235/info&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;SINAGLOBAL=8668618496439.359.1689429646076; UOR=,,www.baidu.com; XSRF-TOKEN=Z2et-Oe5fkuSytXn96RpRV0h; _s_tentry=weibo.com; Apache=4804689192536.258.1693015572759; ULV=1693015572793:2:1:1:4804689192536.258.1693015572759:1689429646079; PC_TOKEN=2a309e3133; login_sid_t=5dbfb18b19da2ac15b51c1efc4897788; cross_origin_proto=SSL; WBStorage=4d96c54e|undefined; wb_view_log=1536*8641.25; SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9W5JQyE7OJYxU-pXximCUe5p5JpX5o275NHD95QNShnESozReoefWs4DqcjMi--NiK.Xi-2Ri--ciKnRi-zNSKzXeoM4eoBcS7tt; SSOLoginState=1693015665; SUB=_2A25J7S4hDeRhGeFK41AX8ibOyDmIHXVqmxjprDV8PUNbmtAGLWfGkW9NQv4dZhMK6JccRlcowlaFxvc_4xhhvvn3; ALF=1724551663; WBPSESS=82F8S3pSBrqn70S9pOernwnjq2RzmAnk4O18PTA1rTLXwvAfBXm_GPFi9PYQDVM3ZORf0RNmgVlDyZeUd520S3oObiPhcubuTQsYV2RTSgCIeQxXhii5qblbZU4G0OoQV8D4KsQXxWBqtluJi7Gvaw==&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content= response.read().decode(<span class="string">&#x27;utf8&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;weibo.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><br><h2 id="Handler处理器"><a href="#Handler处理器" class="headerlink" title="Handler处理器"></a>Handler处理器</h2><p>定制更高级的请求头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 获取handler对象</span></span><br><span class="line">handler = urllib.request.HTTPHandler()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取opener对象</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 调用open方法</span></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><p>1.代理的常用功能?</p><ul><li><p>突破自身IP访问限制，访问国外站点。</p></li><li><p>访问一些单位或团体内部资源</p><p>扩展：某大学FTP(前提是该代理地址在该资源的允许访问范围之内)，使用教育网内地址段免费代理服务器，就可以用于对教育网开放的各类FTP下载上传，以及各类资料查询共享等服务。</p></li><li><p>提高访问速度</p><p>扩展：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时，则直接由缓冲区中取出信息，传给用户，以提高访问速度。</p></li><li><p>隐藏真实IP</p><p>扩展：上网者也可以通过这种方法隐藏自己的IP，免受攻击。</p></li></ul><p>2.代码配置代理</p><ul><li><p>创建Reuqest对象</p></li><li><p>创建ProxyHandler对象</p></li><li><p>用handler对象创建opener对象使用opener.open函数发送请求</p></li></ul><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">proxies=&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;118.24.219.151:16817&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handler = urllib.request.ProxyHandler(proxies=proxies)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面源码</span></span><br><span class="line"><span class="comment"># read()：返回字节形式的二进制数据</span></span><br><span class="line"><span class="comment"># 二进制-&gt;字符串 解码：decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;daili.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><br><h3 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h3><p>防止某ip频繁访问被封</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">proxies_pool=[</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;118.24.219.151:16817&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;118.24.219.151:16817&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">proxies=random.choice(proxies_pool)</span><br><span class="line"></span><br><span class="line">handler = urllib.request.ProxyHandler(proxies=proxies)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面源码</span></span><br><span class="line"><span class="comment"># read()：返回字节形式的二进制数据</span></span><br><span class="line"><span class="comment"># 二进制-&gt;字符串 解码：decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;daili.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><br><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>用于获取网页部分源码的</p><h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>安装xpath插件</strong></p><p>1.chrome插件商店中下载XPath Helper，重启浏览器</p><p>2.ctrl+shift+x使用插件</p><br><p><strong>安装lxml库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><br><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>1.路径查询</p><ul><li>&#x2F;&#x2F;：查找所有子孙节点，不考虑层级关系</li><li>&#x2F;：查找直接子节点</li></ul><p>2.谓词查询</p><ul><li>&#x2F;&#x2F;div[@id]</li><li>&#x2F;&#x2F;div[@id&#x3D;”maincontent”]</li></ul><p>3.属性查询he</p><ul><li>&#x2F;&#x2F;@class</li></ul><p>4.模糊查询</p><ul><li>&#x2F;&#x2F;div[contains(@id,”aa”)]</li><li>&#x2F;&#x2F;div[starts-with(@id,”aa”)]：id以aa开头</li></ul><p>5.内容查询</p><ul><li>&#x2F;&#x2F;div&#x2F;h1&#x2F;text()</li></ul><p>6.逻辑运算</p><ul><li>&#x2F;&#x2F;div[@id&#x3D;”head” and @class&#x3D;”s_down”]</li><li>title | &#x2F;&#x2F;price</li></ul><br><p><strong>示例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># xpath解析本地文件</span></span><br><span class="line">tree = etree.parse(<span class="string">&#x27;xpath基本使用.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找body div ul下的li</span></span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//body/div/ul/li&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有有id属性的li</span></span><br><span class="line"><span class="comment"># text()：获取标签的内容</span></span><br><span class="line">li_list2=tree.xpath(<span class="string">&#x27;//ul/li[@id]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有id=l1的li</span></span><br><span class="line">li_list3=tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id=l1的li标签的class的属性值</span></span><br><span class="line">li_list4=tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/@class&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id中包含l的li标签</span></span><br><span class="line">li_list4=tree.xpath(<span class="string">&#x27;//ul/li[contains(@id,&quot;l&quot;)]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id中以l开头的li标签</span></span><br><span class="line">li_list5=tree.xpath(<span class="string">&#x27;//ul/li[starts-with(@id,&quot;l&quot;)]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id为l1或id为l2</span></span><br><span class="line">li_list6=tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot; or @id=&quot;l2&quot;]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list6)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id为l1或id为l2</span></span><br><span class="line">li_list7=tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/text() | //ul/li[@id=&quot;l2&quot;]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list7)</span><br></pre></td></tr></table></figure><br><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="获取百度网站的百度一下"><a href="#获取百度网站的百度一下" class="headerlink" title="获取百度网站的百度一下"></a><strong>获取百度网站的百度一下</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">value = tree.xpath(<span class="string">&#x27;//input[@id=&quot;su&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><br><h4 id="获取站长素材图片"><a href="#获取站长素材图片" class="headerlink" title="获取站长素材图片"></a>获取站长素材图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://sc.chinaz.com/tu/qinglvtupian.html</span></span><br><span class="line"><span class="comment"># https://sc.chinaz.com/tu/qinglvtupian-2-0-0.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    url=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> page==<span class="number">1</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tu/qinglvtupian.html&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tu/qinglvtupian-&#123;&#125;-0-0.html&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(page))</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="comment"># 解析html内容</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 图片名字的xpath路径</span></span><br><span class="line">    name_list = tree.xpath(<span class="string">&#x27;//div[@id=&quot;ulcontent&quot;]//a//img[@class=&quot;preview&quot;]/@alt&#x27;</span>)</span><br><span class="line">    <span class="comment"># 图片地址的xpath路径</span></span><br><span class="line">    src_list = tree.xpath(<span class="string">&#x27;//div[@id=&quot;ulcontent&quot;]//a//img[@class=&quot;preview&quot;]/@data-src&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(src_list)):</span><br><span class="line">        name = name_list[idx]</span><br><span class="line">        src = src_list[idx]</span><br><span class="line">        url = <span class="string">&#x27;https:&#x27;</span>+src</span><br><span class="line"></span><br><span class="line">        url = url.replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="comment"># 目录不存在，则创建</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./loveImg&#x27;</span>):</span><br><span class="line">            os.mkdir(<span class="string">&#x27;./loveImg&#x27;</span>)</span><br><span class="line">        <span class="comment"># 下载到本地</span></span><br><span class="line">        urllib.request.urlretrieve(url=url, filename=<span class="string">&#x27;loveImg/&#x27;</span> + name + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页：&#x27;</span>))</span><br><span class="line">    end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入最终页：&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        download(page, content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载完成&#x27;</span>)</span><br></pre></td></tr></table></figure><br><h2 id="jsonpath"><a href="#jsonpath" class="headerlink" title="jsonpath"></a>jsonpath</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jsonpath</span><br></pre></td></tr></table></figure><h3 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h3><p>自行百度…</p><h2 id="BeautifulSoup-bs4"><a href="#BeautifulSoup-bs4" class="headerlink" title="BeautifulSoup(bs4)"></a>BeautifulSoup(bs4)</h2><p>和lxml一样，是一个html的解析器，主要功能是解析和提取数据</p><p>优点：</p><ul><li>接口人性化，使用方便</li></ul><p>缺点：</p><ul><li>效率没有lxml的效率高</li></ul><br><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br></pre></td></tr></table></figure><br><h3 id="基本使用-3"><a href="#基本使用-3" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br></pre></td></tr></table></figure><br><h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><ol><li>什么是selenium?</li></ol><ul><li>selenium是一个用于web应用程序测试的工具。</li><li>selenium 测试直接运行在浏览器中，就像真正的用户在操作一样。</li><li>支持通过各种driver (FirfoxDriver，IternetExplorerDriver ,OperaDriver,chromeDriver)驱动真实浏览器完成测试。</li><li>selenium也是支持无界面浏览器操作的。</li></ul><br><ol start="2"><li>为什么使用selenium?</li></ol><ul><li>模拟浏览器功能，自动执行网页中的js代码，实现动态加载</li></ul><br><ol start="3"><li>如何安装selenium?</li></ol><p>（1）操作谷歌浏览器驱动下载地址</p><ul><li><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></li></ul><p>（2）谷歌驱动和谷歌浏览器版本之间的映射表</p><ul><li><a href="http://blog.csdn.net/huilan_same/article/details/51896672">http://blog.csdn.net/huilan_same/article/details/51896672</a></li></ul><p>（3）查看谷歌浏览器版本</p><ul><li>谷歌浏览器右上角–&gt;帮助–&gt;关于</li></ul><p>（4）pip install selenium&#x3D;&#x3D;4.0</p><ul><li>版本过高会闪退</li><li>driver没有find_element_by_xx方法等</li></ul><br><h2 id="基本使用-4"><a href="#基本使用-4" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&quot;User-Agent: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器操作对象</span></span><br><span class="line">s = Service(<span class="string">r&quot;D:\work\item\pyhon-project\pythonProject\python爬虫\app\selenium\chromedriver.exe&quot;</span>)</span><br><span class="line">browser = webdriver.Chrome(service=s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.jd.com/&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取源码</span></span><br><span class="line">content = browser.page_source</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><br><h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><p>模拟用户操作浏览器网页，获取网页元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&quot;User-Agent: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器操作对象</span></span><br><span class="line">s = Service(<span class="string">r&quot;D:\work\item\pyhon-project\pythonProject\python爬虫\app\selenium\chromedriver.exe&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(service=s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据xpath语法</span></span><br><span class="line"><span class="comment"># button = driver.find_element_by_xpath(&quot;//input[@id=&#x27;su&#x27;]&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据id</span></span><br><span class="line"><span class="comment"># driver.find_element_by_id(&quot;su&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签名</span></span><br><span class="line"><span class="comment"># driver.find_element_by_tag_name(&quot;input&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用的bs4语法来获取对象</span></span><br><span class="line"><span class="comment"># driver.find_element_by_css_selector(&quot;#su&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h2 id="元素信息"><a href="#元素信息" class="headerlink" title="元素信息"></a>元素信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器操作对象</span></span><br><span class="line">s = Service(<span class="string">r&quot;D:\work\item\pyhon-project\pythonProject\python爬虫\app\selenium\chromedriver.exe&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(service=s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取class属性名</span></span><br><span class="line">className = <span class="built_in">input</span>.get_attribute(<span class="string">&quot;class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(className)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签的名称</span></span><br><span class="line">tagName = <span class="built_in">input</span>.tag_name</span><br><span class="line"><span class="built_in">print</span>(tagName)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元素文本</span></span><br><span class="line">a = driver.find_elements_by_link_text(<span class="string">&quot;新闻&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>].text)</span><br></pre></td></tr></table></figure><br><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>脚本操作页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器操作对象</span></span><br><span class="line">s = Service(<span class="string">r&quot;D:\work\item\pyhon-project\pythonProject\python爬虫\app\selenium\chromedriver.exe&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(service=s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文本框的对象</span></span><br><span class="line"><span class="built_in">input</span> = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文本框中输入周杰伦</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&quot;周杰伦&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取百度一下按钮</span></span><br><span class="line">button = driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击按钮</span></span><br><span class="line">button.click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 滑倒底部</span></span><br><span class="line">js_bottom = <span class="string">&#x27;document.documentElement.scrollTop=100000&#x27;</span></span><br><span class="line">driver.execute_script(js_bottom)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取下一页按钮</span></span><br><span class="line">next_button = driver.find_element_by_class_name(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">next_button.click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退后</span></span><br><span class="line">driver.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向前</span></span><br><span class="line">driver.forward()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><br><h2 id="无界面浏览器"><a href="#无界面浏览器" class="headerlink" title="无界面浏览器"></a>无界面浏览器</h2><h3 id="Phantomjs"><a href="#Phantomjs" class="headerlink" title="Phantomjs"></a>Phantomjs</h3><blockquote><p>已弃用</p><p>需要selenium版本为2.48.0</p><p>pip install selenium&#x3D;&#x3D;2.48.0</p></blockquote><ol><li>什么是Phantomjs？</li></ol><ul><li>是一个无界面的浏览器</li><li>支持页面元素查找，js的执行等</li><li>由于不进行css和gui渲染，运行效率要比真实的浏览器快</li></ul><ol start="2"><li>如何使用Phantomjs？<ol><li>获取PhantomJs.exe文件路径path</li><li>browser &#x3D; webdriver.PhantomJS(path)</li></ol></li></ol><ul><li>扩展：保存屏幕快照：browser.save_screenshot(“baidu.png”)</li></ul><br><h3 id="Chrome-handless"><a href="#Chrome-handless" class="headerlink" title="Chrome handless"></a>Chrome handless</h3><p>Chrome-headless模式，Google针对Chrome浏览器59版新增加的一种模式，可以让你不打开UI界面的情况下使用Chrome浏览器，所以运行效果与Chrome保持完美一致。</p><p><strong>系统要求:</strong></p><ul><li><p>chrome</p><ul><li><p>unix &#x2F; Linux系统需要chrome &gt;&#x3D; 59</p></li><li><p>windows系统需要chrome &gt;&#x3D; 60</p></li></ul></li><li><p>Python3.6</p></li><li><p>selenium&#x3D;&#x3D;3.4.*</p></li><li><p>chromeDriver&#x3D;&#x3D;2.31</p></li></ul><br><h4 id="基本使用-5"><a href="#基本使用-5" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrom_options = Options()</span><br><span class="line">chrom_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrom_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># path是google浏览器启动路径</span></span><br><span class="line">path = <span class="string">r&#x27;C:\Program Files\Google\Chrome\Application\chrome.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">chrom_options.binary_location = path</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(options=chrom_options)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;baidu.png&#x27;</span>)</span><br></pre></td></tr></table></figure><br><h4 id="封装使用"><a href="#封装使用" class="headerlink" title="封装使用"></a>封装使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share_browser</span>():</span><br><span class="line">    chrom_options = Options()</span><br><span class="line">    chrom_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    chrom_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># path是google浏览器启动路径</span></span><br><span class="line">    path = <span class="string">r&#x27;C:\Program Files\Google\Chrome\Application\chrome.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">    chrom_options.binary_location = path</span><br><span class="line"></span><br><span class="line">    browser = webdriver.Chrome(options=chrom_options)</span><br><span class="line">    <span class="keyword">return</span> browser</span><br></pre></td></tr></table></figure><br><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><p><strong>简介</strong></p><ul><li>使用requests可以模拟浏览器的请求，比起之前用的urllib，requests模块的api更加便捷（本质就是封装了urllib3）</li></ul><p><strong>注意</strong></p><ul><li>requests库发送请求将网页内容下载下来以后，并不会执行js代码，这需要我们自己分析目标站点然后发起新的request请求</li></ul><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure><br><h2 id="基本使用-6"><a href="#基本使用-6" class="headerlink" title="基本使用"></a>基本使用</h2><p>各种请求方式：常用的就是requests.get()和requests.post()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&quot;https://api.github.com/events&#x27;)</span></span><br><span class="line"><span class="string">response = requests.post(&#x27;http://httpbin.org/post&#x27;,data = &#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;)</span></span><br><span class="line"><span class="string">response = requests.put(&#x27;http://httpbin.org/put&#x27;,data=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;)</span></span><br><span class="line"><span class="string">response = requests.delete(&#x27;http://httpbin.org/delete&#x27;)</span></span><br><span class="line"><span class="string">response = requests.head(&#x27;http://httpbin.org/get&#x27;)</span></span><br><span class="line"><span class="string">response = requests.options(&#x27;http://httpbin.org/get&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个类型和六个方法</span></span><br><span class="line"><span class="comment"># Response类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置响应的编码格式</span></span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以字符串的形式来返回网页的源码</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回一个url地址</span></span><br><span class="line"><span class="built_in">print</span>(response.url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回二进制的数据</span></span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回响应的状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回响应头</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br></pre></td></tr></table></figure><br><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><br><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;上海&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,params=params,headers=headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><blockquote><p>总结：<br>参数使用params传递<br>参数无需urlencode编码<br>不需要请求对象的定制</p></blockquote><br><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inp = <span class="built_in">input</span>(<span class="string">&#x27;输入要翻译的文字：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:inp,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">obj = json.loads(content)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br></pre></td></tr></table></figure><br><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>创建proxy对象写入代理ip的键值对，传入requests.get(proxies&#x3D;proxy)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;ip&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;212.129.251.55:16816&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,params=data,headers=headers,proxies=proxy)</span><br><span class="line"></span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&#x27;daili.html&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp:</span></span><br><span class="line"><span class="comment">#     fp.write(content)</span></span><br></pre></td></tr></table></figure><br><h2 id="cookie登录"><a href="#cookie登录" class="headerlink" title="cookie登录"></a>cookie登录</h2><p><strong>扩展：</strong></p><p><strong>requests.session()</strong></p><ul><li>requests库的session会话对象可以跨请求保持某些参数，说白了，就是比如你使用session成功的登录了某个网站，则在再次使用该session对象求求该网站的其他网页都会默认使用该session之前使用的cookie等参数</li></ul><p>古诗文网登录案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __VIEWSTATE: 8YLp1XlMiRUOKany/q0yA3Z0loE7ojDTskPTXAK0J+Y9QMi3nZUv7zF390OP9UUTvVLp1zonm5PWSulqBrjw7EgTsb7l+ByE6XEtg7kwTw94Tn4a2/8B+n4sIS/S/hbb7y/irCu++p5JjQ4fDKCkt9QMYcU=</span></span><br><span class="line"><span class="comment"># __VIEWSTATEGENERATOR: C93BE1AE</span></span><br><span class="line"><span class="comment"># from: http://so.gushiwen.cn/user/collectbei.aspx?sort=t</span></span><br><span class="line"><span class="comment"># email: 13317615486</span></span><br><span class="line"><span class="comment"># pwd: 1064655698ye</span></span><br><span class="line"><span class="comment"># code: ud8t</span></span><br><span class="line"><span class="comment"># denglu: 登录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录请求</span></span><br><span class="line"><span class="comment"># https://so.gushiwen.cn/user/login.aspx?from=http%3a%2f%2fso.gushiwen.cn%2fuser%2fcollectbei.aspx%3fsort%3dt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录页面</span></span><br><span class="line"><span class="comment"># https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;</span></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line">content = response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取 __VIEWSTATE</span></span><br><span class="line">viewstate = soup.select(<span class="string">&#x27;#__VIEWSTATE&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取 __VIEWSTATEGENERATOR</span></span><br><span class="line">viewstategenerator = soup.select(<span class="string">&#x27;#__VIEWSTATEGENERATOR&#x27;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取验证码图片</span></span><br><span class="line">imgCode = soup.select(<span class="string">&quot;#imgCode&quot;</span>)[<span class="number">0</span>].attrs.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">img_url= <span class="string">&#x27;https://so.gushiwen.cn&#x27;</span>+imgCode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坑</span></span><br><span class="line"><span class="comment"># import urllib.request</span></span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url=img_url,filename=&#x27;code.jpg&#x27;)</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment"># 验证码url响应的内容</span></span><br><span class="line">response_code = session.get(img_url)</span><br><span class="line"><span class="comment"># 验证码内容</span></span><br><span class="line">content_code = response_code.content</span><br><span class="line"><span class="comment"># wb模式就是将二进制数据写入到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;code.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content_code)</span><br><span class="line"></span><br><span class="line">code = <span class="built_in">input</span>(<span class="string">&#x27;请输入图片的验证码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http%3a%2f%2fso.gushiwen.cn%2fuser%2fcollectbei.aspx%3fsort%3dt&#x27;</span></span><br><span class="line"></span><br><span class="line">data_post = &#123;</span><br><span class="line">    <span class="string">&#x27;__VIEWSTATE&#x27;</span>: viewstate,</span><br><span class="line">    <span class="string">&#x27;__VIEWSTATEGENERATOR&#x27;</span>: viewstategenerator,</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>:<span class="string">&#x27;http://so.gushiwen.cn/user/collectbei.aspx?sort=t&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;13317615486&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pwd&#x27;</span>: <span class="string">&#x27;1064655698ye&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code&#x27;</span>: code,</span><br><span class="line">    <span class="string">&#x27;denglu&#x27;</span>: <span class="string">&#x27;登录&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_post)</span><br><span class="line"></span><br><span class="line">response_post = session.post(url=login_url,data=data_post,headers=headers)</span><br><span class="line"></span><br><span class="line">content_post = response_post.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;gushiwen.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content_post)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 难点：</span></span><br><span class="line"><span class="comment"># 1.隐藏域</span></span><br><span class="line"><span class="comment"># 2.验证码问题</span></span><br></pre></td></tr></table></figure><br><h1 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h1><ol><li>什么是scrapy？</li></ol><ul><li>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖<br>掘，信息处理或存储历史数据等一系列的程序中。</li></ul><br><p><strong>安装</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple <span class="comment">#使用清华大学镜像安装</span></span><br></pre></td></tr></table></figure><br><h2 id="基本使用-7"><a href="#基本使用-7" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a><strong>创建项目</strong></h3><p>终端中输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject project_name</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject scrapy_baidu</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>不能以数字开通，不能包含中文</li></ul><br><h3 id="创建爬虫文件"><a href="#创建爬虫文件" class="headerlink" title="创建爬虫文件"></a>创建爬虫文件</h3><p>在spiders中创建爬虫文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider 爬虫文件的名字 要爬取的网页</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider baidu www.baidu.com        </span><br></pre></td></tr></table></figure><blockquote><p>可以不用写http &#x2F; https协议</p></blockquote><br><p>创建出来的文件<strong>解读</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduSpider</span>(scrapy.Spider):</span><br><span class="line">    <span class="comment"># 爬虫文件的名字</span></span><br><span class="line">    name = <span class="string">&quot;baidu&quot;</span></span><br><span class="line">    <span class="comment"># 允许访问的网址</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.baidu.com&quot;</span>]</span><br><span class="line">    <span class="comment"># 起始的url地址，第一次要访问的url</span></span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.baidu.com&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是执行了start_url之后执行的方法，方法中的response就是返回的那个对象</span></span><br><span class="line">    <span class="comment"># 相当于 response = urllib.request.urlopen()</span></span><br><span class="line">    <span class="comment">#       response = requests.get()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># response.text 获取响应的字符串</span></span><br><span class="line">        <span class="comment"># response.body 获取二进制数据</span></span><br><span class="line">        <span class="comment"># response.xpath 可以直接用xpth方法来解析</span></span><br><span class="line">        <span class="comment"># response.extract() 提取selector对象的data属性值</span></span><br><span class="line">        <span class="comment"># response.extract_first() 提取的selector列表的第一个数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><br><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>项目名字</p><p>​项目名字</p><p>​spiders文件夹</p><p>​init</p><p>​自定义的爬虫文件</p><p>​init</p><p>​items自定义数据结构的地方 爬取的数据包含哪些</p><p>​middleware 中间件代理</p><p>​pipelines  管道用来处理下载的数据</p><p>​settings配置文件robots协议ua定义等</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><br><h3 id="运行爬虫代码"><a href="#运行爬虫代码" class="headerlink" title="运行爬虫代码"></a>运行爬虫代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl 爬虫名字</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl baidu</span><br></pre></td></tr></table></figure><br><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>架构组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(1)引擎s</span><br><span class="line">---》自动运行，无需关注，会自动组织所有的请求对象，分发给下载器</span><br><span class="line">(2)下载器</span><br><span class="line">---》从引擎处获取到请求对象后，请求数据</span><br><span class="line">(3) spiders</span><br><span class="line">---》spider类定义了如何爬取某个(或某些)网站。包括了爬取的动作(例</span><br><span class="line">如:是否跟进链接)以及如何从网页的内容中提取结构化数据(爬取item)。换句话说，Spider就是您定义爬取的动作及分析某个网页(或者是有些网页)的地方。</span><br><span class="line">(4)调度器</span><br><span class="line">---》有自己的调度规则，无需关注</span><br><span class="line">()管道(Item pipeline) ---》最终处理数据的管道，会预留接口供我们处理数据</span><br><span class="line">当Item在Spider中被收集之后，它将会被传递到Item Pipeline，一些组件会按照一定的顺序执行对Item的处理。每个item pipeline组件(有时称之为“Item Pipeline”)是实现了简单方法的Python类。他们接收到Item并通过它执行一些行为，同时也决定此Item是否继续通过pipeline，或是被丢弃而不再进行处理。</span><br><span class="line">以下是item pipeline的一些典型应用:</span><br><span class="line">1．清理HTML数据</span><br><span class="line">2．验证爬取的数据(检查item包含某些字段)</span><br><span class="line">3．查重(并丢弃)</span><br><span class="line">4．将爬取结果保存到数据库中</span><br></pre></td></tr></table></figure><br><ol><li>引擎向spiders要url</li><li>引擎将要爬取的url给调度器</li><li>调度器会将url生成的请求对象放入到指定的队列中</li><li>从队列中出队一个请求</li><li>引擎将请求交给下载器进行处理</li><li>下载器发送请求获取互联网数据</li><li>下载器将数据返回给引擎</li><li>引擎将数据再次给到spiders</li><li>spiders通过xpath解析给该数据，得到数据或者url</li><li>spiders将数据或者url给引擎</li><li>引擎判断该数据还是url，是数据交给管道（item pipeline）处理，是url交给调度器处理</li></ol><p><img src="C:\Users\Yesha\Desktop\scrapy-工作原理.png" alt="scrapy-工作原理"></p><br><h2 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h2><ol><li><strong>什么是scrapy shell?</strong></li></ol><ul><li>Scrapy终端，是一个交互终端，供您在未启动spider的情况下尝试及调试您的爬取代码。其本意是用来测试提取数据的代码，不过您可以将其作为正常的Python终端，在上面测试任何的Python代码。</li><li>该终端是用来测试xPath或css表达式，查看他们的工作方式及从爬取的网页中提取的数据。在编写您的spider时，该终端提供了交互性测试您的表达式代码的功能，免去了每次修改后运行spider的麻烦。</li><li>一旦熟悉了Scrapy终端后，您会发现其在开发和调试spider时发挥的巨大作用。</li></ul><br><ol start="2"><li><strong>安装ipython</strong></li></ol><ul><li>安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure><ul><li><p>简介:</p><p>如果安装了IPython，Scrapy终端将使用IPython(替代标准Python终端)。IPython终端与其他相比更为强大，提供智能的自动补全，高亮输出，及其他特性。</p></li></ul><br><p>使用cmd进入scrapy shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell url地址</span><br></pre></td></tr></table></figure><br><p>应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（1）response对象：</span><br><span class="line">response.body</span><br><span class="line">.text</span><br><span class="line">.url</span><br><span class="line">.status</span><br><span class="line">（2）response的解析：</span><br><span class="line">respnse.xpath()（常用）</span><br><span class="line">获取到selector对象，通过.extract_first()获取值</span><br></pre></td></tr></table></figure><br><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><h3 id="当当网爬取一页图书数据"><a href="#当当网爬取一页图书数据" class="headerlink" title="当当网爬取一页图书数据"></a>当当网爬取一页图书数据</h3><p>spiders.dangdang.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ScrapyDangdangItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DangdangSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;dangdang&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;search.dangdang.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://search.dangdang.com/?key=%CE%F7%D3%CE&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;//ul[@class=&quot;bigimg&quot;]/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            src = li.xpath(<span class="string">&#x27;.//img/@src&#x27;</span>).extract_first()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> src==<span class="string">&#x27;images/model/guan/url_none.png&#x27;</span>:</span><br><span class="line">                src = src</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                src = li.xpath(<span class="string">&#x27;.//img/@data-original&#x27;</span>).extract_first()</span><br><span class="line">            name = li.xpath(<span class="string">&#x27;.//img/@alt&#x27;</span>).extract_first()</span><br><span class="line">            price = li.xpath(<span class="string">&#x27;.//p[@class=&quot;price&quot;]/span[@class=&quot;search_now_price&quot;]/text()&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># </span></span><br><span class="line">            book = ScrapyDangdangItem(src=src,name=name,price=price)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取一个book，就将book给pipelines</span></span><br><span class="line">            <span class="keyword">yield</span> book</span><br></pre></td></tr></table></figure><br><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScrapyDangdangItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    price = scrapy.Field()</span><br></pre></td></tr></table></figure><br><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScrapyDangdangPipeline</span>:</span><br><span class="line">    <span class="comment"># 开始执行的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;book.json&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 爬虫文件执行完之后的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScrapyDangdangDownloadPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        src = item.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        url = <span class="string">&#x27;http:&#x27;</span>+src</span><br><span class="line">        book_name = <span class="string">&#x27;./books/&#x27;</span>+item.get(<span class="string">&#x27;name&#x27;</span>)+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="comment"># 下载图片文件到本地</span></span><br><span class="line">        urllib.request.urlretrieve(url=url,filename=book_name)</span><br></pre></td></tr></table></figure><br><p><strong>爬取多页数据</strong></p><p>dangdang.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ScrapyDangdangItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DangdangSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;dangdang&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;search.dangdang.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://search.dangdang.com/?key=%CE%F7%D3%CE&quot;</span>]</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">    base_url = <span class="string">&#x27;https://search.dangdang.com/?key=%CE%F7%D3%CE&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;//ul[@class=&quot;bigimg&quot;]/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            src = li.xpath(<span class="string">&#x27;.//img/@src&#x27;</span>).extract_first()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> src==<span class="string">&#x27;images/model/guan/url_none.png&#x27;</span>:</span><br><span class="line">                src = src</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                src = li.xpath(<span class="string">&#x27;.//img/@data-original&#x27;</span>).extract_first()</span><br><span class="line">            name = li.xpath(<span class="string">&#x27;.//img/@alt&#x27;</span>).extract_first()</span><br><span class="line">            price = li.xpath(<span class="string">&#x27;.//p[@class=&quot;price&quot;]/span[@class=&quot;search_now_price&quot;]/text()&#x27;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            book = ScrapyDangdangItem(src=src,name=name,price=price)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取一个book，就将book给pipelines</span></span><br><span class="line">            <span class="keyword">yield</span> book</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第二页</span></span><br><span class="line">        <span class="comment"># https://search.dangdang.com/?key=%CE%F7%D3%CE&amp;page_index=2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第三页</span></span><br><span class="line">        <span class="comment"># https://search.dangdang.com/?key=%CE%F7%D3%CE&amp;page_index=3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.page&lt;<span class="number">100</span>:</span><br><span class="line">            self.page = self.page+<span class="number">1</span></span><br><span class="line">            url = self.base_url+<span class="string">&#x27;&amp;page_index=&#x27;</span>+<span class="built_in">str</span>(self.page)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url,callback=self.parse)</span><br></pre></td></tr></table></figure><br><h3 id="电影天堂爬取案例"><a href="#电影天堂爬取案例" class="headerlink" title="电影天堂爬取案例"></a>电影天堂爬取案例</h3><p>爬取第一页的名字，和另外一页的图片</p><p>spiders.test01</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> DygodItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test01Spider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;test01&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.dygod.net&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.dygod.net/html/gndy/china&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 获取第一页的名字和第二页的图片</span></span><br><span class="line">        a_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;co_content8&quot;]//a[2]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">            <span class="comment"># 名字</span></span><br><span class="line">            name = a.xpath(<span class="string">&#x27;./text()&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># 跳转的地址</span></span><br><span class="line">            src = a.xpath(<span class="string">&#x27;./@href&#x27;</span>).extract_first()</span><br><span class="line">            url = <span class="string">&#x27;https://www.dygod.net&#x27;</span>+src</span><br><span class="line">            <span class="comment"># meta:&#123;&#125; 将数据传递给下一个请求</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url,callback=self.parse_second,meta=&#123;<span class="string">&#x27;name&#x27;</span>:name&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_second</span>(<span class="params">self, response</span>):</span><br><span class="line">        src_img = response.xpath(<span class="string">&#x27;//div[@id=&quot;Zoom&quot;]/img[1]/@src&#x27;</span>).extract_first()</span><br><span class="line">        src = <span class="string">&#x27;https://www.dygod.net&#x27;</span>+src_img</span><br><span class="line">        name = response.meta[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        moview = DygodItem(src=src,name=name)</span><br><span class="line">        <span class="keyword">yield</span> moview</span><br></pre></td></tr></table></figure><br><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DygodItem</span>(scrapy.Item):</span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DygodPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;movie.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure><br><h2 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h2><ol><li><p>继承自scrapy.spider</p></li><li><p>作用</p><ul><li><p>CrawlSpider可以定义规则，在解析html内容的时候，可以根据链接规则提取出指定的链接，然后再向这些链接发送请求</p></li><li><p>所以，如果有需要跟进链接的需求，意思就是爬取了网页之后，需要提取链接再次爬取，使用crawlSpider是非常合适的</p></li></ul></li></ol><br><ol start="3"><li>提取链接</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">链接提取器，在这里就可以写规则提取指定链接</span><br><span class="line">scrapy.linkextractors.LinkExtractor(</span><br><span class="line">    allow = (),  <span class="comment"># 正则表达式提取符合正则的链接</span></span><br><span class="line">    deny = (), <span class="comment"># (不用)正则表达式不提取符合正则的链接</span></span><br><span class="line">    allow_domains = (), <span class="comment"># (不用)允许的域名</span></span><br><span class="line">    deny_domains = (), <span class="comment"># (不用)不允许的域名</span></span><br><span class="line">    restrict_xpaths = (), <span class="comment"># xpath，提取符合xpath规则的链接restrict_css = ()#提取符合选择器规则的链接</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>模拟使用</span><br><span class="line">正则用法: </span><br><span class="line">    links1 = LinkExtractor(allow=<span class="string">r&#x27;list_23_ld+\.html&#x27;</span> )</span><br><span class="line">xpath用法: </span><br><span class="line">    links2 = LinkExtractor(restrict_xpaths=<span class="string">r&#x27;//div[@class=&quot;x&quot;]&#x27;</span>)</span><br><span class="line">css用法:</span><br><span class="line">    links3 = LinkExtractor(restrict_css=<span class="string">&#x27;.x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>提取连接</span><br><span class="line">link.extract_links(response)</span><br></pre></td></tr></table></figure><br><p><strong>注：</strong></p><ul><li>callback只能写函数名字符串，callback&#x3D;’parse_item’</li><li>在基本的spider中，如果重新发送请求，那里的callback写的是 callback&#x3D;’self.parse_item’</li><li>follow&#x3D;true：是否跟进，就是按照提取连接规则进行提取</li></ul><br><p><strong>使用示例</strong></p><ol><li>在cmd中打开scrapy shell</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell https://www.dushu.com/book/1188.html</span><br></pre></td></tr></table></figure><ol start="2"><li>获取页面地址</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="comment"># 用正则表达式的方式匹配地址</span></span><br><span class="line">link = LinkExtractor(allow=<span class="string">r&#x27;/book/1188_\d+.html&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出匹配到的列表</span></span><br><span class="line">link.extract_links(response)</span><br></pre></td></tr></table></figure><br><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><h3 id="爬取读书网案例"><a href="#爬取读书网案例" class="headerlink" title="爬取读书网案例"></a>爬取读书网案例</h3><p>需求：爬取读书网数据</p><ol><li>创建项目</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject dushuproject</span><br></pre></td></tr></table></figure><ol start="2"><li>跳转到spiders路径</li><li>创建爬虫类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider -t crawl read www.dushu.com</span><br></pre></td></tr></table></figure><br><p>read.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> DushuprojectItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&quot;read&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.dushu.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.dushu.com/book/1188_1.html&quot;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&quot;/book/1188_\d+.html&quot;</span>),</span><br><span class="line">                           callback=<span class="string">&quot;parse_item&quot;</span>,</span><br><span class="line">                           follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_item</span>(<span class="params">self, response</span>):</span><br><span class="line">        img_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;book-info&quot;]//img&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> img_list:</span><br><span class="line">            src = img.xpath(<span class="string">&#x27;./@data-original&#x27;</span>).extract_first()</span><br><span class="line">            name = img.xpath(<span class="string">&#x27;./@alt&#x27;</span>).extract_first()</span><br><span class="line">            book = DushuprojectItem(src=src,name=name)</span><br><span class="line">            <span class="keyword">yield</span> book</span><br></pre></td></tr></table></figure><br><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DushuprojectItem</span>(scrapy.Item):</span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br></pre></td></tr></table></figure><br><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DushuprojectPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;books.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure><h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p><strong>安装</strong></p><p>pymysql</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><br><br><h3 id="爬取读书网数据案例"><a href="#爬取读书网数据案例" class="headerlink" title="爬取读书网数据案例"></a>爬取读书网数据案例</h3><p>传入数据库</p><p>spiders.read.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> DushuprojectItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&quot;read&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.dushu.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.dushu.com/book/1188_1.html&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据allow的规则获取地址，调用callback=的函数</span></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&quot;/book/1188_\d+.html&quot;</span>),</span><br><span class="line">                           callback=<span class="string">&quot;parse_item&quot;</span>,</span><br><span class="line">                           follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_item</span>(<span class="params">self, response</span>):</span><br><span class="line">        img_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;book-info&quot;]//img&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> img_list:</span><br><span class="line">            src = img.xpath(<span class="string">&#x27;./@data-original&#x27;</span>).extract_first()</span><br><span class="line">            name = img.xpath(<span class="string">&#x27;./@alt&#x27;</span>).extract_first()</span><br><span class="line">            book = DushuprojectItem(src=src,name=name)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> book</span><br></pre></td></tr></table></figure><br><p>items.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DushuprojectItem</span>(scrapy.Item):</span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br></pre></td></tr></table></figure><br><p>settings.py中配置数据库连接信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DB_HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">DB_POST= <span class="number">3306</span></span><br><span class="line">DB_USER = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">DB_PASSWORD = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">DB_NAME = <span class="string">&#x27;spider01&#x27;</span></span><br><span class="line"><span class="comment"># 注：不允许写&#x27;-&#x27;</span></span><br><span class="line">DB_CHARSET = <span class="string">&#x27;utf8&#x27;</span></span><br></pre></td></tr></table></figure><br><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载settings文件</span></span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MysqlPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        <span class="comment"># get_project_settings()：获取settings.py中的数据</span></span><br><span class="line">        settings = get_project_settings()</span><br><span class="line">        <span class="comment"># 保存数据库连接信息</span></span><br><span class="line">        self.host = settings[<span class="string">&#x27;DB_HOST&#x27;</span>]</span><br><span class="line">        self.port = settings[<span class="string">&#x27;DB_POST&#x27;</span>]</span><br><span class="line">        self.user = settings[<span class="string">&#x27;DB_USER&#x27;</span>]</span><br><span class="line">        self.password = settings[<span class="string">&#x27;DB_PASSWORD&#x27;</span>]</span><br><span class="line">        self.name = settings[<span class="string">&#x27;DB_NAME&#x27;</span>]</span><br><span class="line">        self.charset = settings[<span class="string">&#x27;DB_CHARSET&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用函数，连接</span></span><br><span class="line">        self.connect()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用pymysql的方法Connect传入连接信息，连接数据库</span></span><br><span class="line">        self.conn = pymysql.Connect(</span><br><span class="line">            host=self.host,</span><br><span class="line">            port=self.port,</span><br><span class="line">            user=self.user,</span><br><span class="line">            password=self.password,</span><br><span class="line">            db=self.name,</span><br><span class="line">            charset=self.charset</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建游标</span></span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;this.process_item:&#x27;</span>,item[<span class="string">&#x27;name&#x27;</span>],item[<span class="string">&#x27;src&#x27;</span>])</span><br><span class="line">        sql = <span class="string">&#x27;insert into book(name,src) values(&quot;&#123;&#125;&quot;,&quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(item[<span class="string">&#x27;name&#x27;</span>],item[<span class="string">&#x27;src&#x27;</span>])</span><br><span class="line">        <span class="comment"># 执行sql</span></span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        <span class="comment"># 提交执行</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        <span class="comment"># 关闭游标和数据连接</span></span><br><span class="line">        self.conn.cursor().close()</span><br><span class="line">        self.conn.close()</span><br></pre></td></tr></table></figure><br><p>注意使用的管道</p><ul><li>可以使用多个</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="comment"># &quot;dushuproject.pipelines.DushuprojectPipeline&quot;: 300,</span></span><br><span class="line">   <span class="string">&quot;dushuproject.pipelines.MysqlPipeline&quot;</span>: <span class="number">301</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="post请求-1"><a href="#post请求-1" class="headerlink" title="post请求"></a>post请求</h2><p><strong>与get请求相比</strong></p><ul><li><p>原本的parse不可用了</p></li><li><p>使用start_requests开始发送请求，scrapy.FormRequest请求接收url和data</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestpostSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;testpost&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;fanyi.baidu.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;kw&#x27;</span>:<span class="string">&#x27;final&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">yield</span> scrapy.FormRequest(url=url,formdata=data,callback=self.parse_second)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_second</span>(<span class="params">self, response</span>):</span><br><span class="line">        content = response.text</span><br><span class="line">        obj = json.loads(content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-start-&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(obj)</span><br></pre></td></tr></table></figure><br><h2 id="日志信息和日志等级"><a href="#日志信息和日志等级" class="headerlink" title="日志信息和日志等级"></a>日志信息和日志等级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(1) 日志级别:</span><br><span class="line">CRITICAL: 严重错误</span><br><span class="line">ERROR: 一般错误</span><br><span class="line">WARNING: 警告</span><br><span class="line">INFO: 一般信息</span><br><span class="line">DEBUG: 调试信息</span><br><span class="line"></span><br><span class="line">默认的日志等级是DEBUG</span><br><span class="line">只要出现了DEBUG或者DEBUG以上等级的日志</span><br><span class="line">那么这些日志将会打印</span><br><span class="line"></span><br><span class="line">(2) settings.py文件设置:</span><br><span class="line">默认的级别为DEBUG，会显示上面所有的信息在配置文件中settings.py</span><br><span class="line">LO6_FILE：将屏幕显示的信息全部记录到文件中，屏幕不再显示，注意文件后缀一定是.log</span><br><span class="line">LOG_LEVEL：设置日志显示的等级，就是显示哪些，不显示哪些</span><br></pre></td></tr></table></figure><p>指定日志等级和日志文件</p><p>在settings.python中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定日志等级</span></span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;WARNING&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志的文件</span></span><br><span class="line">LOG_FILE = <span class="string">&#x27;logdemo.log&#x27;</span></span><br></pre></td></tr></table></figure><br><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>settings.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line"><span class="comment"># 君子协议，注释掉之后就不遵守，一般都要注释</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解除注释，开启管道（pipelines）</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="comment"># 管道可以有很多个，有优先级，值越小优先级越高</span></span><br><span class="line">   <span class="string">&quot;scrapy_dangdang.pipelines.ScrapyDangdangPipeline&quot;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记</title>
      <link href="/2023/08/23/java/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/23/java/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h1><h2 id="依赖管理特性"><a href="#依赖管理特性" class="headerlink" title="依赖管理特性"></a>依赖管理特性</h2><p>依赖由父管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">依赖管理</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目</span><br><span class="line">可查看当前依赖版本</span><br><span class="line">几乎声明了所有开发中常用的依赖的版本号</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在当前pom，自定义修改版本</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring-boot-starter-* ： *就某种场景</span><br><span class="line">只要引入starter，这个场景的所有常规依赖我们都自动引入</span><br><span class="line"></span><br><span class="line">*-spring-boot-starter 第三方为我们提供的简化开发的场景启动器</span><br><span class="line">所有场景启动器最底层的依赖：</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><ul><li><p>自动配置好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配置好SpringMVC常用组件（功能）</li></ul></li><li><p>自动配置好Web常用功能，如：字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有Web开发的常用场景</li></ul></li><li><p>默认的包结构</p><ul><li><p>主程序所在包以及下面的所有子包里面的组件都会被默认扫描进来</p></li><li><p>无需以前的包扫描配置</p></li><li><p>想要改变扫描路径：</p><p>@SpringBootApplication(scanBasePackages&#x3D;”com.xxx”)</p><p>或者@ComponentScan指定扫描路径</p></li></ul></li></ul><h3 id="ComponentScan-“com-xxx”"><a href="#ComponentScan-“com-xxx”" class="headerlink" title="@ComponentScan(“com.xxx”)"></a>@ComponentScan(“com.xxx”)</h3><p>指定扫描哪些，Spring注解</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>开启自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.xxx&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="Configuration-proxyBeanMethods-true-false"><a href="#Configuration-proxyBeanMethods-true-false" class="headerlink" title="@Configuration(proxyBeanMethods&#x3D;true&#x2F;false)"></a>@Configuration(proxyBeanMethods&#x3D;true&#x2F;false)</h3><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><ul><li>示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*1.配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment">*2.配置类本身也是组件</span></span><br><span class="line"><span class="comment">*3.proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment">*  Full(proxyBeanMethods = true)</span></span><br><span class="line"><span class="comment">*  Lite(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true/false)</span></span><br><span class="line"><span class="meta">@Import(&#123;xx.class,xx.class&#125;)</span> <span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">  <span class="meta">@Bean(&quot;xxx&quot;)</span> <span class="comment">//可自定义组件名</span></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最佳实战<ul><li>配置类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</li><li>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</li></ul></li></ul><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p>条件装配：满足Conditional指定的条件，则进行组件注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ConditionalOnBean(name=&quot;xxx&quot;) //组件中存在xxx组件，则进行注入</span><br><span class="line">@ConditionalOnMissingBean(name=&quot;xxx&quot;) //组件中不存在xxx组件，则进行注入</span><br><span class="line">@Configuration</span><br><span class="line">public class MyConfig&#123;</span><br><span class="line">  @Bean(&quot;xxx&quot;)</span><br><span class="line">  public User user01()&#123;</span><br><span class="line">    return new User(&quot;name&quot;,&quot;age&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EnableConfigurationProperties-ConfigurationProperties"><a href="#EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties+@ConfigurationProperties"></a>@EnableConfigurationProperties+@ConfigurationProperties</h3><p>application.properties</p><p>mycar.name&#x3D;xxx</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;myCar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="keyword">public</span> Class MyConfig&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">-------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarController</span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Car car;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Component-ConfigurationProperties-prefix-”xxx”"><a href="#Component-ConfigurationProperties-prefix-”xxx”" class="headerlink" title="@Component+@ConfigurationProperties(prefix&#x3D;”xxx”)"></a>@Component+@ConfigurationProperties(prefix&#x3D;”xxx”)</h3><p>配置到容器中、标注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;myCar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarController</span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Car car;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>SpringBoot先加载所有的自动配置类</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值</li><li>生效的配置类就会给容器中装配很多组件</li><li>只要容器中有这些组件，相当于这些功能就有了</li><li>只要用户有自己配置的，就以用户的优先</li></ul><h3 id="最佳实战："><a href="#最佳实战：" class="headerlink" title="最佳实战："></a>最佳实战：</h3><ul><li><p>引入场景依赖</p><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></li></ul></li><li><p>查看自动配置了哪些</p><ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中debug&#x3D;true开启自动配置报告。Negative(不生效)，Positive(生效)</li></ul></li><li><p>是否需要修改</p><ul><li>参照文档修改配置项<ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</a></li><li>自己分析xxxProperties绑定了配置文件的哪些</li></ul></li><li>自定义加入或者替换组件</li><li>自定义器 <strong>XXXCustomizer</strong></li></ul></li></ul><h3 id="开发小技巧："><a href="#开发小技巧：" class="headerlink" title="开发小技巧："></a>开发小技巧：</h3><h4 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> integer age;</span><br><span class="line">  <span class="keyword">private</span> Pet pet;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name,Integer age)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name=name;</span><br><span class="line">    <span class="built_in">this</span>.age=age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=====简化日志开发=====</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">handle01</span><span class="params">(RequestParam(<span class="string">&quot;name&quot;</span>)</span> String name)</span><br><span class="line">    log.info(<span class="string">&quot;请求进来了...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>+name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dev-tools"><a href="#dev-tools" class="headerlink" title="dev-tools"></a>dev-tools</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ctrl+F9</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="文件文件类型"><a href="#文件文件类型" class="headerlink" title="文件文件类型"></a>文件文件类型</h2><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><h2 id="打包排除依赖"><a href="#打包排除依赖" class="headerlink" title="打包排除依赖"></a>打包排除依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span>  <span class="comment"># 设置静态资源访问前缀</span></span><br><span class="line">  <span class="attr">resource:</span></span><br><span class="line">    <span class="attr">static-location:</span> [<span class="string">classpath:/xxx/</span>] <span class="comment"># 设置静态资源路径</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="string">flase</span></span><br><span class="line">    <span class="attr">cache:</span></span><br><span class="line">      <span class="attr">period:</span> <span class="number">1000</span> <span class="comment"># 设置缓存时间</span></span><br></pre></td></tr></table></figure><h2 id="Rest"><a href="#Rest" class="headerlink" title="Rest"></a>Rest</h2><p>Rest风格支持（）</p><ul><li>核心Filter：HiddenHttpMethodFilter<ul><li><p>用法：表单method&#x3D;post，隐藏域_method&#x3D;put</p></li><li><p>SpringBoot配置中中手动开启spring.mvc.hiddenmethod.filter</p></li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;_method&quot;</span> type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;put/delete&quot;</span>&gt;</span><br><span class="line">------------------------------</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping(value=&quot;/hello&quot;,method=RequestMethod.GET)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;获取用户&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@RequestMapping(value=&quot;/hello&quot;,method=RequestMethod.POST)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">postUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;保存用户&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@RequestMapping(value=&quot;/hello&quot;,method=RequestMethod.PUT)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">putUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;修改用户&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@RequestMapping(value=&quot;/hello&quot;,method=RequestMethod.DELETE)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;删除用户&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ||</span><br><span class="line">  \/</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;获取用户&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">postUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;保存用户&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">putUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;修改用户&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;删除用户&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义_method</p><p>config.WebConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods=false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> HiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span>&#123;</span><br><span class="line">    HiddenHttpMethodFilter methodFilter=<span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">    methodFilter.setMethodParam(<span class="string">&quot;_m&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> methodFilter;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h2><h3 id="参数注解"><a href="#参数注解" class="headerlink" title="参数注解"></a>参数注解</h3><h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable()"></a>@<strong>PathVariable</strong>()</h4><p>路径变量</p><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam()"></a>@<strong>RequestParam</strong>()</h4><p>获取请求参数</p><h4 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader()"></a>@<strong>RequestHeader</strong>()</h4><p>获取请求头</p><h4 id="CookieValue-“-ga”"><a href="#CookieValue-“-ga”" class="headerlink" title="@CookieValue(“_ga”)"></a>@<strong>CookieValue</strong>(“_ga”)</h4><p>获取cookie值</p><h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody()****"></a>@<strong>RequestBody</strong>()****</h4><p>获取请求体[POST]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestBody</span> String content)</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestAttribute"><a href="#RequestAttribute" class="headerlink" title="@RequestAttribute"></a>@<strong>RequestAttribute</strong></h4><p>获取request域属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">goToPage</span><span class="params">(HttpServletRequest req)</span>&#123;</span><br><span class="line">    req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    req.setAttribute(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Map <span class="title function_">success</span><span class="params">(RequestAttribute(<span class="string">&quot;msg&quot;</span>)</span> String msg,</span><br><span class="line">                    RequestAttribute(<span class="string">&quot;code&quot;</span>) integer code,</span><br><span class="line">                    HttpServletRequest req)&#123;</span><br><span class="line">    Object msg1=req.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;reqMethod_msg&quot;</span>,msg1);</span><br><span class="line">    map.put(<span class="string">&quot;annotation_msg&quot;</span>,msg);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MatrixVariable"><a href="#MatrixVariable" class="headerlink" title="@MatrixVariable"></a><strong>@MatrixVariable</strong></h4><p>矩阵变量</p><h2 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h2><p>新建包 interceptor&#x3D;&gt;新建类 XXXInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HttpSession session=request.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginUser</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginUser!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>config &#x3D;&gt; AdminWebConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加到容器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截的路径</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/&quot;</span>); <span class="comment">//放行的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><input type="file" mult><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!headerImg.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> headerImg.getOriginalFilename();</span><br><span class="line">        <span class="comment">//保存路径</span></span><br><span class="line">        headerImg.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\&quot;</span>+originalFilename));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (photos.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile photo:photos) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!photo.isEmpty())&#123;</span><br><span class="line">                <span class="comment">//获取文件名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">                <span class="comment">//保存路径</span></span><br><span class="line">                photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\&quot;</span>+originalFilename));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB       #设置单文件最大上传大小</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">100MB   #设置多文件最大上传大小</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-嵌入式Servlet容器"><a href="#10-嵌入式Servlet容器" class="headerlink" title="10.嵌入式Servlet容器"></a>10.嵌入式Servlet容器</h2><h3 id="1、切换嵌入式Servlet容器"><a href="#1、切换嵌入式Servlet容器" class="headerlink" title="1、切换嵌入式Servlet容器"></a>1、切换嵌入式Servlet容器</h3><p>默认支持的webServer</p><p>Tomcat、Jetty、or Undertow</p><p>ServletWebServerApplicationContext容器自动寻找ServletWebServerFactory 并引导创建服务器</p><p>切换服务器</p><p>原理：</p><p>springboot应用启动发现当前是Web应用。Web场景包-导入tomcat</p><p>web应用会创建一个web版的ioc容器ServletWebServerApplicationContext</p><p>ServletWebServerApplicationContext 启动的时候寻找ServletWebServerFactory（Servlet的web服务器工厂）</p><h3 id="2、定制Servlet容器"><a href="#2、定制Servlet容器" class="headerlink" title="2、定制Servlet容器"></a>2、定制Servlet容器</h3><p>实习WebServerFactoryCustomizer<ConfigurableServletWebServerFactory></p><p>修改配置文件server.xxx</p><p>直接定义ConfigurableServletWebServerFactory</p><h1 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h1><h2 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h2><p>导入redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自动配置：</p><p>自动注入RedisTemplate&lt;Object,Object&gt; ：xxxTemplate</p><p>自动注入StringRedisTemplate；k : v 都是String</p><p>底层只要我们使用StringRedisTemplate、RedisTemplate就可以操作Redis</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line">  <span class="attr">port:</span></span><br><span class="line">  <span class="attr">password:</span></span><br><span class="line">  <span class="attr">client-type:</span> <span class="string">jedis</span></span><br><span class="line">  <span class="attr">jedis:</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>Converter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer)</span>&#123;</span><br><span class="line">        UrlPathHelp urlPathHelper=<span class="keyword">new</span> <span class="title class_">UrlPathHelp</span>();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">        configurer.setUrlPathHelp(urlPathHelper); <span class="comment">//矩阵变量</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span>&#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> <span class="title class_">Converter</span>&lt;String,Pet&gt;)&#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> Pet <span class="title function_">convert</span><span class="params">(String source)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(!StringUtils.isEmpty(source)) &#123;</span><br><span class="line">             Pet pet=<span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">             String[] arr=source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">             pet.setName(arr[<span class="number">0</span>]);</span><br><span class="line">             pet.setAge(Integer.parseInt(arr[<span class="number">1</span>]));</span><br><span class="line">             <span class="keyword">return</span> pet;</span><br><span class="line">           &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringMVC支持的返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ModelAndView</span><br><span class="line">Model</span><br><span class="line">View</span><br><span class="line">ResponseEntity</span><br><span class="line">ResponseBodyEmitter</span><br><span class="line">StreamingResponseBody</span><br><span class="line">HttpEntity</span><br><span class="line">HttpHeaders</span><br><span class="line">Callable</span><br><span class="line">DeferredResult</span><br><span class="line">ListenableFuture</span><br><span class="line">CompletionStage</span><br><span class="line">WebAsyncTask</span><br><span class="line">有 @ModelAttribute</span><br></pre></td></tr></table></figure><p>被@ResponseBody就会以json数据返回</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="数据源的自动配置"><a href="#数据源的自动配置" class="headerlink" title="数据源的自动配置"></a>数据源的自动配置</h3><h3 id="导入JDBC场景"><a href="#导入JDBC场景" class="headerlink" title="导入JDBC场景"></a>导入JDBC场景</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>未导入数据库驱动，需自行导入</p><p>数据库版本要和驱动版本对应！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Druid数据源配置"><a href="#Druid数据源配置" class="headerlink" title="Druid数据源配置"></a>Druid数据源配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * druid的监控页功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        StatViewServlet statViewServlet=<span class="keyword">new</span> <span class="title class_">StatViewServlet</span>();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;StatViewServlet&gt;(statViewServlet,<span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="黑马程序员版本"><a href="#黑马程序员版本" class="headerlink" title="黑马程序员版本"></a>黑马程序员版本</h1><p><a href="https://www.bilibili.com/video/BV1Fi4y1S7ix">https://www.bilibili.com/video/BV1Fi4y1S7ix</a></p><h2 id="SpringBoot快速启动"><a href="#SpringBoot快速启动" class="headerlink" title="SpringBoot快速启动"></a>SpringBoot快速启动</h2><p>1.运行package，打成jar包</p><p>2.运行打成jar包的项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure><p>jar支持命令行启动需要maven插件支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置文件格式3种"><a href="#配置文件格式3种" class="headerlink" title="配置文件格式3种"></a>配置文件格式3种</h3><p>1.application.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 请求不需要端口号 --&gt;</span></span><br><span class="line">server.port = 80</span><br></pre></td></tr></table></figure><p>2.application.yml（主流）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制打印的日志等级</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><p>3.application.yaml</p><h3 id="数据读取方式"><a href="#数据读取方式" class="headerlink" title="数据读取方式"></a>数据读取方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBookt</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">it</span></span><br><span class="line">  <span class="string">age:18</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 读取方式一 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取方式二 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">System.out.println(environment.getProperty(<span class="string">&quot;user.name&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 读取方式三（最常用）</p><p>@ConfigurationProperties()：</p><p>配置类属性对应配置文件的属性，在创建类对象时可自动装配</p><p>user.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getSubject() &#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubject</span><span class="params">(String[] subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure><p>自定义对象封装数据警告解决</p><p>引入依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h3><p>yml版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: pro</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  profiles: dev</span><br><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  profiles: pro</span><br><span class="line">server:</span><br><span class="line">  port: 81</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  profiles: test</span><br><span class="line">server:</span><br><span class="line">  port: 82</span><br></pre></td></tr></table></figure><p>properties版本</p><p>application-dev.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port: 80</span><br></pre></td></tr></table></figure><p>application-pro.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port: 81</span><br></pre></td></tr></table></figure><p>application-test.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port: 82</span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring-profiles.active = pro</span><br></pre></td></tr></table></figure><h3 id="多环境命令行启动参数设置"><a href="#多环境命令行启动参数设置" class="headerlink" title="多环境命令行启动参数设置"></a>多环境命令行启动参数设置</h3><p>可修改，可添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --要添加的参数</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active=test --...</span><br></pre></td></tr></table></figure><h3 id="maven与boot关联操作（多环境配置）"><a href="#maven与boot关联操作（多环境配置）" class="headerlink" title="maven与boot关联操作（多环境配置）"></a>maven与boot关联操作（多环境配置）</h3><p>maven配置属性，boot配置文件读取</p><p>maven配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev_nav<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro_nav<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test_nav<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>boot的配置文件中读取maven的属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">$&#123;profile.active&#125;</span></span><br></pre></td></tr></table></figure><p>需要配置插件才能解析</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h3><p><img src="C:\Users\SPACE\Desktop\note\java\iimg\boot01.png" alt="boot01"></p><h2 id="SpringBoot整合Junit"><a href="#SpringBoot整合Junit" class="headerlink" title="SpringBoot整合Junit"></a>SpringBoot整合Junit</h2><p>@SpringBootTest：写在测试类上</p><p>@Test：写在测试方法上</p><h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h2><p>@Mapper：在dao类上使用，让springboot作为mapper扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = 1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml 配置数据库信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">702343</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><h1 id="黑马程序员SpringBoot2"><a href="#黑马程序员SpringBoot2" class="headerlink" title="黑马程序员SpringBoot2"></a>黑马程序员SpringBoot2</h1><p>教学视频：<a href="https://www.bilibili.com/video/BV15b4y1a7yG">https://www.bilibili.com/video/BV15b4y1a7yG</a></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="banner"><a href="#banner" class="headerlink" title="banner"></a>banner</h3><p>springboot启动时显示的图标</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.banner.image.location</span>=<span class="string">xxx.png</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 关闭运行日志图标</span></span><br><span class="line"><span class="attr">spring.main.banner-mode</span>=<span class="string">off</span></span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志等级</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">debug/info/error</span></span><br></pre></td></tr></table></figure><h3 id="配置文件加载优先级别"><a href="#配置文件加载优先级别" class="headerlink" title="配置文件加载优先级别"></a>配置文件加载优先级别</h3><p>properties &gt; yml &gt; yaml</p><p>后加载的覆盖先加载的</p><h4 id="yaml文件数据"><a href="#yaml文件数据" class="headerlink" title="yaml文件数据"></a>yaml文件数据</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ysk</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">age:</span> <span class="number">15</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 变量引用</span></span><br><span class="line"><span class="attr">baseDir:</span> <span class="string">c:\win10</span></span><br><span class="line"><span class="attr">tempDir:</span> <span class="string">&quot;$&#123;baseDir&#125;\temp\t1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="读取yaml全部属性数据"><a href="#读取yaml全部属性数据" class="headerlink" title="读取yaml全部属性数据"></a>读取yaml全部属性数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Enbironment env;</span><br><span class="line"></span><br><span class="line">env.getProperty(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="yaml数据读取"><a href="#yaml数据读取" class="headerlink" title="yaml数据读取"></a>yaml数据读取</h3><p>自定义对象封装指定数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSource</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String driverClassName;</span><br><span class="line">  <span class="keyword">private</span> String url;</span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h3><h3 id="整合Junit"><a href="#整合Junit" class="headerlink" title="整合Junit"></a>整合Junit</h3><p>  @StringBootTest：设置JUnit加载的springboot启动类</p><p><strong>注意：</strong>测试类与启动类包名要一致</p><p>如果不一致，使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@StringBootTest(classes = SpringbootJunitApplication.class)</span></span><br></pre></td></tr></table></figure><p>指明启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@StringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootJunitApplicationTest</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        bookServicee.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h3><ul><li>核心配置：数据库连接相关信息（连什么？连谁？什么权限）</li><li>映射配置：SQL映射（XML&#x2F;注解）</li></ul><p>导入对应的starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置相关信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/xxx?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>定义接口层接口与映射配置</p><p>@Mapper：被容器识别到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类中注入dao接口，测试功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">bookDao.getAll();</span><br></pre></td></tr></table></figure><h4 id="整合Mybatis-Plus"><a href="#整合Mybatis-Plus" class="headerlink" title="整合Mybatis-Plus"></a>整合Mybatis-Plus</h4><p>Mybatis-Plus与mybatis的区别：</p><ul><li>坐标不同</li><li>数据层实现简化</li></ul><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mybatis-Plus配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 数据库表的前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br><span class="line">      <span class="comment"># 数据库id自增策略</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> </span><br></pre></td></tr></table></figure><p>定义数据层接口与映射配置，继承BaseMapper<T></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>定义服务层接口，继承IService<T></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义服务层实现类与映射配置，继承IService&lt;M,T&gt;，实现服务层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserDao, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><p>第一种方法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/xxx?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><p>第二种方法</p><p>专用配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="SSMP整合案例"><a href="#SSMP整合案例" class="headerlink" title="SSMP整合案例"></a>SSMP整合案例</h3><h4 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 整合druid</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="comment"># mp的配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 数据库表前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br><span class="line">      <span class="comment"># 数据库id自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> </span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 开启日志 StdOutImpl：标准输出 打印控制台</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h4 id="MP分页配置"><a href="#MP分页配置" class="headerlink" title="MP分页配置"></a>MP分页配置</h4><p>配置开启分页拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPage page&#x3D;new Page(current , pageSize)</p><p>设置查询第几页和显示页数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询第一页，显示五条数据</span></span><br><span class="line">    IPage page=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    page=userDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用LambdaQueryWrapper 设置查询条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;Object&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">userDao.selectList(queryWrapper);</span><br></pre></td></tr></table></figure><p>使用LambdaUpdateWrapper 设置更新条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LambdaUpdateWrapper&lt;Object&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>();</span><br></pre></td></tr></table></figure><h4 id="异常消息处理"><a href="#异常消息处理" class="headerlink" title="异常消息处理"></a>异常消息处理</h4><p>@RestControllerAdvice</p><p>作为spring的异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作为spring的异常处理器</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 捕获所有异常做处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="string">&quot;500&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;服务器异常，请稍后再试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运维实用篇"><a href="#运维实用篇" class="headerlink" title="运维实用篇"></a>运维实用篇</h2><h3 id="工程打包与运行"><a href="#工程打包与运行" class="headerlink" title="工程打包与运行"></a>工程打包与运行</h3><p>对springboot项目打包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p>运行项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot.jar</span><br></pre></td></tr></table></figure><p>jar支持命令行启动需要依赖maven插件支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plusin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plusin</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>windows端口被占用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询端口</span><br><span class="line">netstat <span class="operator">-</span>ano</span><br><span class="line"># 查询指定端口</span><br><span class="line">netstat <span class="operator">-</span>ano <span class="operator">|</span>findstr &quot;端口号&quot;</span><br><span class="line"># 根据进程PID查询进程名称</span><br><span class="line">tasklist <span class="operator">|</span>findstr &quot;进程PID号&quot;</span><br><span class="line"># 根据PID杀死任务</span><br><span class="line">taskkill <span class="operator">/</span>F <span class="operator">/</span>PID &quot;进程PID号&quot;</span><br><span class="line"># 根据进程名称杀死任务</span><br><span class="line">taskkill <span class="operator">-</span>f <span class="operator">-</span>t <span class="operator">-</span>im &quot;进程名称&quot;</span><br></pre></td></tr></table></figure><p>临时属性设置</p><p>带属性启动springboot，替换配置文件中的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot.jar --server.port=80</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置文件4级分类"><a href="#配置文件4级分类" class="headerlink" title="配置文件4级分类"></a>配置文件4级分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">springboot中4级配置文件</span><br><span class="line"></span><br><span class="line">1级：file : config/application.yml  【最高】</span><br><span class="line">2级：file : application.yml</span><br><span class="line">3级：classpath : config/application.yml</span><br><span class="line">4级：classpath : application.yml    【最低】</span><br></pre></td></tr></table></figure><h3 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h3><p>自定义配置文件：创建xxx.yml</p><p>在idea启动配置的 Environment&#x2F;Program arguments</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--spring.config.name=xxx <span class="comment">//通过文件名</span></span><br><span class="line">--spring.config.location=classpath:/xxx.yml <span class="comment">// 通过路径</span></span><br></pre></td></tr></table></figure><h3 id="多环境开发-1"><a href="#多环境开发-1" class="headerlink" title="多环境开发"></a>多环境开发</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用环境（过时）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment"># 推荐</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">     <span class="attr">activate:</span></span><br><span class="line">       <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境</span></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---  </span></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><h4 id="多文件版"><a href="#多文件版" class="headerlink" title="多文件版"></a>多文件版</h4><p>主启动配置文件application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>创建application-dev.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>创建application-pro.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><p>创建application-test.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><h4 id="多环境分组管理"><a href="#多环境分组管理" class="headerlink" title="多环境分组管理"></a>多环境分组管理</h4><p>根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件</p><p>applicatiojn.devDB.yml</p><p>applicatiojn.devRedis.yml</p><p>applicatiojn.devMVC.yml</p><p>使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">include:</span> <span class="string">devDB,devRedis,devMVC</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>相同属性主环境生效，最后加载的生效</p><p>springboot2.4版开始使用group属性代替include属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">&quot;dev&quot;:</span> <span class="string">devDB,devRedis,devMVC</span></span><br><span class="line">      <span class="attr">&quot;pro&quot;:</span> <span class="string">proDB,proRedis,proMVC</span></span><br><span class="line">      <span class="attr">&quot;test&quot;:</span> <span class="string">testDB,testRedis,testMVC</span></span><br></pre></td></tr></table></figure><h3 id="日志基础操作"><a href="#日志基础操作" class="headerlink" title="日志基础操作"></a>日志基础操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(BookController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置日志级别</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br><span class="line">    <span class="comment"># 设置某个包的日志级别</span></span><br><span class="line">    <span class="attr">com.yesk.ssmp:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>日志分组</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="comment"># 设置分组，对某个组设置日志级别</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="comment"># 定义个组名为 ebank</span></span><br><span class="line">      <span class="attr">ebank:</span> <span class="string">com.yesk.controller,com.yesk.service,com.yesk.dao</span></span><br><span class="line">      <span class="attr">iservice:</span> <span class="string">com.alibaba</span></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">      <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">      <span class="comment"># 设置某个组的日志级别</span></span><br><span class="line">      <span class="attr">ebank:</span> <span class="string">warn</span></span><br></pre></td></tr></table></figure><p>创建日志对象</p><p>继承即可以使用log</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class clazz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseClass</span><span class="params">()</span>&#123;</span><br><span class="line">        clazz=<span class="built_in">this</span>.getClass();</span><br><span class="line">        log= LoggerFactory.getLogger(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用lombok自带的Slf4j</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日志输出格式控制"><a href="#日志输出格式控制" class="headerlink" title="日志输出格式控制"></a>日志输出格式控制</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="comment"># 设置分组，对某个组设置日志级别</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">ebank:</span> <span class="string">com.yesk.controller,com.yesk.service,com.yesk.dao</span></span><br><span class="line">      <span class="attr">iservice:</span> <span class="string">com.alibaba</span></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">      <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">      <span class="comment"># 设置某个包的日志级别</span></span><br><span class="line">      <span class="attr">ebank:</span> <span class="string">warn</span></span><br><span class="line">    <span class="comment"># 设置日志模板格式</span></span><br><span class="line">    <span class="attr">pattern:</span></span><br><span class="line">      <span class="attr">console:</span></span><br></pre></td></tr></table></figure><h3 id="文件日志记录"><a href="#文件日志记录" class="headerlink" title="文件日志记录"></a>文件日志记录</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置分组，对某个组设置日志级别</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">ebank:</span> <span class="string">com.yesk.controller,com.yesk.service,com.yesk.dao</span></span><br><span class="line">      <span class="attr">iservice:</span> <span class="string">com.alibaba</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">      <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">      <span class="comment"># 设置某个包的日志级别</span></span><br><span class="line">      <span class="attr">ebank:</span> <span class="string">warn</span></span><br><span class="line">    <span class="comment"># 设置日志模板格式</span></span><br><span class="line">    <span class="attr">pattern:</span></span><br><span class="line">      <span class="attr">console:</span></span><br><span class="line">    <span class="attr">file:</span></span><br><span class="line">      <span class="comment"># 设置日志文件</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">server.log</span></span><br><span class="line">    <span class="attr">logback:</span></span><br><span class="line">      <span class="attr">rollingpolicy:</span></span><br><span class="line">        <span class="comment"># 日志文件最大大小</span></span><br><span class="line">        <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">        <span class="comment"># 日志文件名称</span></span><br><span class="line">        <span class="attr">file-name-pattern:</span> <span class="string">server.%d&#123;yyyy-MM-dd&#125;.%i.log</span></span><br></pre></td></tr></table></figure><h2 id="开发实用篇"><a href="#开发实用篇" class="headerlink" title="开发实用篇"></a>开发实用篇</h2><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><h4 id="手动热部署"><a href="#手动热部署" class="headerlink" title="手动热部署"></a>手动热部署</h4><p>ctrl+f9</p><h4 id="自动热部署"><a href="#自动热部署" class="headerlink" title="自动热部署"></a>自动热部署</h4><p>idea中setting-&gt;Build,Execution,Deployment&#x2F;Compiler</p><p>勾选Build project automatically</p><p>ctrl+alt+shift+&#x2F; 点击 register 勾选 compiler.automack.allow.when.app.running</p><p>设置不参与热部署的文件或文件夹</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="comment"># 设置不参与热部署的文件或文件夹</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="string">static/**,public/**,config/application.yml</span></span><br></pre></td></tr></table></figure><p>默认不触发重启的目录列表</p><ul><li>&#x2F;META-INF&#x2F;maven</li><li>&#x2F;META-INF&#x2F;resources</li><li>&#x2F;resources</li><li>&#x2F;static</li><li>&#x2F;public</li><li>&#x2F;templates</li></ul><h4 id="关闭热部署功能"><a href="#关闭热部署功能" class="headerlink" title="关闭热部署功能"></a>关闭热部署功能</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="comment"># 设置不参与热部署的文件或文件夹</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="string">static/**,public/**,config/application.yml</span></span><br><span class="line">      <span class="comment"># 关闭热部署</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="第三方bean属性绑定"><a href="#第三方bean属性绑定" class="headerlink" title="第三方bean属性绑定"></a>第三方bean属性绑定</h3><p>@EnableConfigurationProperties注解可以将</p><p>@ConfigurationProperties注解对应的类加入spring容器</p><p>@ConfigurationProperties注释警告，加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用计量单位"><a href="#常用计量单位" class="headerlink" title="常用计量单位"></a>常用计量单位</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间</span></span><br><span class="line">    <span class="meta">@DurationUnit(ChronoUnit.HOURS)</span></span><br><span class="line">    <span class="keyword">private</span> Duration serverTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据大小</span></span><br><span class="line">    <span class="meta">@DataSizeUnit(DataUnit.MEGABYTES)</span></span><br><span class="line">    <span class="keyword">private</span> DataSize dataSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启Bean数据校验"><a href="#开启Bean数据校验" class="headerlink" title="开启Bean数据校验"></a>开启Bean数据校验</h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSR303规范坐标与Hibernate检验框架 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对bean开启校验功能</p><p>@Validated</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>设置校验规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Max(value = 400,message = &quot;最大值不能超过400&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载测试专用属性"><a href="#加载测试专用属性" class="headerlink" title="加载测试专用属性"></a>加载测试专用属性</h3><p>@SpringBootTest中使用properties或者args配置临时配置属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @SpringBootTest(properties = &#123;&quot;test.props=testValue1&quot;&#125;)</span></span><br><span class="line"><span class="comment">// @SpringBootTest(args = &#123;&quot;--test.props=testValue2&quot;&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SsmpApplicationTests</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.props&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类中启动web环境"><a href="#测试类中启动web环境" class="headerlink" title="测试类中启动web环境"></a>测试类中启动web环境</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br></pre></td></tr></table></figure><h4 id="发送虚拟请求"><a href="#发送虚拟请求" class="headerlink" title="发送虚拟请求"></a>发送虚拟请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.ResultActions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启虚拟MVC调用</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SsmpApplicationTests</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.props&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 注入虚拟MVC调用对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWeb</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建虚拟请求，当前访问/books</span></span><br><span class="line">        MockHttpServletRequestBuilder builder= MockMvcRequestBuilders.get(<span class="string">&quot;/books&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行请求</span></span><br><span class="line">        ResultActions actions=mvc.perform(builder);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配响应执行状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.ResultActions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.ResultMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.StatusResultMatchers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启虚拟MVC调用</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SsmpApplicationTests</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.props&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWeb</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        MockHttpServletRequestBuilder builder= MockMvcRequestBuilders.get(<span class="string">&quot;/books&quot;</span>);</span><br><span class="line">        ResultActions actions=mvc.perform(builder);</span><br><span class="line">        <span class="comment">// 匹配执行状态（是否预期值）</span></span><br><span class="line">        <span class="comment">// 定义执行状态匹配器</span></span><br><span class="line">        <span class="type">StatusResultMatchers</span> <span class="variable">status</span> <span class="operator">=</span> MockMvcResultMatchers.status();</span><br><span class="line">        <span class="comment">// 定义预取执行状态</span></span><br><span class="line">        <span class="type">ResultMatcher</span> <span class="variable">ok</span> <span class="operator">=</span> status.isOk();</span><br><span class="line">        <span class="comment">// 使用本次真实执行的结构与预期结构进行对比</span></span><br><span class="line">        actions.andExpect(ok);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配响应体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWeb</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        MockHttpServletRequestBuilder builder= MockMvcRequestBuilders.get(<span class="string">&quot;/books&quot;</span>);</span><br><span class="line">        ResultActions actions=mvc.perform(builder);</span><br><span class="line">        <span class="comment">// 匹配执行状态（是否预期值）</span></span><br><span class="line">        <span class="type">ContentResultMatchers</span> <span class="variable">content</span> <span class="operator">=</span> MockMvcResultMatchers.content();</span><br><span class="line">        <span class="type">ResultMatcher</span> <span class="variable">res</span> <span class="operator">=</span> content.string(<span class="string">&quot;springboot&quot;</span>);</span><br><span class="line">        actions.andExpect(res);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>匹配响应体(json)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWeb</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    MockHttpServletRequestBuilder builder= MockMvcRequestBuilders.get(<span class="string">&quot;/books&quot;</span>);</span><br><span class="line">    ResultActions actions=mvc.perform(builder);</span><br><span class="line">    <span class="comment">// 匹配执行状态（是否预期值）</span></span><br><span class="line">    <span class="type">ContentResultMatchers</span> <span class="variable">content</span> <span class="operator">=</span> MockMvcResultMatchers.content();</span><br><span class="line">    <span class="type">ResultMatcher</span> <span class="variable">res</span> <span class="operator">=</span> content.json(<span class="string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;yesk\&quot;&#125;&quot;</span>);</span><br><span class="line">    actions.andExpect(res);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配响应头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWeb</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    MockHttpServletRequestBuilder builder= MockMvcRequestBuilders.get(<span class="string">&quot;/books&quot;</span>);</span><br><span class="line">    ResultActions actions=mvc.perform(builder);</span><br><span class="line">    <span class="comment">// 匹配执行状态（是否预期值）</span></span><br><span class="line">    <span class="type">HeaderResultMatchers</span> <span class="variable">header</span> <span class="operator">=</span> MockMvcResultMatchers.header();</span><br><span class="line">    <span class="type">ResultMatcher</span> <span class="variable">res</span> <span class="operator">=</span> header.string(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">    actions.andExpect(res);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务层测试事务回滚"><a href="#业务层测试事务回滚" class="headerlink" title="业务层测试事务回滚"></a>业务层测试事务回滚</h4><p>加上@Transactional不将测试的数据加入数据库</p><p>如果加上@Rollback(value &#x3D; false)，还是会加入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;qizai&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">19</span>);</span><br><span class="line">        userDao.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试用例设置随机数据"><a href="#测试用例设置随机数据" class="headerlink" title="测试用例设置随机数据"></a>测试用例设置随机数据</h4><p>数据实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;testcase.user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserCase</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> publishTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">testcase:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">$&#123;random.int&#125;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;random.value&#125;</span></span><br><span class="line">    <span class="attr">uuid:</span> <span class="string">$&#123;random.uuid&#125;</span></span><br><span class="line">    <span class="attr">publishTime:</span> <span class="string">$&#123;random.long&#125;</span></span><br></pre></td></tr></table></figure><h3 id="内置数据源"><a href="#内置数据源" class="headerlink" title="内置数据源"></a>内置数据源</h3><p>springboot提供3中内嵌的数据源对象供开发者上选择</p><ul><li>HikariCP（默认）</li><li>Tomcat提供DataSource</li><li>Commons DBCP</li></ul><h3 id="数据层解决方案"><a href="#数据层解决方案" class="headerlink" title="数据层解决方案"></a>数据层解决方案</h3><p>现有数据层解决方案技术选型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Druid + MyBatis-Plus + MySQL</span><br></pre></td></tr></table></figure><ul><li>数据源：DruidDataSource</li><li>持久化技术：MyBatis-Plus  &#x2F; MyBatis</li><li>数据库：MySQL</li></ul><p>内置持久化解决方案——JdbcTemplate</p><p>导入坐标&#x2F;依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jdbcTemplate配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring：</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">query-timeout:</span> <span class="number">-1</span> <span class="comment"># 查询超时时间</span></span><br><span class="line">      <span class="attr">max-rows:</span> <span class="number">500</span>     <span class="comment"># 最大行数</span></span><br><span class="line">      <span class="attr">fetch-size:</span> <span class="number">-1</span>    <span class="comment"># 缓存行数</span></span><br></pre></td></tr></table></figure><h3 id="内置数据库"><a href="#内置数据库" class="headerlink" title="内置数据库"></a>内置数据库</h3><p>SpringBoot提供了3中内嵌数据库供开发者选择，提高开发测试效率</p><ul><li>H2</li><li>HSQL</li><li>Derby</li></ul><p>内嵌数据库（H2）</p><p>依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">h2:</span></span><br><span class="line">    <span class="attr">console:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/h2</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="整合redis与使用"><a href="#整合redis与使用" class="headerlink" title="整合redis与使用"></a>整合redis与使用</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h3><p>可以将修改频率高的数据存储到mongodb</p><p>启动</p><p>在bin目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath=..\data\db</span><br></pre></td></tr></table></figure><p>启用客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>springboot整合mongodb</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;java全栈开发&quot;</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        mongoTemplate.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = mongoTemplate.findAll(Book.class);</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h3><h3 id="spring缓存"><a href="#spring缓存" class="headerlink" title="spring缓存"></a>spring缓存</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启缓存</p><p>@EnableCaching</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><p>@Cachable：存与取</p><p>@CachePut：存不取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cachable(value=&quot;cacheSpace&quot;, key=&quot;#id&quot;)</span></span><br><span class="line">Book <span class="title function_">getById</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓存供应商Ehcache"><a href="#缓存供应商Ehcache" class="headerlink" title="缓存供应商Ehcache"></a>缓存供应商Ehcache</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ehcache</span></span><br><span class="line">    <span class="attr">ehcache:</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">classpath:ehcache.xml</span></span><br></pre></td></tr></table></figure><p>ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">          user.home – 用户主目录</span></span><br><span class="line"><span class="comment">          user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">          java.io.tmpdir – 默认临时文件路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;E:\work\origin\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--defaultCache:echcache 的默认缓存策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">&quot;localTempSwap&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义缓存策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">&quot;smsCode&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">&quot;localTempSwap&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缓存供应商redis"><a href="#缓存供应商redis" class="headerlink" title="缓存供应商redis"></a>缓存供应商redis</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">use-key-prefix:</span> <span class="literal">true</span> <span class="comment"># 是否使用前缀名</span></span><br><span class="line">      <span class="attr">key-prefix:</span> <span class="string">sms_</span>     <span class="comment"># 追加自定义前缀名</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="string">60s</span>    <span class="comment"># 有效时长</span></span><br><span class="line">      <span class="attr">cache-null-values:</span> <span class="literal">false</span> <span class="comment"># 是否允许存储空值</span></span><br></pre></td></tr></table></figure><h4 id="缓存供应商memcached"><a href="#缓存供应商memcached" class="headerlink" title="缓存供应商memcached"></a>缓存供应商memcached</h4><p>memcached客户端选择</p><ul><li>Memcached Client for Java：最早期客户端，稳定可靠，用户群广</li><li>SpyMemcached：效率更高</li><li>Xmemcached：并发处理更好</li></ul><h4 id="缓存供应商jetcache"><a href="#缓存供应商jetcache" class="headerlink" title="缓存供应商jetcache"></a>缓存供应商jetcache</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alicp.jetcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetcache-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类配置@EnableCreateCacheAnnotation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jetcache 启用缓存的主开关</span></span><br><span class="line"><span class="meta">@EnableCreateCacheAnnotation</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>远程缓存</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br><span class="line">    <span class="comment"># 可以自定义缓存配置，@CreateCache使用area=&quot;sms&quot; 指定</span></span><br><span class="line">    <span class="attr">sms:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CreateCache(area = &quot;sms&quot;,name = &quot;jetCache&quot;,expire = 60,timeUnit = TimeUnit.SECONDS,cacheType = CacheType.REMOTE)</span></span><br><span class="line"><span class="keyword">private</span> Cache&lt;String,String&gt; jetCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendCodeToSMS</span><span class="params">(String tele)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> codeUtilsl.generator();</span><br><span class="line">        jetCache.put(tele,code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> smsCode.getCode();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> jetCache.get(smsCode.getTele());</span><br><span class="line">        <span class="keyword">return</span> code.equals(cacheCode);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>本地缓存</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">statIntervalMinutes:</span> <span class="number">15</span></span><br><span class="line">  <span class="attr">areaInCacheName:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 本地缓存配置</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">linkedhashmap</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">      <span class="attr">limit:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CreateCache(area = &quot;sms&quot;,name = &quot;jetCache&quot;,expire = 60,timeUnit = TimeUnit.SECONDS,cacheType = CacheType.LOCAL)</span></span><br><span class="line"><span class="keyword">private</span> Cache&lt;String,String&gt; jetCache;</span><br></pre></td></tr></table></figure><p>方法注解</p><p>启动类开启方法注解</p><p>@EnableMethodCache(basePackages &#x3D; “com.yesk.cache”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启用方法注解</span></span><br><span class="line"><span class="meta">@EnableMethodCache(basePackages = &quot;com.yesk.cache&quot;)</span></span><br><span class="line"><span class="comment">// jetcache 启用缓存的主开关</span></span><br><span class="line"><span class="meta">@EnableCreateCacheAnnotation</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="comment"># 多少分钟显示缓存统计</span></span><br><span class="line">  <span class="attr">statIntervalMinutes:</span> <span class="number">15</span></span><br><span class="line">  <span class="comment"># 设置不把areaName作为Key前缀</span></span><br><span class="line">  <span class="attr">areaInCacheName:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 本地缓存配置</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">linkedhashmap</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">      <span class="attr">limit:</span> <span class="number">100</span></span><br><span class="line">  <span class="comment"># 远程缓存配置</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">      <span class="attr">valueEncoder:</span> <span class="string">java</span></span><br><span class="line">      <span class="attr">valueDecoder:</span> <span class="string">java</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br><span class="line">        <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">maxIdle:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>基本使用</p><p>@Cached：缓存</p><p>@CacheRefresh：刷新缓存</p><p>@CacheInvalidate：删除缓存</p><p>@CacheUpdate：更新缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cached(name = &quot;book_&quot;,key = &quot;#id&quot;,expire = 10,cacheType = CacheType.REMOTE)</span></span><br><span class="line"><span class="meta">@CacheRefresh(refresh = 10,timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getByID</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.getByID(id);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInvalidate(name=&quot;book_&quot;,key = &quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">i</span> <span class="operator">=</span> bookDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheUpdate(name=&quot;book_&quot;,key = &quot;#book.id&quot;,value = &quot;#book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">i</span> <span class="operator">=</span> bookDao.update(book);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Book&gt; all = bookDao.getAll();</span><br><span class="line">    <span class="keyword">return</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">i</span> <span class="operator">=</span> bookDao.save(book);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存对象必须保障可序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>()&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="j2cache"><a href="#j2cache" class="headerlink" title="j2cache"></a>j2cache</h4><p>跳了跳了，自行百度</p><h3 id="springboot整合quartz"><a href="#springboot整合quartz" class="headerlink" title="springboot整合quartz"></a>springboot整合quartz</h3><p>定时任务，常用于</p><ul><li>年度报表</li><li>缓存统计报告</li><li>…</li></ul><p>相关概念</p><ul><li>工作（Job）：用于定义具体执行的工作</li><li>工作明细（JobDetail）：用于描述定时工作相关的信息</li><li>触发器（Trigger）：用于描述触发工作的规则，通常使用cron表达式定义调度规则</li><li>调度器（Scheduler）：用于描述工作明细与触发器的对应关系</li></ul><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>任务执行的程序</p><p>创建quartz&#x2F;QuartzTaskBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzTaskBean</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建config&#x2F;QuartzConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yesk.quartz.utils.QuartzTaskBean;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义工作明细与触发器，并绑定对应关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">printJobDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder</span><br><span class="line">                .newJob(QuartzTaskBean.class)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">printJobTrigger</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 触发时间</span></span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">cronScheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ?&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder</span><br><span class="line">                .newTrigger()</span><br><span class="line">                .forJob(printJobDetail())</span><br><span class="line">                .withSchedule(cronScheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="springboot整合task"><a href="#springboot整合task" class="headerlink" title="springboot整合task"></a>springboot整合task</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">// 开启定时任务功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(QuartzApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建quartz&#x2F;MyBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line">                     <span class="comment">//秒 分 时 天 月 星期</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/1 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;tast running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定时任务相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">    <span class="attr">scheduling:</span></span><br><span class="line">      <span class="comment"># 任务调度线程池大小 默认 1</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">size:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 调度线程名称前缀 默认 scheduling-</span></span><br><span class="line">      <span class="attr">thread-name-prefix:</span> <span class="string">ssm_</span></span><br><span class="line">      <span class="attr">shutdown:</span></span><br><span class="line">        <span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line">        <span class="attr">await-termination:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line">        <span class="attr">await-termination-period:</span> <span class="string">10s</span></span><br></pre></td></tr></table></figure><h3 id="springboot整合javamail"><a href="#springboot整合javamail" class="headerlink" title="springboot整合javamail"></a>springboot整合javamail</h3><ul><li>SMTP(Simple Mail Transfer Protocol)：简单邮件传输协议，用于发送电子邮件的的传输协议</li><li>POP3（Post Office Protocol - Version 3）：用于接收电子邮件的传输协议</li><li>IMAP（Internet Mail Access Protocol）：互联网消息协议，是POP3的替代协议</li></ul><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xxx@qq.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="comment"># 邮箱 设置 账户 中开启</span></span><br></pre></td></tr></table></figure><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yesk.mail.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yesk.mail.service.SendMailService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendMailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span><span class="string">&quot;@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 接收人</span></span><br><span class="line">    <span class="keyword">private</span> String to=<span class="string">&quot;@163.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> String subject=<span class="string">&quot;标题&quot;</span>;</span><br><span class="line">    <span class="comment">// 正文</span></span><br><span class="line">    <span class="keyword">private</span> String context=<span class="string">&quot;正文&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        message.setTo(to);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(context);</span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送多部件邮件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yesk.mail.service.SendMailService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendMailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span><span class="string">&quot;@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 接收人</span></span><br><span class="line">    <span class="keyword">private</span> String to=<span class="string">&quot;@163.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> String subject=<span class="string">&quot;标题&quot;</span>;</span><br><span class="line">    <span class="comment">// 正文</span></span><br><span class="line">    <span class="keyword">private</span> String context=<span class="string">&quot;&lt;a href=&#x27;www.baidu.com&#x27;&gt;百度一下&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMail</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">// 参数1：mimeMessage对象，参数2：是否开启多部件</span></span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage,<span class="literal">true</span>);</span><br><span class="line">        helper.setFrom(from);</span><br><span class="line">        helper.setTo(to);</span><br><span class="line">        helper.setSubject(subject);</span><br><span class="line">        <span class="comment">// 参数2：启用解析html内容</span></span><br><span class="line">        helper.setText(context,<span class="literal">true</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\a.jpg&quot;</span>);</span><br><span class="line">        helper.addAttachment(file.getName(),file);</span><br><span class="line">        javaMailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a>消息处理</h3><h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><p>下载地址：<a href="https://activemq.apache.org/components/classic/download/">https://activemq.apache.org/components/classic/download/</a></p><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activemq.bat</span><br></pre></td></tr></table></figure><p>服务服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8161/</span><br></pre></td></tr></table></figure><p>服务端口：61616，管理后台端口：8161</p><p>用户名&amp;密码：admin</p><p>springboot整合ActiveMQ</p><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="comment"># 使用发布订阅形式</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="comment"># 目的地(队列)的名字</span></span><br><span class="line">      <span class="attr">default-destination:</span> <span class="string">itcast</span></span><br></pre></td></tr></table></figure><p>创建service&#x2F;impl&#x2F;activemq&#x2F;MessageServiceActiveImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yesk.mq.service.impl.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yesk.mq.service.MessageService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageServiceActiveImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用active将订单消息纳入消息队列id：&quot;</span>+id);</span><br><span class="line">        <span class="comment">// 目的地(队列)名为：&quot;order.sm.queue.id&quot;</span></span><br><span class="line">        jmsMessagingTemplate.convertAndSend(<span class="string">&quot;order.sm.queue.id&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 做消息处理</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jmsMessagingTemplate.receiveAndConvert(<span class="string">&quot;order.sm.queue.id&quot;</span>,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消息的处理可以监听自动处理</p><p>创建service&#x2F;impl&#x2F;activemq&#x2F;listener&#x2F;MessageListener.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.JmsListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列名为 “order.sm.queue.id” 的消息</span></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;order.sm.queue.id&quot;)</span></span><br><span class="line">    <span class="comment">// 可以向下处理消息</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;order.other.queue.id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">receive</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务，id：&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;new:&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;order.other.queue.id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">otherReceive</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成其他发送业务，id：&quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><h2 id="原理篇"><a href="#原理篇" class="headerlink" title="原理篇"></a>原理篇</h2><p>bean的加载方式-扩展2</p><p>加载配置类并加载配置文件（系统迁移）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yesk&quot;)</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;applicationContext-config.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>bean的加载方式（四）</p><p>使用@Import注解导入要注入的bean对应的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(Dog.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>被导入的bean无需使用注解声明为bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以用来导入配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(DbConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise学习笔记</title>
      <link href="/2023/08/22/%E5%89%8D%E7%AB%AF/promise%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/22/%E5%89%8D%E7%AB%AF/promise%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="util-promise方法进行promise风格化"><a href="#util-promise方法进行promise风格化" class="headerlink" title="util.promise方法进行promise风格化"></a>util.promise方法进行promise风格化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mineReadFile = util.<span class="title function_">promise</span>(fs.<span class="property">readFile</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">mineReadFile</span>(<span class="string">&#x27;./txt.txt&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="promise封装ajax请求"><a href="#promise封装ajax请求" class="headerlink" title="promise封装ajax请求"></a>promise封装ajax请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendAJAX</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,url);</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">readySyaye</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">status</span>&gt;=<span class="number">200</span>&amp;&amp;xhr.<span class="property">status</span>&lt;=<span class="number">299</span>)&#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">reject</span>();</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sendAJAX</span>(<span class="string">&#x27;xxx&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="promise属性介绍"><a href="#promise属性介绍" class="headerlink" title="promise属性介绍"></a>promise属性介绍</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Promise 的状态</span><br><span class="line">实例对象中的一个属性 [PromiseState]</span><br><span class="line">pending 未决定的</span><br><span class="line">resolved / fullfilled 成功</span><br><span class="line">rejected 失败</span><br><span class="line">只能由pending -&gt; resolved or</span><br><span class="line"><span class="code">     pending -&gt; rejected</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Promise 对象的值</span><br><span class="line">实例对象中的另一个属性 [PromiseResult]</span><br><span class="line">保存着[成功/失败]的结果</span><br><span class="line">resolve</span><br><span class="line">reject</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="Promise-resolve-方法"><a href="#Promise-resolve-方法" class="headerlink" title="Promise.resolve()方法"></a>Promise.resolve()方法</h3><p>直接返回成功的promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Promise-reject-方法"><a href="#Promise-reject-方法" class="headerlink" title="Promise.reject()方法"></a>Promise.reject()方法</h3><p>直接返回失败的promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Promise-all-方法"><a href="#Promise-all-方法" class="headerlink" title="Promise.all()方法"></a>Promise.all()方法</h3><p>判断多个promise，如果都成功返回成功的promise，如果有一个失败，就返回第一个失败的promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;oh yeah&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3])</span><br></pre></td></tr></table></figure><h3 id="Promise-race-方法"><a href="#Promise-race-方法" class="headerlink" title="Promise.race()方法"></a>Promise.race()方法</h3><p>返回第一个完成的promise，最先改变状态的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;oh yeah&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result= <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3])</span><br></pre></td></tr></table></figure><h2 id="改变状态"><a href="#改变状态" class="headerlink" title="改变状态"></a>改变状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolve()</span><br><span class="line">reject()</span><br><span class="line">throw &#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="Promise关键问题"><a href="#Promise关键问题" class="headerlink" title="Promise关键问题"></a>Promise关键问题</h2><h3 id="异常穿透"><a href="#异常穿透" class="headerlink" title="异常穿透"></a>异常穿透</h3><p>执行promise过程中有一处出错就执行catch的回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;err&#x27;</span> <span class="comment">// 出错，直接执行catch回调</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="如何中断Promise链"><a href="#如何中断Promise链" class="headerlink" title="如何中断Promise链"></a>如何中断Promise链</h3><p>有且只有一种方式：返回pending状态的promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">()=&gt;</span>&#123;&#125;) <span class="comment">// 返回pending状态的promise</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise自定义封装"><a href="#Promise自定义封装" class="headerlink" title="Promise自定义封装"></a>Promise自定义封装</h2><p>手写个promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = []</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">// 只有在pending状态才可改变</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">// 改变状态、传入值</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data</span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            item.<span class="title function_">onResolved</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">// 只有在pending状态才可改变</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">// 改变状态、传入值</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data</span><br><span class="line">        self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="title function_">executor</span>(resolve,reject)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="title function_">reject</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加then方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved,onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 调用回调函数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="title function_">onResolved</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">            <span class="comment">// 如果返回值是个Promise</span></span><br><span class="line">            <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(v)</span><br><span class="line">                &#125;,<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(r)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(result)</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: onResolved,</span><br><span class="line">                <span class="attr">onRejected</span>: onRejected</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Flask框架详解</title>
      <link href="/2023/08/21/python/Python-Flask%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/08/21/python/Python-Flask%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Flask框架详解"><a href="#Python-Flask框架详解" class="headerlink" title="Python Flask框架详解"></a>Python Flask框架详解</h1><h2 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><br><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run()</span><br></pre></td></tr></table></figure><blockquote><p>代码解析：<br>1、首先我们导入了 Flask 类。 该类的实例将会成为我们的 WSGI 应用。<br>2、接着我们创建一个该类的实例。第一个参数是应用模块或者包的名称。如果你使用 一个单一模块（就像本例），那么应当使用 name ，因为名称会根据这个 模块是按应用方式使用还是作为一个模块导入而发生变化（可能是 ‘main’ ， 也可能是实际导入的名称）。这个参数是必需的，这样 Flask 才能知道在哪里可以 找到模板和静态文件等东西<br>3、然后我们使用 route() 装饰器来告诉 Flask 触发函数的 URL 。<br>4、函数名称被用于生成相关联的 URL 。函数最后返回需要在用户浏览器中显示的信息。</p></blockquote><br><h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><p>虽然 flask 命令可以方便地启动一个本地开发服务器，但是每次应用代码 修改之后都需要手动重启服务器。这样不是很方便， Flask 可以做得更好。如果你打开 调试模式，那么服务器会在修改应用代码之后自动重启，并且当应用出错时还会提供一个 有用的调试器。<br>在命令行中，如果需要打开所有开发功能（包括调试模式），那么要在运行服务器之前导出 FLASK_ENV 环境变量并把其设置为 development:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ export FLASK_ENV=development</span><br><span class="line">$ flask run</span><br></pre></td></tr></table></figure><p>在代码中，在运行或将调试参数传递给run()方法之前，通过将application对象的debug属性设置为True来启用Debug模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.debug = True</span><br><span class="line">app.run()</span><br><span class="line"># 或者</span><br><span class="line">app.run(debug = True)</span><br></pre></td></tr></table></figure><br><h2 id="绑定IP和端口"><a href="#绑定IP和端口" class="headerlink" title="绑定IP和端口"></a>绑定IP和端口</h2><h3 id="app-run"><a href="#app-run" class="headerlink" title="app.run"></a>app.run</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host, port, debug, options)</span><br></pre></td></tr></table></figure><ul><li>host：要监听的主机名。 默认为127.0.0.1（localhost）。设置为“0.0.0.0”以使服务器在外部可用</li><li>port ：默认值为5000</li><li>debug：默认为false。 如果设置为true，则提供调试信息，可以自动重载代码并显示调试信息</li><li>options：要转发到底层的Werkzeug服务器。</li></ul><p>默认情况下，Flask绑定IP为127.0.0.1，端口为5000。我们也可以通过下面的方式自定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=&#x27;0.0.0.0&#x27;, port=80, debug=True)</span><br></pre></td></tr></table></figure><p>0.0.0.0代表电脑所有的IP。80是HTTP网站服务的默认端口。什么是默认？比如，我们访问网站<a href="http://www.example.com,其实是访问的http//www.example.com:80%EF%BC%8C%E5%8F%AA%E4%B8%8D%E8%BF%87:80%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%E4%B8%8D%E5%86%99%E3%80%82">http://www.example.com，其实是访问的http://www.example.com:80，只不过:80可以省略不写。</a></p><br><h2 id="flask路由"><a href="#flask路由" class="headerlink" title="flask路由"></a>flask路由</h2><h3 id="app-route"><a href="#app-route" class="headerlink" title="app.route"></a>app.route</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.route(rule, options)</span><br></pre></td></tr></table></figure><ul><li>rule 参数表示与该函数的URL绑定。</li><li>options 是要转发给基础Rule对象的参数列表。</li></ul><p>现代Web框架使用路由技术来帮助用户记住应用程序URL。可以直接访问所需的页面，而无需从主页导航。</p><p>Flask中的route()装饰器用于将URL绑定到函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><p>在这里，URL’&#x2F; hello’规则绑定到hello_world()函数。 因此，如果用户访问<a href="http://localhost:5000/hello">http://localhost:5000/hello</a> URL，hello_world()函数的输出将在浏览器中呈现。</p><p>application对象的add_url_rule()函数也可用于将URL与函数绑定，如上例所示，使用route()装饰器的目的也由以下表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, hello_world)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-变量规则"><a href="#Flask-变量规则" class="headerlink" title="Flask 变量规则"></a>Flask 变量规则</h2><p>通过向规则参数添加变量部分，可以动态构建URL。此变量部分标记为<a href="converter:variable_name">converter:variable_name</a>。它作为关键字参数传递给与规则相关联的函数。<br>在以下示例中，route()装饰器的规则参数包含附加到URL’&#x2F;hello’的<name>。 因此，如果在浏览器中输入<a href="http://localhost:5000/hello/chenshifeng%E4%BD%9C%E4%B8%BAURL%EF%BC%8C%E5%88%99%E2%80%99chenshifeng%E2%80%99%E5%B0%86%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E6%8F%90%E4%BE%9B%E7%BB%99">http://localhost:5000/hello/chenshifeng作为URL，则’chenshifeng’将作为参数提供给</a> hello()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_name</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello %s!&#x27;</span> % name</span><br></pre></td></tr></table></figure><table><thead><tr><th>转换器</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>（缺省值） 接受任何不包含斜杠的文本</td></tr><tr><td>int</td><td>接受正整数</td></tr><tr><td>float</td><td>接受正浮点数</td></tr><tr><td>path</td><td>类似 string ，但可以包含斜杠</td></tr><tr><td>uuid</td><td>接受 UUID 字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Post %d&#x27;</span> % post_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_subpath</span>(<span class="params">subpath</span>):</span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Subpath %s&#x27;</span> % subpath</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="唯一的-URL-重定向行为"><a href="#唯一的-URL-重定向行为" class="headerlink" title="唯一的 URL &#x2F; 重定向行为"></a>唯一的 URL &#x2F; 重定向行为</h2><p>以下两条规则的不同之处在于是否使用尾部的斜杠:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">projects</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The project page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/about&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The about page&#x27;</span></span><br></pre></td></tr></table></figure><p>projects 的 URL 是中规中矩的，尾部有一个斜杠，看起来就如同一个文件夹。 访问一个没有斜杠结尾的 URL 时 Flask 会自动进行重定向，帮你在尾部加上一个斜杠。</p><p>about 的 URL 没有尾部斜杠，因此其行为表现与一个文件类似。如果访问这个 URL 时添加了尾部斜杠就会得到一个 404 错误。这样可以保持 URL 唯一，并帮助 搜索引擎避免重复索引同一页面。</p><br><h2 id="Flask-URL构建"><a href="#Flask-URL构建" class="headerlink" title="Flask URL构建"></a>Flask URL构建</h2><p>url_for()函数对于动态构建特定函数的URL非常有用。该函数接受函数的名称作为第一个参数，以及一个或多个关键字参数，每个参数对应于URL的变量部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_admin</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello Admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/guest/&lt;guest&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_guest</span>(<span class="params">guest</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello %s as Guest&#x27;</span> % guest</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_user</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello_admin&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;hello_guest&#x27;</span>, guest=name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><blockquote><p>redirect函数用于重定向，实现机制很简单，就是向客户端（浏览器）发送一个重定向的HTTP报文，浏览器会去访问报文中指定的url。</p></blockquote><br><h2 id="Flask-HTTP方法"><a href="#Flask-HTTP方法" class="headerlink" title="Flask HTTP方法"></a>Flask HTTP方法</h2><p>Web 应用使用不同的 HTTP 方法处理 URL 。当你使用 Flask 时，应当熟悉 HTTP 方法。 缺省情况下，一个路由只回应 GET 请求。 可以使用 route() 装饰器的 methods 参数来处理不同的 HTTP 方法:</p><table><thead><tr><th align="center"><strong>方法</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">以未加密的形式将数据发送到服务器，最常见的方法。</td></tr><tr><td align="center">HEAD</td><td align="center">和GET方法相同，但没有响应体。</td></tr><tr><td align="center">POST</td><td align="center">用于将HTML表单数据发送到服务器，POST方法接收的数据不由服务器缓存。</td></tr><tr><td align="center">PUT</td><td align="center">用上传的内容替换目标资源的所有当前表示。</td></tr><tr><td align="center">DELETE</td><td align="center">删除由URL给出的目标资源的所有当前表示。</td></tr></tbody></table><blockquote><p>默认情况下，Flask路由响应GET请求。但是，可以通过为route()装饰器提供方法参数来更改此首选项。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>(<span class="params">name</span>):</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;welcome %s&#x27;</span> % name</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      user = request.form[<span class="string">&#x27;xx&#x27;</span>]</span><br><span class="line">      <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>,name = user))</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      user = request.args.get(<span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>,name = user))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-模板"><a href="#Flask-模板" class="headerlink" title="Flask 模板"></a>Flask 模板</h2><p>在大型应用中,把业务逻辑和表现内容放在一起,会增加代码的复杂度和维护成本.</p><ul><li>模板其实是一个包含响应文本的文件,其中用占位符(变量)表示动态部分,告诉模板引擎其具体的值需要从使用的数据中获取</li><li>使用真实值替换变量,再返回最终得到的字符串,这个过程称为’渲染’</li><li>Flask 是使用 Jinja2 这个模板引擎来渲染模板</li></ul><br><p>使用模板的好处</p><ul><li>视图函数只负责业务逻辑和数据处理(业务逻辑方面)</li><li>而模板则取到视图函数的数据结果进行展示(视图展示方面)</li><li>代码结构清晰,耦合度低</li></ul><br><p>使用 render_template() 方法可以渲染模板，你只要提供模板名称和需要 作为参数传递给模板的变量就行了。<br>Flask 会在 templates 文件夹内寻找模板。因此，如果你的应用是一个模块， 那么模板文件夹应该在模块旁边；如果是一个包，那么就应该在包里面：</p><br><p>情形 1 : 一个模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/application.py</span><br><span class="line">/templates</span><br><span class="line">    /hello.html</span><br></pre></td></tr></table></figure><br><p>情形 2 : 一个包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/application</span><br><span class="line">    /__init__.py</span><br><span class="line">    /templates</span><br><span class="line">        /hello.html</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    my_int = <span class="number">18</span></span><br><span class="line">    my_str = <span class="string">&#x27;curry&#x27;</span></span><br><span class="line">    my_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">    my_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;durant&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">28</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># render_template方法:渲染模板</span></span><br><span class="line">    <span class="comment"># 参数1: 模板名称  参数n: 传到模板里的数据</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>,</span><br><span class="line">                           my_int=my_int,</span><br><span class="line">                           my_str=my_str,</span><br><span class="line">                           my_list=my_list,</span><br><span class="line">                           my_dict=my_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是模板<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_int &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_str &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_dict &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>模板的list数据获取<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list[0] &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list.1 &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>字典数据获取<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_dict[&#x27;name&#x27;] &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_dict.age &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>算术运算<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list.0 + 10 &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; my_list[0] + my_list.1 &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h2 id="Flask-静态文件"><a href="#Flask-静态文件" class="headerlink" title="Flask 静态文件"></a>Flask 静态文件</h2><p>动态的 web 应用也需要静态文件，一般是 CSS 和 JavaScript 文件。理想情况下你的 服务器已经配置好了为你的提供静态文件的服务。但是在开发过程中， Flask 也能做好这项工作。只要在你的包或模块旁边创建一个名为 static 的文件夹就行了。 静态文件位于应用的 &#x2F;static 中。<br>使用特定的 ‘static’ 端点就可以生成相应的 URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这个静态文件在文件系统中的位置应该是 static&#x2F;style.css 。</p></blockquote><br><p>在下面的示例中，在index.html中的HTML按钮的OnClick事件上调用hello.js中定义的javascript函数，该函数在Flask应用程序的“&#x2F;”URL上呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>index.html的HTML脚本如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">src</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = &#x27;hello.js&#x27;) &#125;&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span> <span class="attr">onclick</span> = <span class="string">&quot;sayHello()&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Say Hello&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Hello.js包含sayHello()函数。</p><br><h2 id="Flask-Request对象"><a href="#Flask-Request对象" class="headerlink" title="Flask Request对象"></a>Flask Request对象</h2><p>来自客户端网页的数据作为全局请求对象发送到服务器。为了处理请求数据，应该从Flask模块导入。</p><p>Request对象的重要属性如下所列：</p><ul><li>form - 它是一个字典对象，包含表单参数及其值的键和值对。</li><li>args - 解析查询字符串的内容，它是问号（？）之后的URL的一部分。</li><li>Cookies - 保存Cookie名称和值的字典对象。</li><li>files - 与上传文件有关的数据。</li><li>method - 当前请求方法</li></ul><p>首先，你必须从 flask 模块导入请求对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></table></figure><br><h3 id="Flask-将表单数据发送到模板"><a href="#Flask-将表单数据发送到模板" class="headerlink" title="Flask 将表单数据发送到模板"></a>Flask 将表单数据发送到模板</h3><p>我们已经看到，可以在 URL 规则中指定 http 方法。触发函数接收的 Form 数据可以以字典对象的形式收集它并将其转发到模板以在相应的网页上呈现它。</p><p>在以下示例中，’&#x2F;’ URL 会呈现具有表单的网页（student.html）。填入的数据会发布到触发 result() 函数的 ‘&#x2F;result’ URL。</p><p>result() 函数收集字典对象中的 request.form 中存在的表单数据，并将其发送给 result.html。</p><p>该模板动态呈现表单数据的 HTML 表格。</p><p>下面给出的是应用程序的 Python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">student</span>():</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&#x27;student.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">result</span>():</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      result = request.form</span><br><span class="line">      <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>,result = result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>下面给出的是 student.html 的 HTML 脚本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:5000/result&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Physics <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Physics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Chemistry <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;chemistry&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Maths <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Mathematics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;submit&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>下面给出了模板（ result.html ）的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">1</span>&gt;</span></span><br><span class="line">     &#123;% for key, value in result.items() %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">th</span>&gt;</span> &#123;&#123; key &#125;&#125; <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="Flask-Cookies"><a href="#Flask-Cookies" class="headerlink" title="Flask Cookies"></a>Flask Cookies</h3><p>Cookie以文本文件的形式存储在客户端的计算机上。其目的是记住和跟踪与客户使用相关的数据，以获得更好的访问者体验和网站统计信息。</p><p>Request对象包含Cookie的属性。它是所有cookie变量及其对应值的字典对象，客户端已传输。除此之外，cookie还存储其网站的到期时间，路径和域名。<br>在Flask中，对cookie的处理步骤为：</p><p>1.设置cookie：</p><p>设置cookie,默认有效期是临时cookie,浏览器关闭就失效</p><p>可以通过 max_age 设置有效期， 单位是秒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp = make_response(<span class="string">&quot;success&quot;</span>)   <span class="comment"># 设置响应体</span></span><br><span class="line">resp.set_cookie(<span class="string">&quot;chenshifeng&quot;</span>, <span class="string">&quot;shifengboy&quot;</span>, max_age=<span class="number">3600</span>)</span><br></pre></td></tr></table></figure><br><p>2.获取cookie，通过request.cookies的方式， 返回的是一个字典，可以获取字典里的相应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie_1 = request.cookies.get(<span class="string">&quot;chenshifeng&quot;</span>)</span><br></pre></td></tr></table></figure><br><p>3.删除cookie<br>这里的删除只是让cookie过期，并不是直接删除cookie<br>删除cookie，通过delete_cookie()的方式， 里面是cookie的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp = make_response(<span class="string">&quot;del success&quot;</span>)  <span class="comment"># 设置响应体</span></span><br><span class="line">resp.delete_cookie(<span class="string">&quot;chenshifeng&quot;</span>)</span><br></pre></td></tr></table></figure><br><p>以下为Flask Cookies的简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/set_cookies&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>():</span><br><span class="line">    resp = make_response(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    resp.set_cookie(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>,max_age=<span class="number">3600</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/get_cookies&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>():</span><br><span class="line">    cookie_1 = request.cookies.get(<span class="string">&quot;key&quot;</span>)  <span class="comment"># 获取名字为Itcast_1对应cookie的值</span></span><br><span class="line">    <span class="keyword">return</span> cookie_1</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/delete_cookies&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_cookie</span>():</span><br><span class="line">    resp = make_response(<span class="string">&quot;del success&quot;</span>)</span><br><span class="line">    resp.delete_cookie(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-会话"><a href="#Flask-会话" class="headerlink" title="Flask 会话"></a>Flask 会话</h2><p>与Cookie不同，Session（会话）数据存储在服务器上。会话是客户端登录到服务器并注销服务器的时间间隔。需要在该会话中保存的数据会存储在服务器上的临时目录中。</p><p>为每个客户端的会话分配会话ID。会话数据存储在cookie的顶部，服务器以加密方式对其进行签名。对于此加密，Flask应用程序需要一个定义的SECRET_KEY。</p><p>Session对象也是一个字典对象，包含会话变量和关联值的键值对。</p><p>例如，要设置一个’username’会话变量，请使用以下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure><p>要释放会话变量，请使用pop()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, redirect, url_for, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;fkdjsafjdkfdlkjfadskjfadskljdsfklj&#x27;</span>  <span class="comment"># 确保设置应用程序的secret_key</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        username = session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录用户名是:&#x27;</span> + username + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + \</span><br><span class="line">               <span class="string">&quot;&lt;b&gt;&lt;a href = &#x27;/logout&#x27;&gt;点击这里注销&lt;/a&gt;&lt;/b&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;您暂未登录， &lt;br&gt;&lt;a href = &#x27;/login&#x27;&gt;&lt;/b&gt;&quot;</span> + \</span><br><span class="line">           <span class="string">&quot;点击这里登录&lt;/b&gt;&lt;/a&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &lt;form action = &quot;&quot; method = &quot;post&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;p&gt;&lt;input type =&quot;text&quot; name =&quot;username&quot;/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;p&gt;&lt;input type =&quot;submit&quot; value =&quot;登录&quot;/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    <span class="comment"># remove the username from the session if it is there</span></span><br><span class="line"></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>如何生成一个好的密钥<br>生成随机数的关键在于一个好的随机种子，因此一个好的密钥应当有足够的随机性。 操作系统可以有多种方式基于密码随机生成器来生成随机数据。使用下面的命令 可以快捷的为 Flask.secret_key （ 或者 SECRET_KEY ）生成值:<br>$ python -c ‘import os; print(os.urandom(16))’<br>b’_5#y2L”F4Q8z\n\xec]&#x2F;’</p></blockquote><br><h2 id="Flask-重定向和错误"><a href="#Flask-重定向和错误" class="headerlink" title="Flask 重定向和错误"></a>Flask 重定向和错误</h2><p>Flask类有一个redirect()函数。调用时，它返回一个响应对象，并将用户重定向到具有指定状态代码的另一个目标位置。</p><p>redirect()函数的原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flask.redirect(location, statuscode, response)</span><br></pre></td></tr></table></figure><p>在上述函数中：</p><ul><li>location参数是应该重定向响应的URL。</li><li>statuscode发送到浏览器标头，默认为302。</li><li>response参数用于实例化响应。</li></ul><br><p>以下状态代码已标准化：</p><p>HTTP_300_MULTIPLE_CHOICES<br>HTTP_301_MOVED_PERMANENTLY<br>HTTP_302_FOUND<br>HTTP_303_SEE_OTHER<br>HTTP_304_NOT_MODIFIED<br>HTTP_305_USE_PROXY<br>HTTP_306_RESERVED<br>HTTP_307_TEMPORARY_REDIRECT<br>默认状态代码为302，表示’found’。</p><br><p>在以下示例中，redirect()函数用于在登录尝试失败时再次显示登录页面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for, render_template, request</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the Flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;log_in.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> request.form[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;logged in successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>Flask类具有带有错误代码的abort()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flask.abort(code)</span><br></pre></td></tr></table></figure><p>Code参数采用以下值之一：</p><p>400 - 用于错误请求<br>401 - 用于未身份验证的<br>403 - Forbidden<br>404 - 未找到<br>406 - 表示不接受<br>415 - 用于不支持的媒体类型<br>429 - 请求过多<br>让我们对上述代码中的login()函数稍作更改。如果要显示’Unauthurized’页面，请将其替换为调用abort(401)，而不是重新显示登录页面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for, render_template, request, abort</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;log_in.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">401</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;logged in successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-消息闪现"><a href="#Flask-消息闪现" class="headerlink" title="Flask 消息闪现"></a>Flask 消息闪现</h2><p>一个好的基于 GUI 的应用程序会向用户提供有关交互的反馈。例如，桌面应用程序使用对话框或消息框，JavaScript 使用警报用于类似目的。</p><p>在 Flask Web 应用程序中生成这样的信息性消息很容易。Flask 框架的闪现系统可以在一个视图中创建消息，并在名为 next 的视图函数中呈现它。</p><p>Flask 模块包含 flash() 方法。它将消息传递给下一个请求，该请求通常是一个模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash(message, category)</span><br></pre></td></tr></table></figure><ul><li>message 参数是要闪现的实际消息。</li><li>category 参数是可选的。它可以是“error”，“info”或“warning”。</li></ul><p><br>为了从会话中获取消息，模板调用 get_flashed_messages()。</p><p>以下是一个完整的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, flash, redirect, render_template, \</span><br><span class="line">     request, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">b&#x27;_5#y2L&quot;F4Q8z\n\xec]/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> \</span><br><span class="line">           request.form[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;secret&#x27;</span>:</span><br><span class="line">            error = <span class="string">&#x27;Invalid credentials&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&#x27;You were successfully logged in&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>以下是实现闪现的 layout.html 模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>My Application<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">  &#123;% if messages %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">flashes</span>&gt;</span></span><br><span class="line">    &#123;% for message in messages %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br><span class="line">&#123;% block body %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><br><p>以下是继承自 layout.html 的 index.html 模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Overview<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Do you want to <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span>&gt;</span>log in?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><br><p>以下是同样继承自 layout.html 的 login.html 模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  &#123;% if error %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">error</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123; error &#125;&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Username:</span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">username</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">          request.form.username &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Password:</span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Login</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h2 id="Flask-文件上传"><a href="#Flask-文件上传" class="headerlink" title="Flask 文件上传"></a>Flask 文件上传</h2><p>在 Flask 中处理文件上传非常简单。它需要一个 HTML 表单，其 enctype属性设置为’multipart&#x2F;form-data’，将文件发布到 URL。URL 处理程序从 request.files[]对象中提取文件，并将其保存到所需的位置。</p><p>每个上传的文件首先会保存在服务器上的临时位置，然后将其实际保存到它的最终位置。目标文件的名称可以是硬编码的，也可以从 request.files[file]对象的filename属性中获取。但是，建议使用 secure_filename()函数获取它的安全版本。<br>可以在 Flask 对象的配置设置中定义默认上传文件夹的路径和上传文件的最大大小。</p><blockquote><p>app.config[‘UPLOAD_FOLDER’] 定义上传文件夹的路径 app.config[‘MAX_CONTENT_LENGTH’] 指定要上传的文件的最大大小（以字节为单位）</p></blockquote><br><p>以下代码具有 ‘&#x2F;upload’ URL 规则，该规则在 templates 文件夹中显示 ‘upload.html’，以及 ‘&#x2F; upload-file’URL 规则，用于调用 uploader() 函数处理上传过程。<br>‘upload.html’ 有一个文件选择器按钮和一个提交按钮。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>File Upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:5000/uploader&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.jpg,.png&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>以下是 Flask 应用程序的 Python 代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;D:/work/item/pyhon-project/flask-project/flask-test/app/upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/uploader&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uploader</span>():</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">      baseDir = os.path.dirname(__file__)</span><br><span class="line">      path = os.path.join(baseDir,<span class="string">&#x27;upload&#x27;</span>,f.filename)</span><br><span class="line">      f.save(path)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;file uploaded successfully&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run()</span><br></pre></td></tr></table></figure><br><h2 id="Flask-扩展"><a href="#Flask-扩展" class="headerlink" title="Flask 扩展"></a>Flask 扩展</h2><p>Flask通常被称为微框架，因为核心功能包括基于Werkzeug的WSGI和路由以及基于Jinja2的模板引擎。此外，Flask框架还支持cookie和会话，以及JSON，静态文件等Web帮助程序。显然，这不足以开发完整的Web应用程序。而Flask扩展就具备这样的功能。Flask扩展为Flask框架提供了可扩展性。</p><p>有大量的Flask扩展可用。Flask扩展是一个Python模块，它向Flask应用程序添加了特定类型的支持。Flask Extension Registry（Flask扩展注册表）是一个可用的扩展目录。可以通过pip实用程序下载所需的扩展名。</p><p>在本教程中，我们将讨论以下重要的Flask扩展：</p><ul><li>Flask Mail - 为Flask应用程序提供SMTP接口</li><li>Flask WTF - 添加WTForms的渲染和验证</li><li>Flask SQLAlchemy - 为Flask应用程序添加SQLAlchemy支持</li><li>Flask Sijax - Sijax的接口 - Python&#x2F;jQuery库，使AJAX易于在Web应用程序中使用</li></ul><p>每种类型的扩展通常提供有关其用法的大量文档。由于扩展是一个Python模块，因此需要导入它才能使用它。Flask扩展名通常命名为flask-foo。导入的操作如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_foo <span class="keyword">import</span> [<span class="keyword">class</span>, function]</span><br></pre></td></tr></table></figure><p>对于0.7以后的Flask版本，您还可以使用语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext <span class="keyword">import</span> foo</span><br></pre></td></tr></table></figure><p>对于此用法，需要激活兼容性模块。它可以通过运行flaskext_compat.py来安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flaskext_compat</span><br><span class="line">flaskext_compat.activate()</span><br><span class="line"><span class="keyword">from</span> flask.ext <span class="keyword">import</span> foo</span><br></pre></td></tr></table></figure><br><h3 id="Flask-邮件"><a href="#Flask-邮件" class="headerlink" title="Flask 邮件"></a>Flask 邮件</h3><p>服务器建立简单的接口变得非常容易。</p><p>首先，应该在pip实用程序的帮助下安装Flask-Mail扩展。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask-Mail</span><br></pre></td></tr></table></figure><p>然后需要通过设置以下应用程序参数的值来配置Flask-Mail。</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">MAIL_SERVER</td><td align="center">电子邮件服务器的名称&#x2F;IP地址</td></tr><tr><td align="center">MAIL_PORT</td><td align="center">使用的服务器的端口号</td></tr><tr><td align="center">MAIL_USE_TLS</td><td align="center">启用&#x2F;禁用传输安全层加密</td></tr><tr><td align="center">MAIL_USE_SSL</td><td align="center">启用&#x2F;禁用安全套接字层加密</td></tr><tr><td align="center">MAIL_DEBUG</td><td align="center">调试支持。默认值是Flask应用程序的调试状态</td></tr><tr><td align="center">MAIL_USERNAME</td><td align="center">发件人的用户名</td></tr><tr><td align="center">MAIL_PASSWORD</td><td align="center">发件人的密码</td></tr><tr><td align="center">MAIL_DEFAULT_SENDER</td><td align="center">设置默认发件人</td></tr><tr><td align="center">MAIL_MAX_EMAILS</td><td align="center">设置要发送的最大邮件数</td></tr><tr><td align="center">MAIL_SUPPRESS_SEND</td><td align="center">如果app.testing设置为true，则发送被抑制</td></tr><tr><td align="center">MAIL_ASCII_ATTACHMENTS</td><td align="center">如果设置为true，则附加的文件名将转换为ASCII</td></tr></tbody></table><p>flask-mail模块包含以下重要类的定义。</p><h4 id="Mail类"><a href="#Mail类" class="headerlink" title="Mail类"></a>Mail类</h4><p>它管理电子邮件消息传递需求。类构造函数采用以下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-mail.Mail(app = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>构造函数将Flask应用程序对象作为参数。<br>Mail类的方法：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">send()</td><td align="center">发送Message类对象的内容</td></tr><tr><td align="center">connect()</td><td align="center">打开与邮件主机的连接</td></tr><tr><td align="center">send_message()</td><td align="center">发送消息对象</td></tr></tbody></table><br><h4 id="Message类"><a href="#Message类" class="headerlink" title="Message类"></a>Message类</h4><p>它封装了一封电子邮件。Message类构造函数有几个参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-mail.Message(subject, recipients, body, html, sender, cc, bcc, reply-to, date, charset, extra_headers, mail_options,rcpt_options)</span><br></pre></td></tr></table></figure><p>Message类方法：</p><ul><li><p>attach() - 为邮件添加附件。此方法采用以下参数：</p><ul><li>filename - 要附加的文件的名称</li><li>content_type - MIME类型的文件</li><li>data - 原始文件数据</li><li>处置 - 内容处置（如果有的话）。</li></ul></li><li><p>add_recipient() - 向邮件添加另一个收件人</p></li></ul><p>在下面的示例中，使用QQ邮箱服务的SMTP服务器用作Flask-Mail配置的MAIL_SERVER。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail, Message</span><br><span class="line"></span><br><span class="line">app =Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_SERVER&#x27;</span>]=<span class="string">&#x27;smtp.qq.com&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PORT&#x27;</span>] = <span class="number">465</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USERNAME&#x27;</span>] = <span class="string">&#x27;qqaccount@qq.com&#x27;</span></span><br><span class="line"><span class="comment"># 授权密钥</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_PASSWORD&#x27;</span>] = <span class="string">&#x27;flquiyadlhirbeba&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_TLS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">app.config[<span class="string">&#x27;MAIL_USE_SSL&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">mail=Mail(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">   msg = Message(<span class="string">&#x27;Hello&#x27;</span>, sender = <span class="string">&#x27;senderqqaccount@qq.com&#x27;</span>, recipients = [<span class="string">&#x27;recipientsqqaccount@qq.com&#x27;</span>])</span><br><span class="line">   msg.body = <span class="string">&quot;Hello Flask message sent from Flask-Mail&quot;</span></span><br><span class="line">   mail.send(msg)</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Sent&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask-SQLAlchemy"><a href="#Flask-SQLAlchemy" class="headerlink" title="Flask SQLAlchemy"></a>Flask SQLAlchemy</h2><p>步骤1 - 安装Flask-SQLAlchemy扩展。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure><p>步骤2 - 您需要从此模块导入SQLAlchemy类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br></pre></td></tr></table></figure><p>步骤3 - 现在创建一个Flask应用程序对象并为要使用的数据库设置URI。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///students.sqlite3&#x27;</span></span><br></pre></td></tr></table></figure><p>步骤4 - 然后使用应用程序对象作为参数创建SQLAlchemy类的对象。该对象包含用于ORM操作的辅助函数。它还提供了一个父Model类，使用它来声明用户定义的模型。在下面的代码段中，创建了students模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy(app)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">students</span>(db.Model):</span><br><span class="line">   <span class="built_in">id</span> = db.Column(<span class="string">&#x27;student_id&#x27;</span>, db.Integer, primary_key = <span class="literal">True</span>)</span><br><span class="line">   name = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">   city = db.Column(db.String(<span class="number">50</span>))  </span><br><span class="line">   addr = db.Column(db.String(<span class="number">200</span>))</span><br><span class="line">   pin = db.Column(db.String(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, city, addr,pin</span>):</span><br><span class="line">   self.name = name</span><br><span class="line">   self.city = city</span><br><span class="line">   self.addr = addr</span><br><span class="line">   self.pin = pin</span><br></pre></td></tr></table></figure><p>步骤5 - 要创建&#x2F;使用URI中提及的数据库，请运行create_all()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p>SQLAlchemy的Session对象管理ORM对象的所有持久性操作。<br>以下session方法执行CRUD操作：</p><ul><li><p>db.session.add (模型对象) - 将记录插入到映射表中</p></li><li><p>db.session.delete (模型对象) - 从表中删除记录</p></li><li><p>model.query.all() - 从表中检索所有记录（对应于SELECT查询）。</p></li></ul><p>您可以通过使用filter属性将过滤器应用于检索到的记录集。例如，要在学生表中检索city &#x3D;’Hyderabad’的记录，请使用以下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Students.query.filter_by(city = <span class="string">&#x27;Hyderabad&#x27;</span>).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><p>有了这么多的背景，现在我们将为我们的应用程序提供视图函数来添加学生数据。</p><p>应用程序的入口点是绑定到’&#x2F;’ URL的show_all()函数。学生表的记录集作为参数发送到HTML模板。模板中的服务器端代码以HTML表格形式呈现记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_all</span>():</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&#x27;show_all.html&#x27;</span>, students = students.query.<span class="built_in">all</span>() )</span><br></pre></td></tr></table></figure><br><p>模板（’show_all.html’）的HTML脚本如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span> = <span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;show_all&#x27;) &#125;&#125;&quot;</span>&gt;</span>Comments - Flask </span><br><span class="line">            SQLAlchemy example<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      &#123;%- for message in get_flashed_messages() %&#125;</span><br><span class="line">         &#123;&#123; message &#125;&#125;</span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Students (<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;new&#x27;) &#125;&#125;&quot;</span>&gt;</span>Add Student</span><br><span class="line">         <span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>City<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>Pin<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            &#123;% for student in students %&#125;</span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.city &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.addr &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.pin &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述网页包含指向’&#x2F; new’ URL映射new()函数的超链接。单击时，将打开“学生信息”表单。 数据在 POST方法中发布到相同的URL。</p><br><p>模板（’new.html’）的HTML脚本如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Students - Flask SQLAlchemy example<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      </span><br><span class="line">      &#123;%- for category, message in get_flashed_messages(with_categories = true) %&#125;</span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;&#123;&#123; request.path &#125;&#125;&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;name&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;email&quot;</span>&gt;</span>City<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;city&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;city&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;addr&quot;</span>&gt;</span>addr<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span> = <span class="string">&quot;addr&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;addr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;PIN&quot;</span>&gt;</span>PINCODE<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;pin&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;pin&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>当http方法被检测为POST时，表单数据被添加到学生表中，并且应用返回到显示添加数据的主页。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/new&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>():</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;city&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;addr&#x27;</span>]:</span><br><span class="line">         flash(<span class="string">&#x27;Please enter all the fields&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         student = students(request.form[<span class="string">&#x27;name&#x27;</span>], request.form[<span class="string">&#x27;city&#x27;</span>],</span><br><span class="line">            request.form[<span class="string">&#x27;addr&#x27;</span>], request.form[<span class="string">&#x27;pin&#x27;</span>])</span><br><span class="line">         </span><br><span class="line">         db.session.add(student)</span><br><span class="line">         db.session.commit()</span><br><span class="line">         </span><br><span class="line">         flash(<span class="string">&#x27;Record was successfully added&#x27;</span>)</span><br><span class="line">         <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_all&#x27;</span>))</span><br><span class="line">   <span class="keyword">return</span> render_template(<span class="string">&#x27;new.html&#x27;</span>)</span><br></pre></td></tr></table></figure><br><p>下面给出了应用程序（app.py）的完整代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, flash, url_for, redirect, render_template</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///students.sqlite3&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;random string&quot;</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">students</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(<span class="string">&#x27;student_id&#x27;</span>, db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    city = db.Column(db.String(<span class="number">50</span>))</span><br><span class="line">    addr = db.Column(db.String(<span class="number">200</span>))</span><br><span class="line">    pin = db.Column(db.String(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, city, addr, pin</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.city = city</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.pin = pin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_all</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;show_all.html&#x27;</span>, students=students.query.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/new&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;city&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;addr&#x27;</span>]:</span><br><span class="line">            flash(<span class="string">&#x27;Please enter all the fields&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            student = students(request.form[<span class="string">&#x27;name&#x27;</span>], request.form[<span class="string">&#x27;city&#x27;</span>],</span><br><span class="line">                               request.form[<span class="string">&#x27;addr&#x27;</span>], request.form[<span class="string">&#x27;pin&#x27;</span>])</span><br><span class="line"></span><br><span class="line">            db.session.add(student)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            flash(<span class="string">&#x27;Record was successfully added&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_all&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;new.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    db.create_all()</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Flask插件"><a href="#Flask插件" class="headerlink" title="Flask插件"></a>Flask插件</h2><h3 id="Flask-cache"><a href="#Flask-cache" class="headerlink" title="Flask-cache"></a>Flask-cache</h3><p>缓存数据</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-cache</span><br></pre></td></tr></table></figure><br><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cache <span class="keyword">import</span> Cache</span><br><span class="line">cache = Cache(config=&#123;</span><br><span class="line">    <span class="string">&#x27;CACHE_TYPE&#x27;</span>:<span class="string">&#x27;simple&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache.cached(<span class="params">timeout=<span class="number">3600</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;loading...&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;home&#x27;</span></span><br></pre></td></tr></table></figure><br><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p><strong>什么是钩子（中间件Middleware)</strong><br>钩子或叫钩子函数，是指在执行函数和目标函数之间挂载的函数，框架开发者给调用方提供一个point-挂载点，是一种AoP切面编程思想.</p><p><strong>常用的钩子函数</strong></p><ul><li>before_first_request：处理第一次请求之前执行．</li><li>before_request：在每次请求之前执行．通常使用这个钩子函数预处理一些变量，实现反爬等．</li><li>after_request：注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行．</li><li>teardown_appcontext：当APP上下文被移除之后执行的函数,可以进行数据库的提交或者回滚．</li></ul><br><p><strong>AOP反爬策略</strong></p><p>防止非浏览器访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_bef</span>():</span><br><span class="line">   <span class="built_in">print</span>(request.user_agent)</span><br><span class="line">   <span class="keyword">if</span>(<span class="string">&#x27;python&#x27;</span> <span class="keyword">in</span> request.user_agent.string):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;你正在使用python爬虫，再见！&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;good bye&#x27;</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用缓存反爬，相同ip地址1秒内不允许重复访问</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_bef</span>():</span><br><span class="line">   <span class="comment"># 针对ip做反爬</span></span><br><span class="line">   ip = request.remote_addr</span><br><span class="line">   <span class="keyword">if</span> cache.get(ip):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;小伙子别爬了&#x27;</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      cache.<span class="built_in">set</span>(<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;value&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10分钟学会网络请求的一切</title>
      <link href="/2023/08/21/%E5%89%8D%E7%AB%AF/10%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9A%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%80%E5%88%87/"/>
      <url>/2023/08/21/%E5%89%8D%E7%AB%AF/10%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9A%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%80%E5%88%87/</url>
      
        <content type="html"><![CDATA[<h1 id="10分钟学会网络请求"><a href="#10分钟学会网络请求" class="headerlink" title="10分钟学会网络请求"></a>10分钟学会网络请求</h1><h2 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h2><p><strong>get请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置请求方式、请求地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置请求头</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求状态</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求成功，状态码为200时执行</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="title class_">XMLHttpRequest</span>.<span class="property">DONE</span> &amp;&amp; xhr.<span class="property">status</span> ===<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>post请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://localhost:5000/post&#x27;</span>,<span class="literal">true</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name=ysk&amp;age=22&#x27;</span>)</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="title class_">XMLHttpRequest</span>.<span class="property">DONE</span> &amp;&amp; xhr.<span class="property">status</span> ===<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Axios请求"><a href="#Axios请求" class="headerlink" title="Axios请求"></a>Axios请求</h2><p><strong>get请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> res_get = <span class="keyword">await</span> request.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;asd&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res_get);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><strong>post请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    request.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res_post = <span class="keyword">await</span> request.<span class="title function_">post</span>(<span class="string">&quot;/post&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;asd&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res_post);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>首先需要了解到浏览器的同源策略，同源策略是最核心也是最基本的安全功能，缺少同源策略浏览器的正常功能可能会受到影响。同源策略会阻止一个域的javascript脚本和另外一个域的能容进行交互。同源（即指在同一个域）就是两个页面具有相同的协议（protocol）、主机（host）和端口号（port）。</p><blockquote><p>当一个请求url的<strong>协议、域名、端口</strong>三个之间<strong>任意一个</strong>与当前页面url不同即为跨域。</p></blockquote><h3 id="Vue中用Axios解决跨域问题"><a href="#Vue中用Axios解决跨域问题" class="headerlink" title="Vue中用Axios解决跨域问题"></a>Vue中用Axios解决跨域问题</h3><blockquote><p> 配置代理可解决使用Axios不能直接进行跨域的问题。</p></blockquote><p><strong>原理</strong>：客户端请求服务端的数据存在跨域问题，而服务器和服务器之间可以相互请求数据，没有跨域的概念（前提是服务器没有设置禁止跨域的权限问题），也就是说，可以配置一个代理的服务器请求另一个服务器中的数据，然后把请求出来的数据返回到代理服务器中，代理服务器再返回数据给我们的客户端，如此即可实现跨域访问数据。<img src="https://img-blog.csdnimg.cn/20210914001700652.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6L-b5Ye76Zi_5paH,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p><strong>步骤一：配置baseURL</strong>,（即下面代码段中的 axios.defaults.baseURL &#x3D; ‘&#x2F;api&#x2F;‘，作用是我们每次发送的请求都会带一个&#x2F;api&#x2F;的前缀。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 配置请求的根路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;/api/&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>步骤二：配置代理</strong>，（配置在vue.config.js文件中的proxyTable字段中）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dev</span>: &#123;</span><br><span class="line">    <span class="attr">proxyTable</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>:<span class="string">&#x27;http://127.0.0.1:8888/api/private/v1/&#x27;</span>, <span class="comment">// 你请求的第三方接口</span></span><br><span class="line">        <span class="attr">changeOrigin</span>:<span class="literal">true</span>, <span class="comment">/* 在本地会创建一个虚拟服务端，然后发送请求的数据，</span></span><br><span class="line"><span class="comment">        并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题 */</span></span><br><span class="line">        <span class="attr">pathRewrite</span>:&#123;  <span class="comment">// 路径重写，</span></span><br><span class="line">            <span class="comment">/* 替换target中的请求地址，也就是说以后你在请求</span></span><br><span class="line"><span class="comment">            http://127.0.0.1:8888/api/private/v1/这个地址的时候直接写成/api/即可。 */</span></span><br><span class="line">          <span class="string">&#x27;^/api/&#x27;</span>: <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>最后附上一个详细的vue.config.js的配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">// 项目部署的基础路径</span></span><br><span class="line"><span class="comment">// 我们默认你的应用将会部署在域名的根部，比如 https://www.xxx.com/</span></span><br><span class="line"><span class="comment">// 如果你的应用时部署在一个子路径下，那么你需要在这里指定子路径。</span></span><br><span class="line"><span class="comment">// 比如，如果你的应用部署在https://www.xxx.com/public/</span></span><br><span class="line"><span class="comment">// 那么将这个值改为 `/public/`</span></span><br><span class="line"><span class="comment">// 部署生产环境和开发环境下的URL：可对当前环境进行区分，baseUrl 从 Vue CLI 3.3 起已弃用，要使用publicPath </span></span><br><span class="line"><span class="comment">/* baseUrl: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;./&#x27; : &#x27;/&#x27; */</span></span><br><span class="line"><span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;/public/&#x27;</span> : <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line"><span class="comment">/* 输出文件目录：在npm run build时，生成文件的目录名称 */</span></span><br><span class="line"><span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line"><span class="comment">/* 放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录 */</span></span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&quot;assets&quot;</span>,</span><br><span class="line">    <span class="comment">/* 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度 */</span></span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">/* 默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存，你可以通过将这个选项设为 false 来关闭文件名哈希。(false的时候就是让原来的文件名不改变) */</span></span><br><span class="line">    <span class="attr">filenameHashing</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">/* 代码保存时进行eslint检测 */</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/* webpack-dev-server 相关配置 */</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="comment">/* 自动打开浏览器 */</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/* 设置为0.0.0.0则所有的地址均能访问 */</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8066</span>,</span><br><span class="line">        <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">hotOnly</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">/* 使用代理 */</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123; <span class="comment">// string | Object</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">/* 目标代理服务器地址 */</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://xxx/&#x27;</span>,</span><br><span class="line">                <span class="comment">/* 允许跨域 */</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//规定请求地址以什么作为开头</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> axios </tag>
            
            <tag> fetch api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6+学习笔记</title>
      <link href="/2023/08/21/%E5%89%8D%E7%AB%AF/ES6+%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/21/%E5%89%8D%E7%AB%AF/ES6+%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构的顺序不需要对应</span></span><br><span class="line"><span class="keyword">let</span> &#123;bar,foo&#125;=&#123;<span class="attr">foo</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">bar</span>:<span class="string">&quot;bbb&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值改名</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">left</span>: L,<span class="attr">top</span>: T&#125;=&#123;<span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">200</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多重解构</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>:[a,b] &#125;=&#123;<span class="attr">foo</span>: [<span class="number">10</span>,<span class="number">20</span>], <span class="attr">bar</span>: <span class="string">&quot;bbb&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//len: 4</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span>: len&#125;=<span class="string">&#x27;qwer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ts: Number.prototype.toString</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: ts&#125;=<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h1><p>扩展运算符：…</p><p>把数组&#x2F;对象转成参数序列（使用逗号分隔的序列）</p><p>[‘a’,’b’,’c’]&#x3D;&gt; ‘a’ ,’b’,’c’</p><p>{a,b,c}&#x3D;&gt;a,b,c</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用法1</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> max=<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//用法2</span></span><br><span class="line"><span class="keyword">let</span> obj1=&#123;<span class="attr">left</span>:<span class="number">100</span>, <span class="attr">right</span>:<span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">width</span>:<span class="number">20</span>, <span class="attr">height</span>:<span class="number">30</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj3=&#123;</span><br><span class="line">    ...obj1,</span><br><span class="line">    ...obj2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h1><p>能在函数中获取调用时传入的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">//[1,2,3]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>内部this对象指向创建期上下文对象</p><p>普通函数的this指向是在函数的执行期绑定的（确定的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//指向window</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">obj.<span class="property">f</span>=<span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span>=fn; <span class="comment">//指向触发该事件的对象 document</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数的this在函数创建期间就绑定好了，箭头函数的this指向创建该箭头函数所在的作用域对象（this）</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>String、Number、Array、Object、<strong>Set、WeakSet、Map、WeakMap</strong></p><p>去看api文档&#x3D;&gt;<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">v,k,s</span>)&#123;</span><br><span class="line">    <span class="comment">//v：每项的值，k：索引，s：循环的数组</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//every：每一项符合条件就返回true</span></span><br><span class="line"><span class="keyword">let</span> res=arr.<span class="title function_">every</span>(<span class="function"><span class="params">v</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v&gt;<span class="number">5</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//some：其中一项满足条件就返回true</span></span><br><span class="line"><span class="keyword">let</span> res=arr.<span class="title function_">some</span>(<span class="function"><span class="params">v</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v&gt;<span class="number">5</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//filter：新数组的值与原数组一致，但长度不一致</span></span><br><span class="line"><span class="keyword">let</span> res=arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v&gt;<span class="number">5</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//map：新数组的值与原数组不一致，但长度一致</span></span><br><span class="line"><span class="keyword">let</span> res=arr.<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v*<span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce：对数组进行累加 prev：上一次遍历的结果，current：当前的值</span></span><br><span class="line"><span class="keyword">let</span> res=arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, current</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> prev+current;</span><br><span class="line">&#125;,<span class="number">0</span>) <span class="comment">// 0表示结果的初始值</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1=&#123;x :<span class="number">1</span>, y=<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">x</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//assign：将多个数组融合到一个数组中，将obj1和&#123;&#125;拷贝到obj2，浅拷贝，一个对象的值改变，另一个对象的值也改变</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2,obj1,&#123;<span class="attr">x</span>: <span class="number">100</span>,<span class="attr">y</span>: <span class="number">200</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//create：</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;<span class="attr">a</span>:<span class="number">100</span>,<span class="attr">b</span>:<span class="number">200</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4=&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">//defineProperty： 向一个对象添加一个属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj4,<span class="string">&#x27;z&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">//描述了该属性的一些细节，默认&#x27;z&#x27;这个属性，不可修改，不可枚举</span></span><br><span class="line">    <span class="attr">value</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">//可写</span></span><br><span class="line">    <span class="attr">enumberable</span>: <span class="literal">true</span> <span class="comment">//可枚举</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s=<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// set.add(value) 添加一个数据,返回Set结构本身</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;b&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set.delete(value) 删除指定数据，返回布尔值，表示是否删除成功</span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// set.has(value) 判断该值是否未Set的成员，返回一个布尔值</span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// set.clear() 清除所有数据，没有返回值</span></span><br><span class="line">s.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// keys() 返回键名的遍历器</span></span><br><span class="line">s.<span class="title function_">keys</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// values() 返回键值的遍历器</span></span><br><span class="line">s.<span class="title function_">values</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// entries() 返回键值对的遍历器</span></span><br><span class="line">s.<span class="title function_">entries</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach() 使用回调函数遍历每个成员</span></span><br><span class="line">s.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value,key,set</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m=<span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// set(key,value)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get(key)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// delete(key)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has(key)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keys()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// values()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// entries()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach()</span></span><br></pre></td></tr></table></figure><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>子类继承父类 使用 <strong>extends</strong> 关键字</p><p>为父类指定静态方法，使用 <strong>static 方法名字</strong></p><ul><li>super：<ul><li>在构造函数中可以当一个函数来使用，相当于调用父类的构造函数</li><li>在原型方法上，可以当一个对象来使用，相当于父类的原型对象，并且会自动绑定this到类上</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span>&#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y,r</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板字符串</span></span><br><span class="line"><span class="keyword">let</span> html=<span class="string">`&lt;ul&gt;<span class="subst">$&#123;<span class="string">&#x27;xxx&#x27;</span>&#125;</span>&lt;/ul&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="comment">//aaa</span></span><br><span class="line">str.<span class="title function_">repeat</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否包含某个字符</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否以某个字符开头</span></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否以某个字符结尾</span></span><br><span class="line">str.<span class="title function_">endWith</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.from()：转为真正的数组</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(lis)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.of()：生成数组</span></span><br><span class="line"><span class="keyword">const</span> str=<span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//find()：返回符合条件的元素</span></span><br><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> res=arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//findIndex()：返回符合条件的元素的索引</span></span><br><span class="line"><span class="keyword">let</span> res=arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//fill()：改变数组中的每一个元素,从[1,3)</span></span><br><span class="line"><span class="comment">//[1,&#x27;abc&#x27;,&#x27;abc&#x27;,4]</span></span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简洁写法</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br><span class="line">obj.<span class="title function_">fn2</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.is(a,b)：判断a和b是否一样</span></span><br><span class="line"><span class="comment">//Object.assign()：用于对象的合并，将源对象的所有可枚举的属性，复制到目标</span></span><br><span class="line"><span class="keyword">let</span> obj1=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj3=&#123;<span class="attr">c</span>:<span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//将obj2和3合并到obj1中</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1,obj2,obj3)</span><br></pre></td></tr></table></figure><h2 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//形参中设置默认的值一般在后边</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">x, y=<span class="number">0</span></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>promise是ES6中新增的异步编程解决方案，体现在代码中它是一个对象，</p><p>可以通过Promise构造函数来实例化。</p><p>new Promise(cb)&#x3D;&#x3D;&#x3D;&gt; 实例的基本使用 Pending Resolved Rejected</p><p>调用resolved（成功）、rejected（失败）改变任务的状态</p><ul><li><p>两个原型方法：</p><ul><li>Promise.prototype.then()</li><li>Promise.prototype.catch()</li></ul></li><li><p>两个常用的静态方法：</p><ul><li><p>Promise.all()</p></li><li><p>Promise.resolve()</p></li></ul></li></ul><p>new Promise(cb)</p><p>Pending（进行中） &#x3D;&#x3D;&#x3D;&gt; Resolved（已完成）</p><p>Pending（进行中） &#x3D;&#x3D;&#x3D;&gt; Rejected（已失败）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本案例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">100</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//data=100</span></span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//err=&#x27;出错了&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法1</span></span><br><span class="line"><span class="comment">//创建Promise对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">src</span>=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">    <span class="comment">//成功时调用</span></span><br><span class="line">    img.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//失败时调用</span></span><br><span class="line">    img.<span class="property">onerror</span>=<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//promise完成时调用,异步</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">img</span>)&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;,<span class="comment">//失败时</span></span><br><span class="line">  <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用方法2</span></span><br><span class="line"><span class="comment">//创建Promise对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">src</span>=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">    <span class="comment">//成功时调用</span></span><br><span class="line">    img.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//失败时调用</span></span><br><span class="line">    img.<span class="property">onerror</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;图片加载失败&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//promise完成时调用,异步</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">img</span>)&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法3，封装</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">      img.<span class="property">src</span>=url;</span><br><span class="line">      <span class="comment">//成功时调用</span></span><br><span class="line">      img.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">//失败时调用</span></span><br><span class="line">      img.<span class="property">onerror</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;图片加载失败&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//promise完成时调用,异步</span></span><br><span class="line"><span class="title function_">loadImg</span>(<span class="string">&#x27;xxx&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">img</span>)&#123;</span><br><span class="line">    <span class="comment">//body中加入图片</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise.all()：所有promise返回成功，Promise.some()：其中一个promise返回成功</span></span><br><span class="line"><span class="keyword">const</span> allDone=<span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">loadImg</span>(<span class="string">&#x27;xxx1&#x27;</span>),<span class="title function_">loadImg</span>(<span class="string">&#x27;xxx2&#x27;</span>),<span class="title function_">loadImg</span>(<span class="string">&#x27;xxx3 &#x27;</span>)])</span><br><span class="line"></span><br><span class="line">allDone.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">datas</span>)&#123;</span><br><span class="line">    datas.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,i</span>)&#123;</span><br><span class="line">        ducument.<span class="property">body</span>.<span class="title function_">appendChild</span>(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise.resolve()：参数是Promise实例，将不做任何修改，原封不动地返回这个实例</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">loadImg</span>(<span class="string">&#x27;xxx&#x27;</span>)).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">img</span>)&#123;</span><br><span class="line">    d.<span class="property">b</span>.<span class="title function_">aC</span>(img)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Promise.resolve()的使用2</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;</span><br><span class="line">    <span class="title function_">then</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> img=<span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">src</span>=imgs[<span class="number">1</span>];</span><br><span class="line">        img.<span class="property">onLoad</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">img</span>)&#123;</span><br><span class="line">    d.<span class="property">b</span>.<span class="title function_">aC</span>(img)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记</title>
      <link href="/2023/08/21/%E5%89%8D%E7%AB%AF/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/21/%E5%89%8D%E7%AB%AF/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h1><p><strong>查看版本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V / vue --version</span><br></pre></td></tr></table></figure><p><strong>创建项目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure><h2 id="编程式导航："><a href="#编程式导航：" class="headerlink" title="编程式导航："></a>编程式导航：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="comment">// name:xxx</span></span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;xxx?xxx=xx&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">666</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">  <span class="comment">// name:xxx</span></span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;xxx?xxx=xx&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">666</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()</span><br><span class="line"><span class="comment">// 前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//前进、后退x步(+-x)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(x)</span><br></pre></td></tr></table></figure><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h4 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child :money.sync=&quot;money=$event&quot;&gt;&lt;/child&gt;</span><br><span class="line">  等同于</span><br><span class="line">  &lt;child :money=&quot;money&quot; @update:money=&quot;money=$event&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">      data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">              money:100</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> obj2= &#123;<span class="attr">y</span>:<span class="number">2</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,x,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> obj.<span class="property">x</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">x</span> = value</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>点击事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;showInfo($event)&quot;&gt;点击获取信息&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            name:&#x27;ysk&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          showInfo(event)&#123;</span><br><span class="line">            console.log(event)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><h3 id="prevent"><a href="#prevent" class="headerlink" title="prevent"></a>prevent</h3><p>阻止默认事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">                    &lt;!-- // 阻止默认事件（不进行地址跳转） --&gt;</span><br><span class="line">    &lt;a href=&quot;www.baidu.com&quot; @click.prevent=&quot;showInfo()&quot;&gt;点击获取信息&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            name:&#x27;ysk&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          showInfo(event)&#123;</span><br><span class="line">            // 阻止默认事件（不进行地址跳转）</span><br><span class="line">            e.preventDefault()</span><br><span class="line">            console.log(event)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><p>阻止事件冒泡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div @click=&quot;showInfo()&quot;&gt;</span><br><span class="line">        &lt;!-- .stop：阻止外层事件触发 --&gt;</span><br><span class="line">      &lt;button @click.stop=&quot;showInfo()&quot;&gt;点击获取信息&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            name:&#x27;ysk&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          showInfo(event)&#123;</span><br><span class="line">            console.log(event)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="once"><a href="#once" class="headerlink" title="once"></a>once</h3><p>事件只能触发一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click.once=&quot;showInfo&quot;&gt;点击获取信息&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            name:&#x27;ysk&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          showInfo(event)&#123;</span><br><span class="line">            console.log(event)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="capture"><a href="#capture" class="headerlink" title="capture"></a>capture</h3><p>使用事件的捕获模式（触发内层的事件时，不冒泡触发，而是外层先触发）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div @click,capture=&quot;showMsg(1)&quot;&gt;</span><br><span class="line">      div1</span><br><span class="line">      &lt;div @click=&quot;showMsg(2)&quot;&gt;</span><br><span class="line">        div2   </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            name:&#x27;ysk&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          showMsg(msg)&#123;</span><br><span class="line">            console.log(msg)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="passive"><a href="#passive" class="headerlink" title="passive"></a>passive</h3><p>事件的默认行为立即执行，无需等待事件执行完毕</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul @wheel.passive=&quot;demo&quot;&gt;</span><br><span class="line">      &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            name:&#x27;ysk&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          demo()&#123;</span><br><span class="line">            </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>@keyup.</p><p>@keydown.</p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>有缓存，比使用methods好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    姓：&lt;input type=&quot;text&quot; :value=&quot;firstName&quot;/&gt;</span><br><span class="line">    名：&lt;input type=&quot;text&quot; :value=&quot;lastName&quot;/&gt;</span><br><span class="line">    全名：&lt;span&gt;&#123;&#123;&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line">            firstName:&#x27;&#x27;,</span><br><span class="line">            lastName:&#x27;&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">          // 简写，只考虑读取值，不考虑修改</span><br><span class="line">          fullName()&#123;</span><br><span class="line">              return this.firstName+&#x27;-&#x27;+this.lastName</span><br><span class="line">          &#125;</span><br><span class="line">          //---------------------</span><br><span class="line">          fullName:&#123;</span><br><span class="line">            get()&#123;</span><br><span class="line">              return this.firstName+&#x27;-&#x27;+this.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            set(value)&#123;</span><br><span class="line">              const arr=value.split(&#x27;-&#x27;)</span><br><span class="line">              this.firstName=arr[0]</span><br><span class="line">              this.lastName=arr[1]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><p>属性发生改变时触发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    姓：&lt;input type=&quot;text&quot; :value=&quot;firstName&quot;/&gt;</span><br><span class="line">    名：&lt;input type=&quot;text&quot; :value=&quot;lastName&quot;/&gt;</span><br><span class="line">    全名：&lt;span&gt;&#123;&#123;&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        data：&#123;</span><br><span class="line">          isHot:true</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">          isHot:&#123;</span><br><span class="line">            // 一开始就触发（初始化时让handler调用一下）</span><br><span class="line">            immediate:true,</span><br><span class="line">            // 开启深度监视</span><br><span class="line">            deep:true,</span><br><span class="line">            handler(newValue,oldValue)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          &lt;!-- 简写 --&gt;</span><br><span class="line">          isHot(newVal,oldVal)&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    // 另一种写法</span><br><span class="line">    vm.$watch(&#x27;isHot&#x27;,&#123;</span><br><span class="line">        immediate:true,</span><br><span class="line">        handler(newValue,oldValue)&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>根据条件是否渲染出元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;n===1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div v-else-if=&quot;n===2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div v-else&gt;3&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        n:1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><p>arr.filter((v)&#x3D;&gt;{return })</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;/&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item,index) in person&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;person.id&#125;&#125;-&#123;&#123;person.name&#125;&#125;-&#123;&#123;person.age&#125;&#125;</span><br><span class="line">    &lt;/li&gt;    </span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        person:[</span><br><span class="line">          &#123;id:1,name:&#x27;aa&#x27;,age:11&#125;,</span><br><span class="line">          &#123;id:2,name:&#x27;aa&#x27;,age:11&#125;,</span><br><span class="line">          &#123;id:3,name:&#x27;cc&#x27;,age:11&#125;</span><br><span class="line">        ],</span><br><span class="line">        keyword:&#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      // 过滤出包含关键词的角色</span><br><span class="line">      keyword(value)&#123;</span><br><span class="line">        this.person = this.person.filter((p)=&gt;&#123;</span><br><span class="line">          return p.name.indexOf(value)!==-1</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">// 升序：a1-a2 降序：a2-a1</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a1,a2</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a1-a2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue-set-方法"><a href="#Vue-set-方法" class="headerlink" title="Vue.set()方法"></a>Vue.set()方法</h2><p>为响应式对象添加属性，是响应式的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;aa&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h2><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>在数组最后添加一个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      arr:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    editArr()&#123;</span><br><span class="line">      this.arr.push(&#x27;d&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>删除数组最后一个数据</p><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p>删除数组第一个数据</p><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><p>在数组最前面添加数据</p><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>替换操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      arr:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    editArr()&#123;</span><br><span class="line">      // 从arr数组索引0开始删除1个元素，替换为元素&#x27;d&#x27;  arr:[&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">      this.arr.splice(0,1,&#x27;d&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>、</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>数组排序</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>数组反转</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>类似computed</p><p>属性 | 过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;</span><br><span class="line">        现在是：&#123;&#123;time | timeFormat&#125;&#125;</span><br><span class="line">    &lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      time:1652222222333 //时间戳</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    timeFormat()&#123;</span><br><span class="line">      return &#x27;20000101&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>配置全局过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;myFilter&#x27;</span>,<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>三个修饰符：</p><p>lazy：失去焦点再收集数据</p><p>number：输入字符串转为有效的数字</p><p>trim：输入首尾空格过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;phone&quot; v-model.trim=&quot;phone&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot; v-model=&quot;sex&quot;&gt;男</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot; v-model=&quot;sex&quot;&gt;女</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;agree&quot;&gt;同意协议</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      phone:&#x27;&#x27;,</span><br><span class="line">      sex:&#x27;&#x27;</span><br><span class="line">      agree:false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p>渲染文本内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3 v-text=&quot;你好世界&quot;&gt;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>渲染页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3 v-html=&quot;name&quot;&gt;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      name:&#x27;&lt;a href=&quot;www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p>网速慢页面未加载出来时，先显示cloak中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3 v-cloak=&quot;你好&quot;&gt;你好&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>初次动态渲染就视为静态内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3 v-once&gt;初始值:&#123;&#123;n&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      n:7</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p>优化，跳过其编译过程，用在没插值语法、指令语法的节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3 v-pre&gt;你好&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;n&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      n:7</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>directives</p><p>在指令与元素成功绑定、指令所在模板被重新解析 时调用</p><p>命名方式：v-kebab-case</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3 v-big=“n”&gt;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      n:7</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  directives:&#123;</span><br><span class="line">    big(element,binding)&#123;</span><br><span class="line">      // this是window对象</span><br><span class="line">      console.log(this)</span><br><span class="line">      element.innerText = binding.value * 10</span><br><span class="line">    &#125;,</span><br><span class="line">    // 对象式</span><br><span class="line">    fbind:&#123;</span><br><span class="line">      // 指令与元素成功绑定时（一上来）</span><br><span class="line">      bind()&#123;</span><br><span class="line">        console.log(&#x27;bind&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 指令所在元素被插入页面时</span><br><span class="line">      inserted()&#123;</span><br><span class="line">        console.log(&#x27;inserted&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 指令所在得模板被重新解析时</span><br><span class="line">      update()&#123;</span><br><span class="line">        console.log(&#x27;update&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>全局写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line">    <span class="title function_">bind</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">inserted</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><p>数据创建了，没挂载到页面上时</p><h3 id="beforeMounted"><a href="#beforeMounted" class="headerlink" title="beforeMounted"></a>beforeMounted</h3><p>挂载完毕前</p><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><p>Vue完成模板解析并把真实DOM元素放入页面后（挂载完毕）调用</p><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><p>数据更新前，数据更新了，页面没更新</p><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3><p>数据更新后</p><h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h3><p>销毁前</p><h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h3><p>vm.$destroy()：自我销毁</p><p>销毁后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate()&#123;&#125;,</span><br><span class="line">  created()&#123;&#125;,</span><br><span class="line">  beforeMounted()&#123;&#125;,</span><br><span class="line">  mounted()&#123;&#125;,</span><br><span class="line">  beforeUpdate()&#123;&#125;,</span><br><span class="line">  updated()&#123;&#125;,</span><br><span class="line">  beforeDestroy()&#123;&#125;,</span><br><span class="line">  destroyed()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h2><p>Vue组件化开发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 创建组件</span><br><span class="line">  Vue.extend(&#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    template:``,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><p>vue中的id，获取到DOM元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 ref=&quot;title&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;showDOM&quot;&gt;显示DOM元素&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    showDOM()&#123;</span><br><span class="line">      console.log(this.$refs.title)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="props配置"><a href="#props配置" class="headerlink" title="props配置"></a>props配置</h2><p>组件通讯，父传子</p><p>注意：不可直接修改接收的值，可以间接修改</p><p>app.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child :msg=&quot;msg&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import child from &#x27;./child&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  components:&#123;child&#125;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      msg:&#x27;helloworld&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>child.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    信息:&#123;&#123;msg&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import child from &#x27;./child&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  // 写法1：简单写法</span><br><span class="line">  props:[&#x27;msg&#x27;],</span><br><span class="line">  // 写法2：接收的同时对类型进行限制</span><br><span class="line">  props:&#123;</span><br><span class="line">    msg:String</span><br><span class="line">  &#125;,</span><br><span class="line">  // 写法3：完整的写法</span><br><span class="line">  props:&#123;</span><br><span class="line">    msg:&#123;</span><br><span class="line">      type:String,</span><br><span class="line">      required:true,  //是必要的（是必须传的）</span><br><span class="line">      default:&#x27;hello&#x27; //默认值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="组件自定义事件"><a href="#组件自定义事件" class="headerlink" title="组件自定义事件"></a>组件自定义事件</h2><p>自定义事件绑定，子传父，子调用父的方法</p><p><strong>app.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    信息:&#123;&#123;msg&#125;&#125;</span><br><span class="line">    &lt;!-- 第二种写法  自定义事件--&gt;</span><br><span class="line">    &lt;child @getChild=&quot;getChild&quot;/&gt;</span><br><span class="line">    &lt;!-- 第二种写法 ref--&gt;</span><br><span class="line">    &lt;child ref=&quot;child&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import child from &#x27;./child&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        msg:&#x27;&#x27;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    getChild(msg)&#123;</span><br><span class="line">      this.msg = msg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.$ref.child.$on(&#x27;getChild&#x27;,&#x27;hello&#x27;) //绑定自定义事件</span><br><span class="line">    this.$ref.child.$once(&#x27;getChild&#x27;,&#x27;hello&#x27;) //绑定自定义事件，一次性</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>child.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;giveFather&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    giveFather()&#123;</span><br><span class="line">      this.$emit(&#x27;getChild&#x27;,&#x27;hello&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>解绑</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;unbind&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    unbind()&#123;</span><br><span class="line">      this.$off(&#x27;getChild&#x27;)</span><br><span class="line">      // 多个解绑</span><br><span class="line">      this.$off([&#x27;...&#x27;,&#x27;...&#x27;])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h2><p>注意：如果属性命名冲突，以当前的为主；如果方法冲突，两个都要</p><p><strong>mixin.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin=&#123;</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2 @click=&quot;showName&quot;&gt;名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 导入混入</span><br><span class="line">import &#123;mixin&#125; from &#x27;./mixin.js&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      name:&#x27;aa&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 注册混入</span><br><span class="line">  mixins:[mixin]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>全局混入</strong></p><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin.js&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin)</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><strong>plugins.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">Vue</span>)&#123;</span><br><span class="line">    <span class="comment">// 添加过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(...)</span><br><span class="line">    <span class="comment">// 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(...)</span><br><span class="line">    <span class="comment">// 添加全局混入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(...)</span><br><span class="line">    <span class="comment">// 添加示例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span></span><br><span class="line"><span class="comment">//  使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugins)</span><br></pre></td></tr></table></figure><h2 id="浏览器本地存储"><a href="#浏览器本地存储" class="headerlink" title="浏览器本地存储"></a>浏览器本地存储</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;helloWorld&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> msg = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><p>任意组件间通信</p><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>使用事件总线</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 导入混入</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      name:&#x27;aa&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    demo()&#123;...&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    // 当前组件绑定xxx事件，其他组件触发this.$bus.$emit(&#x27;xxx&#x27;,数据)</span><br><span class="line">    this.$bus.$on(&#x27;xxx&#x27;,this.demo)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="消息订阅与发布-pubsub-js"><a href="#消息订阅与发布-pubsub-js" class="headerlink" title="消息订阅与发布(pubsub-js)"></a>消息订阅与发布(pubsub-js)</h2><p>全局组件间通信</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><p><strong>app.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 导入混入</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.pubId = pubsub.subscribe(&#x27;hello&#x27;,(msgName,args)=&gt;&#123;...&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy()&#123;</span><br><span class="line">    pubsub.unsubscribe(this.pubId)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>child.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;demo&quot;&gt;发布消息&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 导入混入</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    demo()&#123;</span><br><span class="line">      pubsub.publish(&#x27;hello&#x27;,7)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><p>在此次做修改，dom没更新，等更新完后做回调</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;handleEdit&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line">    &lt;input ref=&quot;inputTitle&quot; :checked=&quot;isEdit&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      isEdit:false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleEdit()&#123;</span><br><span class="line">      this.isEdit = true</span><br><span class="line">      this.$nextTick(function()&#123;</span><br><span class="line">        this.$ref.inputTitle.focus()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow=!isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition appear name=&quot;&quot;&gt;</span><br><span class="line">    &lt;!-- appear：一上来就显示动画 | 设置name后style里的v改成name的值 --&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;h2 v-show=&quot;isShow&quot;&gt;HelloWorld&lt;/h2&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;!-- 多个动画 --&gt;</span><br><span class="line">    &lt;transition-group&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;&quot; key=&quot;1&quot;&gt;1&lt;/h1&gt;</span><br><span class="line">      &lt;h2 v-show=&quot;&quot; key=&quot;2&quot;&gt;2&lt;/h2&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;App&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    isShow:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .v-enter.active&#123;</span><br><span class="line">    animation: donghau 1s linear;</span><br><span class="line">  &#125;</span><br><span class="line">  .v-leave.active&#123;</span><br><span class="line">    animation: donghau 1s linear reverse;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /* 定义动画效果 */</span><br><span class="line">  @keyframes donghau&#123;</span><br><span class="line">      from&#123;</span><br><span class="line">        transform: translateX(-100%)</span><br><span class="line">      &#125;</span><br><span class="line">      to&#123;</span><br><span class="line">        transform: translateX(0)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>过度效果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .v-enter,.v-leave-to&#123;</span><br><span class="line">    transform: translateX(-100%);</span><br><span class="line">  &#125;</span><br><span class="line">  .v-enter-active,.v-leave-active&#123;</span><br><span class="line">    transition: 0.5s linear;</span><br><span class="line">  &#125;</span><br><span class="line">  .v-leave,v-enter-to&#123;</span><br><span class="line">     transform: translateX(0);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="第三方库animate-css"><a href="#第三方库animate-css" class="headerlink" title="第三方库animate.css"></a>第三方库animate.css</h3><p><strong>官网</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animate.style</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i animate</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow=!isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition appear name=&quot;animate__animated annimate__bounce&quot;</span><br><span class="line">                enter-active-class=&quot;animate__swing&quot;</span><br><span class="line">                leave-active-class=&quot;animate_backOutUp&quot;&gt;</span><br><span class="line">      &lt;h2 v-show=&quot;isShow&quot;&gt;HelloWorld&lt;/h2&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;animate.css&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;App&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    isShow:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><p>一个标签：<slot></slot></p><p>定义一个插槽（挖个坑，等着组件的使用者进行填充）</p><p><strong>app.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;category :listData=&quot;list&quot; :title=&quot;...&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;...&quot; alt=&quot;...&quot;/&gt;</span><br><span class="line">    &lt;/category&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import category from &#x27;./category&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;App&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      list:[&#123;...&#125;,&#123;...&#125;,&#123;...&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>category.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;App&#x27;,</span><br><span class="line">  props:[&#x27;title&#x27;,&#x27;listData&#x27;]</span><br><span class="line">  data()&#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p><strong>app.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;category :listData=&quot;list&quot; :title=&quot;...&quot;&gt;</span><br><span class="line">      &lt;!-- 写法1 --&gt;</span><br><span class="line">      &lt;img src=&quot;...&quot; alt=&quot;...&quot; slot=&quot;center&quot;&gt;</span><br><span class="line">      &lt;div slot=&quot;footer&quot;&gt;</span><br><span class="line">        &lt;a&gt;...&lt;/a&gt;    </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- end --&gt;</span><br><span class="line">      &lt;!-- 写法2 --&gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;a&gt;...&lt;/a&gt;    </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;!-- end --&gt;</span><br><span class="line">    &lt;/category&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import category from &#x27;./category&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;App&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      list:[&#123;...&#125;,&#123;...&#125;,&#123;...&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>将数据传入插槽，使用插槽的组件能获取到数据</p><p><strong>app.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;category :listData=&quot;list&quot; :title=&quot;...&quot;&gt;</span><br><span class="line">      &lt;template scope=&quot;&#123;list&#125;&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/category&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import category from &#x27;./category&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;App&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>category.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;slot :list=&quot;list&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;App&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      list:[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>集中式管理数据</p><p>注意：vue2只能用vuex3，vue3只能用vuex4</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vuex</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>:<span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">// 配置后 vm出现 $store</span></span><br><span class="line">  store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>store.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用插件（创建 vm 时就可以添加 store 配置项）</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于响应组件中的动作</span></span><br><span class="line"><span class="comment">// 触发：dispatch(&#x27;xxx&#x27;,args)</span></span><br><span class="line"><span class="keyword">const</span> actions=&#123;</span><br><span class="line">  <span class="title function_">xxx</span>(<span class="params">context,value</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于操作数据（state）</span></span><br><span class="line"><span class="comment">// 触发：commit(&#x27;xxx&#x27;,args)</span></span><br><span class="line"><span class="keyword">const</span> mutations=&#123;</span><br><span class="line">  <span class="title function_">xxx</span>(<span class="params">state,value</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="title function_">xxx</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">xxx</span>*<span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a><strong>mapState</strong></h3><p>快捷获取vuex的state数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;slot :list=&quot;list&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState&#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;App&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    // 写法0</span><br><span class="line">    sum()&#123;</span><br><span class="line">      return this.$store.state.sum</span><br><span class="line">    &#125;,</span><br><span class="line">    // 写法1</span><br><span class="line">    ...mapState(&#123;sum:&#x27;sum&#x27;&#125;),</span><br><span class="line">    // 写法2</span><br><span class="line">    ...mapState([&#x27;sum&#x27;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h3><p>映射getters的数据</p><p>mapState同理</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">cosnt a=&#123;</span><br><span class="line">  actions=&#123;&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b=&#123;</span><br><span class="line">  actions=&#123;&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title function_">store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>:&#123;</span><br><span class="line">    a,</span><br><span class="line">    b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-router</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vuex-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./component/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./component/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;./component/News&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">      <span class="comment">// 配置个属性用于判断</span></span><br><span class="line">      <span class="attr">meta</span>:&#123;&#125;,</span><br><span class="line">      <span class="comment">// 独享路由守卫</span></span><br><span class="line">      <span class="attr">beforeEnter</span>:<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">components</span>:<span class="title class_">News</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局前置路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置路由守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><strong>app.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 路由的切换 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;&lt;/router-link&gt;</span><br><span class="line">    &lt;!-- 指定组件显示的位置 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link :to=&quot;/home?id=7&amp;name=aa&quot;&gt;&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link :to=&quot;&#123;</span><br><span class="line">                     path:&#x27;/home&#x27;,</span><br><span class="line">                     query:&#123;</span><br><span class="line">                       id:7,</span><br><span class="line">                       name:&#x27;aa&#x27;</span><br><span class="line">                     &#125;&#125;&quot;&gt;&lt;/router-link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><p>切换组件时，不会被销毁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;keep-alive include=&quot;组件名&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">  </span><br><span class="line">  // 激活</span><br><span class="line">  activated()&#123;&#125;,</span><br><span class="line">  // 失活</span><br><span class="line">  deactivated()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    beforeRouteEnter(to,from,next)&#123;&#125;，</span><br><span class="line">    beforeRouteLeave(to,from,next)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><h2 id="创建Vue3-0工程"><a href="#创建Vue3-0工程" class="headerlink" title="创建Vue3.0工程"></a>创建Vue3.0工程</h2><h3 id="1-vue-cli创建"><a href="#1-vue-cli创建" class="headerlink" title="1.vue-cli创建"></a>1.vue-cli创建</h3><h3 id="2-vite创建"><a href="#2-vite创建" class="headerlink" title="2.vite创建"></a>2.vite创建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app 项目名</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a><strong>setup</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;&#x27;,</span><br><span class="line">      setup()&#123;</span><br><span class="line">          //数据</span><br><span class="line">          let name = &#x27;xx&#x27;,</span><br><span class="line">          let age= 18</span><br><span class="line">          </span><br><span class="line">          //方法</span><br><span class="line">          function sayHello()&#123;</span><br><span class="line">              alert(`我叫$&#123;name&#125;,我$&#123;age&#125;岁`)</span><br><span class="line">          &#125;</span><br><span class="line">          return&#123;</span><br><span class="line">              name,</span><br><span class="line">              age,</span><br><span class="line">              sayHello</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h3><p>定义一个响应式的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;信息&lt;/h1&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;&#x27;,</span><br><span class="line">      setup()&#123;</span><br><span class="line">          //数据</span><br><span class="line">          let name = ref(&#x27;xx&#x27;),</span><br><span class="line">          let age= ref(18)</span><br><span class="line">          let job = ref(&#123;</span><br><span class="line">              type: &#x27;前端工程师&#x27;,</span><br><span class="line">              salary: &#x27;10k&#x27;</span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">          //方法</span><br><span class="line">          function sayHello()&#123;</span><br><span class="line">              alert(`我叫$&#123;name&#125;,我$&#123;age&#125;岁`)</span><br><span class="line">          &#125;</span><br><span class="line">          function changeInfo()&#123;</span><br><span class="line">              //修改基本数据类型</span><br><span class="line">              name.value = &#x27;李四&#x27;,</span><br><span class="line">              age.value = 20,</span><br><span class="line">              //修改对象类型</span><br><span class="line">              job.value.type= &#x27;UI设计师&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          //返回才能在template中使用</span><br><span class="line">          return&#123;</span><br><span class="line">              name,</span><br><span class="line">              age,</span><br><span class="line">              sayHello,</span><br><span class="line">              changeInfo</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h3><p>定义一个响应式的对象类型数据（基本数据类型不要使用）</p><p>const 代理对象 &#x3D; reactive(源对象)接收一个对象或者数组，返回一个代理对象（Proxy的实例对象，简称proxy对象）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;信息&lt;/h1&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;job.type&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;job.salary&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;&#x27;,</span><br><span class="line">      setup()&#123;</span><br><span class="line">          //数据</span><br><span class="line">          let job = reactive(&#123;</span><br><span class="line">              type: &#x27;前端工程师&#x27;,</span><br><span class="line">              salary: &#x27;10k&#x27;</span><br><span class="line">          &#125;)</span><br><span class="line">         </span><br><span class="line">          function changeInfo()&#123;</span><br><span class="line">              //修改对象类型</span><br><span class="line">              job.type= &#x27;UI设计师&#x27;,</span><br><span class="line">              job.salary=&#x27;20k</span><br><span class="line">          &#125;</span><br><span class="line">          return&#123;</span><br><span class="line">              changeInfo</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="模拟Vue3中实现响应式"><a href="#模拟Vue3中实现响应式" class="headerlink" title="模拟Vue3中实现响应式"></a>模拟Vue3中实现响应式</h3><p>实现原理：</p><ul><li>通过Proxy（代理）：拦截对象中任意属性的变化，包括：属性值的读写、属性的添加、属性的删除</li><li>通过Reflect（反射）：对源对象的属性进行操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">get</span>(<span class="params">target,propName</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propName)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">target,propName,value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,propName,value)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">deleteProperty</span>(<span class="params">target,propName</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,propName)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插槽、props、emit"><a href="#插槽、props、emit" class="headerlink" title="插槽、props、emit"></a>插槽、props、emit</h3><p>Demo.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Demo组件&lt;/h2&gt;</span><br><span class="line">      &#123;&#123;msg&#125;&#125;</span><br><span class="line">      &#123;&#123;school&#125;&#125;</span><br><span class="line">      &lt;slot name=&quot;test1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;slot name=&quot;test2&quot;&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;button @click=&quot;test&quot;&gt;触发demo组件的hello事件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;Demo&#x27;,</span><br><span class="line">      props:[&#x27;msg&#x27;,&#x27;school&#x27;],</span><br><span class="line">      emits:[&#x27;hello&#x27;]</span><br><span class="line">      setup(props,context)&#123;</span><br><span class="line">          name:&#x27;Demo&#x27;,</span><br><span class="line">          mounted()&#123;</span><br><span class="line">              console.log(this)</span><br><span class="line">          &#125;</span><br><span class="line">          function test()&#123;</span><br><span class="line">              context.emit(&#x27;hello&#x27;,参数)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;demo @hello=&quot;showInfo()&quot; :msg=&quot;11&quot; :school=&quot;11&quot;&gt;&lt;/demo&gt;</span><br><span class="line">  &lt;template v-slot:test1&gt;</span><br><span class="line">      &lt;span&gt;test1&lt;/span&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;template v-slot:test2&gt;</span><br><span class="line">      &lt;span&gt;test2&lt;/span&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">  import Demo from &#x27;&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;App&#x27;,</span><br><span class="line">      components:&#123;Demo&#125;</span><br><span class="line">      setup()&#123;</span><br><span class="line">          function showInfo()&#123;</span><br><span class="line">              alert(&#x27;111&#x27;)</span><br><span class="line">          &#125;</span><br><span class="line">          return&#123;</span><br><span class="line">              showInfo</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="computed函数"><a href="#computed函数" class="headerlink" title="computed函数"></a>computed函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">  import &#123;computed&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;Demo&#x27;,</span><br><span class="line">      setup()&#123;</span><br><span class="line">          let person=&#123;</span><br><span class="line">              firstName=&#x27;&#x27;,</span><br><span class="line">              lastName=&#x27;&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          //计算属性-简写</span><br><span class="line">          let fullName=computed(()=&gt;&#123;</span><br><span class="line">              return person.firstName+&#x27;-&#x27;+person.lastName</span><br><span class="line">          &#125;)</span><br><span class="line">          //计算属性-完整</span><br><span class="line">          let fullName=computed(()=&gt;&#123;</span><br><span class="line">              get()&#123;</span><br><span class="line">                  return person.firstName+&#x27;-&#x27;+person.lastName</span><br><span class="line">              &#125;,</span><br><span class="line">              set(value)&#123;</span><br><span class="line">                  const newArr=value.split(&#x27;-&#x27;)</span><br><span class="line">                  person.firstName=newAll[0]</span><br><span class="line">                  person.lastName=newAll[1]</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="watch监视"><a href="#watch监视" class="headerlink" title="watch监视"></a>watch监视</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;App&#x27;,</span><br><span class="line">      setup()&#123;</span><br><span class="line">          let num = ref(0)</span><br><span class="line">          let msg = ref(&#x27;hello&#x27;)</span><br><span class="line">          let person=&#123;</span><br><span class="line">            job:&#123;</span><br><span class="line">              j1:&#123;</span><br><span class="line">                  salary:20</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          //监视单个数据</span><br><span class="line">          watch(sum,(newVal,oldVal)=&gt;&#123;&#125;)</span><br><span class="line">          //监视多个数据</span><br><span class="line">          //第一个参数是监视的数据，第二个是回调，第三个是配置属性对象</span><br><span class="line">          watch([sum,msg],(newVal,oldVal)=&gt;&#123;&#125;,&#123;immediate: true&#125;)</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          return &#123;</span><br><span class="line">              num</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="watchEffect函数"><a href="#watchEffect函数" class="headerlink" title="watchEffect函数"></a>watchEffect函数</h3><p>函数中自动监视用到的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;ref,reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;App&#x27;,</span><br><span class="line">      setup()&#123;</span><br><span class="line">          let num = ref(0)</span><br><span class="line">          job:&#123;</span><br><span class="line">              j1:&#123;</span><br><span class="line">                  salary:20</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          watchEffect(()=&gt;&#123;</span><br><span class="line">              const x1=sum.value,</span><br><span class="line">              const x2=person.job.j1.salary</span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">          return &#123;</span><br><span class="line">              num</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="生命周期钩子函数、"><a href="#生命周期钩子函数、" class="headerlink" title="生命周期钩子函数、"></a>生命周期钩子函数、</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;onBeforeMount,onMount,onBeforeUpdate,onUpdate,onBeforeUnmount,onUnmount&#125; from &#x27;vue&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;App&#x27;,</span><br><span class="line">      setup()&#123;</span><br><span class="line">          //通过组合式API的形式去使用生命周期钩子</span><br><span class="line">          onBeforeMount(()=&gt;&#123;&#125;)</span><br><span class="line">          onMount(()=&gt;&#123;&#125;)</span><br><span class="line">          onBeforeUpdate(()=&gt;&#123;&#125;)</span><br><span class="line">          onUpdate(()=&gt;&#123;&#125;)</span><br><span class="line">          onBeforeUnmount(()=&gt;&#123;&#125;)</span><br><span class="line">          onUnmount(()=&gt;&#123;&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h3><p>函数复用，把setup函数中使用的Composition API进行了封装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前鼠标点击的坐标为：X:&#123;&#123;point.x&#125;&#125;Y:&#123;&#123;point.y&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import usePoint from &#x27;../hooks/usePoint&#x27;</span><br><span class="line">  export default&#123;</span><br><span class="line">      name:&#x27;App&#x27;,</span><br><span class="line">      setup()&#123;</span><br><span class="line">          let point=usePoint()</span><br><span class="line">          </span><br><span class="line">          return &#123;</span><br><span class="line">            point</span><br><span class="line">          &#125; </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>usePoint.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted,onBeforeUnmount&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> point = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">savePoint</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        point.<span class="property">x</span>=event.<span class="property">pageX</span>,</span><br><span class="line">        point.<span class="property">y</span>=event.<span class="property">pageY</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">onBeforeUnmount</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> point</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toRef与toRefs"><a href="#toRef与toRefs" class="headerlink" title="toRef与toRefs"></a>toRef与toRefs</h3><p>将数据绑定返回，这样修改 返回的数据就能修改原数据，toRefs批量绑定（将一个对象所有属性都绑定）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">export default = function()&#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let person = reactive(&#123;</span><br><span class="line">            name:&#x27;aa&#x27;,</span><br><span class="line">            age:11,</span><br><span class="line">            job:&#123;</span><br><span class="line">                j1:&#123;</span><br><span class="line">                    salary:20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        const name1 = person.name</span><br><span class="line">        </span><br><span class="line">        // toRef(参数1：绑定的对象，参数2：对象的什么属性)</span><br><span class="line">        // 绑定后name2改变，也改变person的name</span><br><span class="line">        const name2 = toRef(person,&#x27;name&#x27;)</span><br><span class="line">        </span><br><span class="line">        // toRef(person)：将person所有属性都绑定</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">        person,</span><br><span class="line">        name:toRef(person,&#x27;name&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="shallowReactive与shallowRef"><a href="#shallowReactive与shallowRef" class="headerlink" title="shallowReactive与shallowRef"></a>shallowReactive与shallowRef</h3><p>shallowReactive：只处理（响应式）对象类型的第一层（最外层）数据（浅响应式）</p><p>shalowRef：只处理基本数据类型的数据，不进行对象的响应式处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;shallowReactive,shalowRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default = &#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let person = shallowReactive(&#123;</span><br><span class="line">            name:&#x27;11&#x27;,</span><br><span class="line">            job:&#123;</span><br><span class="line">                j1:&#123;</span><br><span class="line">                    salary:20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="readonly与shallowReadonly"><a href="#readonly与shallowReadonly" class="headerlink" title="readonly与shallowReadonly"></a>readonly与shallowReadonly</h3><p>readonly：只能读取，不能修改</p><p>shallowReadonly：最外层数据不能修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;shallowReactive,shalowRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default = &#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let person = shallowReactive(&#123;</span><br><span class="line">            name:&#x27;11&#x27;,</span><br><span class="line">            job:&#123;</span><br><span class="line">                j1:&#123;</span><br><span class="line">                    salary:20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        person = readonly(person)</span><br><span class="line">        person = readonly(shallowReadonly)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="toRaw与markRaw"><a href="#toRaw与markRaw" class="headerlink" title="toRaw与markRaw"></a>toRaw与markRaw</h3><p>toRaw：将由reactive生成的响应式对象转为普通对象</p><p>markRaw：定义一个对象让其保持原始数据（不进行响应式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">markRaw(person)</span><br></pre></td></tr></table></figure><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><p>创建一个自定义的ref，并对其依赖项跟踪和更新触发进行显示控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default = &#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        function myRef(value,delay)&#123;</span><br><span class="line">            let timer</span><br><span class="line">            return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    get()&#123;</span><br><span class="line">                        //通知vue追踪数据的变化，不然修改keyword后不返回修改后的值</span><br><span class="line">                        track()</span><br><span class="line">                        return value</span><br><span class="line">                    &#125;,</span><br><span class="line">                    set(newVal)&#123;</span><br><span class="line">                        clearTimeout(timer)</span><br><span class="line">                        timer = setTimeout(()=&gt;&#123;</span><br><span class="line">                            value = newVal</span><br><span class="line">                            // 通知vue去重新解析模板</span><br><span class="line">                            trigger()</span><br><span class="line">                        &#125;,delay)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        let keyword=myRef(keyword,500) //程序员自定义的ref</span><br><span class="line">    </span><br><span class="line">        return &#123;</span><br><span class="line">            keyword</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="provide与inject"><a href="#provide与inject" class="headerlink" title="provide与inject"></a>provide与inject</h3><p>实现祖与后代组件间通信（可以爷给孙传递）</p><p>爷</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;provide&#125; from &#x27;vue&#x27;</span><br><span class="line">export default = &#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let car=reactive(&#123;name:&#x27;11&#x27;,price:1&#125;)</span><br><span class="line">        provide(&#x27;car&#x27;,car)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>孙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;inject&#125; from &#x27;vue&#x27;</span><br><span class="line">export default = &#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let car=inject(&#x27;car&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h3><p>tp&#x3D;传送,将teleport中的内容传到别处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;teleport to=&quot;body&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">      &lt;/teleport&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="Suspense组件"><a href="#Suspense组件" class="headerlink" title="Suspense组件"></a>Suspense组件</h3><p>类似懒加载的东西，设置某个组件懒加载，没加载出来时，使用Suspense组件指定加载中的组件与未加载完成时先显示的组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Suspense&gt;</span><br><span class="line">          </span><br><span class="line">        &lt;template v-slot:default&gt;</span><br><span class="line">          &lt;Child/&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;template v-slot:fallback&gt;</span><br><span class="line">          &lt;h3&gt;稍等，加载中...&lt;/h3&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Suspense&gt;  </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default=&#123;</span><br><span class="line">    name:&#x27;&#x27;,</span><br><span class="line">    const Child = defineAsyncComponent(()=&gt;import(&#x27;./Child&#x27;)), //异步引入（懒加载）</span><br><span class="line">    components:[Child]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue3中的改变"><a href="#Vue3中的改变" class="headerlink" title="Vue3中的改变"></a>Vue3中的改变</h3><p><img src="C:\Users\SPACE\Desktop\vue3的改变.png" alt="vue3的改变"></p><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><h4 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h4><p>router-link 对应 a 标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/xxx&quot;&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><p>path 不能 与params 一起使用， name 可以</p><p>使用params要在路由的path中定义：&#x2F;:xxx </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;路由名&#x27;</span>, <span class="attr">params</span>:&#123;<span class="attr">xxx</span>:xxx&#125;, <span class="attr">query</span>:&#123;<span class="attr">xxx</span>: xxx&#125;&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/xxx&#x27;</span>, <span class="attr">query</span>:&#123;<span class="attr">xxx</span>: xxx&#125;&#125;)</span><br></pre></td></tr></table></figure><p>指定params参数可传可不传：</p><p>配置路由时，在占位的后面加上?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/xxx/:xxx?&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果params参数是空串，解决方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;路由名&#x27;</span>, <span class="attr">params</span>:&#123;<span class="attr">xxx</span>:<span class="string">&#x27;&#x27;</span>||<span class="literal">undefined</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>传递props参数</p><p>router -&gt; index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">or</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">props</span>:<span class="function">(<span class="params">$route</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">xxx</span>:$route.<span class="property">params</span>.<span class="property">xxx</span>,</span><br><span class="line">        <span class="attr">aaa</span>:$route.<span class="property">query</span>.<span class="property">xxx</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写router的push和replace方法"><a href="#重写router的push和replace方法" class="headerlink" title="重写router的push和replace方法"></a>重写router的push和replace方法</h3><p>解决点击多次路由跳转报错问题</p><p>router &#x3D;&gt; index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先把VueRouter原型对象的push备份</span></span><br><span class="line"><span class="keyword">let</span> originPush = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//call || apply区别</span></span><br><span class="line"><span class="comment">//相同点：都可以调用函数一次，都可以篡改函数的上下文一次</span></span><br><span class="line"><span class="comment">//不同点：call与apply传递参数：call传递参数用逗号隔开，apply方法执行，传递数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重写push</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">location, resolve, reject</span>)&#123;</span><br><span class="line">    <span class="comment">//如果传了成功和失败的回调</span></span><br><span class="line">    <span class="keyword">if</span>(resolve &amp;&amp; reject)&#123;</span><br><span class="line">        originPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, resolve, reject)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        originPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, <span class="function">()=&gt;</span>&#123;&#125;, <span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局组件注册"><a href="#全局组件注册" class="headerlink" title="全局组件注册"></a>全局组件注册</h3><p>src &#x3D;&gt; main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TypeNav</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/Home/TypeNav&#x27;</span></span><br><span class="line"><span class="comment">//第一个参数：全局组件的名字 第二个参数：哪一个组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">TypeNav</span>.<span class="property">name</span>,<span class="title class_">TypeNav</span>)</span><br></pre></td></tr></table></figure><h3 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h3><p>防抖和节流</p><p>npm i lodash</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br></pre></td></tr></table></figure><p>自制轮播</p><h1 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//关闭打包后的map</span></span><br><span class="line">    <span class="attr">productionSourceMap</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">lintOnSavbe</span>: <span class="literal">false</span>, <span class="comment">//关闭语法检查</span></span><br><span class="line">    <span class="comment">//配置代理</span></span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">proxy</span>:&#123;</span><br><span class="line">            <span class="string">&quot;/api&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">target</span>:<span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">                <span class="comment">// 将前缀/api 替换为空</span></span><br><span class="line">                <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">                <span class="comment">// &#x27;撒谎&#x27;,改变请求来自地址</span></span><br><span class="line">                <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 用于支持websocket</span></span><br><span class="line">                <span class="attr">ws</span>:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">pages</span>:&#123;</span><br><span class="line">      <span class="attr">index</span>:&#123;</span><br><span class="line">        <span class="comment">// 配置入口文件</span></span><br><span class="line">        <span class="attr">entry</span>:<span class="string">&#x27;src/index.js&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jsconfig-json配置文件"><a href="#jsconfig-json配置文件" class="headerlink" title="jsconfig.json配置文件"></a>jsconfig.json配置文件</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//配置别名</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;src/*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;dist&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="npm第三方依赖"><a href="#npm第三方依赖" class="headerlink" title="npm第三方依赖"></a>npm第三方依赖</h1><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>vue-lazyload</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-lazyload -S</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueLazyload</span> <span class="keyword">from</span> <span class="string">&#x27;vue-lazyload&#x27;</span></span><br><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&#x27;xxx/xxx.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueLazyload</span>,&#123;</span><br><span class="line">    <span class="comment">//懒加载的图片</span></span><br><span class="line">    <span class="attr">loading</span>:img</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>vee-validate</p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vee-validate@2 --save</span><br></pre></td></tr></table></figure><p>使用</p><p>在plugins下创建validate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VeeValidate</span> <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VeeValidate</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">VeeValidate</span>.<span class="property">Validator</span>.<span class="title function_">localize</span>(<span class="string">&#x27;zh_CN&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">messages</span>:&#123;</span><br><span class="line">        ...zh_CN.<span class="property">message</span>,</span><br><span class="line">        <span class="attr">is</span>:<span class="function">(<span class="params">field</span>)=&gt;</span><span class="string">`<span class="subst">$&#123;field&#125;</span>必须与密码相同`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">attributes</span>:&#123;</span><br><span class="line">        <span class="attr">phone</span>:<span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">        <span class="attr">code</span>:<span class="string">&#x27;验证码&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        <span class="attr">rPassword</span>:<span class="string">&#x27;确认密码&#x27;</span>,</span><br><span class="line">        <span class="attr">isCheck</span>:<span class="string">&#x27;协议&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/plugins/validate&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue2 </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaApi</title>
      <link href="/2023/08/21/java/javaApi/"/>
      <url>/2023/08/21/java/javaApi/</url>
      
        <content type="html"><![CDATA[<h1 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h1><p>来自<code>spring-bean</code>依赖</p><p>拷贝共同属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将v1的属性拷贝到v2</span></span><br><span class="line">BeanUtils.copyProperties(v1,v2);</span><br></pre></td></tr></table></figure><h1 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h1><p>来自<code>spring-core</code>依赖</p><p>判断集合是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line">CollectionUtils.isEmpty(list)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习笔记</title>
      <link href="/2023/08/20/%E5%89%8D%E7%AB%AF/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/20/%E5%89%8D%E7%AB%AF/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>EventLoop</p><p>先执行宏任务，后执行微任务</p><p>宏任务</p><p>主体script、setTimeout、setInterval</p><p>微任务</p><p>Promise、process.nextTick</p><h2 id="模块开发"><a href="#模块开发" class="headerlink" title="模块开发"></a>模块开发</h2><p>一个js文件就是一个独立的模块文件，每个模块都会有自己的独立作用域 - 模块作用域</p><p>导入模块：require（模块id &#x2F; 模块的路径）</p><p>导出模块：exports</p><p>exports &#x3D;&#x3D; module.exports</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">100</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="创建package-json"><a href="#创建package-json" class="headerlink" title="创建package.json"></a><strong>创建package.json</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h2><p>解决下载包速度慢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前的下包镜像源</span><br><span class="line">npm config getregistry</span><br><span class="line"># 将下包的镜像源切换为淘宝镜像源</span><br><span class="line">npm config set rigistry=https://registry.npm.taobao.org/</span><br><span class="line"># 检查镜像源是否下载成功</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 通过npm包管理，将nrm安装为全局可用的工具</span><br><span class="line">npm i nrm -g</span><br><span class="line"># 查看所有可用的镜像源</span><br><span class="line">nrm 1s</span><br><span class="line"># 将下包的镜像源切换为 taobao 镜像</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><h1 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="req请求对象"><a href="#req请求对象" class="headerlink" title="req请求对象"></a>req请求对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定请求对象，有人对服务器发送请求就触发回调</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 防止乱码，设置请求头</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向客户端发送指定内容，并结束此次请求</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;请求已结束&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口已启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="http-1"><a href="#http-1" class="headerlink" title="http"></a>http</h3><p>浏览器和web服务器之间的协议，既可以创建web服务器，也可以模拟浏览器向另外的服务器发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">&#x27;queryString&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取当前页面的url</span></span><br><span class="line">    <span class="keyword">const</span> url=request.<span class="property">url</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> data=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//接收发送的数据流</span></span><br><span class="line">    request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        data+=chunk</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    request.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//设置请求头</span></span><br><span class="line">        response.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;text/plain&#x27;</span>,<span class="comment">//文本格式</span></span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;text/html&#x27;</span>,<span class="comment">//html格式</span></span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;application/json;charset=utf-8&#x27;</span><span class="comment">//字符串格式</span></span><br><span class="line">    &#125;)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//页面写入内容</span></span><br><span class="line">    <span class="comment">//写入定义的字符串方法</span></span><br><span class="line">    response.<span class="title function_">write</span>(<span class="string">`&#123;&quot;url&quot;:&quot;<span class="subst">$&#123;url&#125;</span>&quot;&#125;`</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//写入字符串</span></span><br><span class="line">    response.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(querystring.<span class="title function_">parse</span>(data)))</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//终止    </span></span><br><span class="line">    response.<span class="title function_">end</span>()</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义请求的端口号，以及回调函数</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;localhost:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="http-get"><a href="#http-get" class="headerlink" title="http-get"></a>http-get</h3><p>模拟浏览器，向别的服务器发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">get</span>(url,<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//res.statusCode：状态码</span></span><br><span class="line">    <span class="comment">//事件：监听是否有数据响应过来</span></span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">log</span>(chunk)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">&#x27;queryString&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    http.<span class="title function_">get</span>(url,<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">//接收发送的数据流</span></span><br><span class="line">        result.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">            data+=chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        result.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            response.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;</span><br><span class="line">                <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            response.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">            response.<span class="title function_">end</span>()<span class="comment">//终止</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//监听浏览器请求</span></span><br><span class="line">    server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//设置响应状态码，头信息</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;</span><br><span class="line">            <span class="comment">//设置响应的文件类型和编码</span></span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//设置响应的内容</span></span><br><span class="line">        res.<span class="title function_">write</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">        <span class="comment">//跳转到另一个URL</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">302</span>,&#123;</span><br><span class="line">            <span class="title class_">Location</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//结束并发送响应到客户端</span></span><br><span class="line">        res.<span class="title function_">end</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义请求的端口号，以及回调函数</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;localhost:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="http-post"><a href="#http-post" class="headerlink" title="http-post"></a>http-post</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象转成字符串形式</span></span><br><span class="line"><span class="keyword">const</span> postData=querystring.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">province</span>:<span class="string">&#x27;南宁&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>:<span class="string">&#x27;南宁&#x27;</span>,</span><br><span class="line">    <span class="attr">district</span>:<span class="string">&#x27;邕宁区&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>:<span class="string">&#x27;aa-bb-cc&#x27;</span>,</span><br><span class="line">    <span class="attr">phone</span>:<span class="string">&#x27;13888888888&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options=&#123;</span><br><span class="line">    <span class="attr">protocol</span>:<span class="string">&#x27;http:&#x27;</span>,</span><br><span class="line">    <span class="attr">hostname</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/data&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="comment">//表单数据类型</span></span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Length&#x27;</span>:<span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(postData)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">const</span> request=http.<span class="title function_">request</span>(options,<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    request.<span class="title function_">write</span>(postData)</span><br><span class="line">    request.<span class="title function_">end</span>()</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;locahost:8080启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="https-爬虫"><a href="#https-爬虫" class="headerlink" title="https-爬虫"></a>https-爬虫</h3><h4 id="cheerio"><a href="#cheerio" class="headerlink" title="cheerio"></a>cheerio</h4><p>将html转为虚拟dom</p><p><strong>安装</strong></p><p>npm install cheerio -S</p><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> https=<span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cheerio=<span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filterData</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> $=cheerio.<span class="title function_">load</span>(data)</span><br><span class="line">  $(<span class="string">&#x27;.xxx x&#x27;</span>).<span class="title function_">each</span>(index,el)=&gt;&#123;</span><br><span class="line">    index<span class="comment">//获取索引，大概是有几个元素为xxx x的</span></span><br><span class="line">    $(el).<span class="title function_">text</span>()<span class="comment">//可以获取dom中的文本</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data=<span class="string">&#x27;&#x27;</span></span><br><span class="line">  https.<span class="title function_">get</span>(<span class="string">&#x27;https://www.meizu.com&#x27;</span>,<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    result.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">      data+=chunk</span><br><span class="line">    &#125;)</span><br><span class="line">    result.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">filterData</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;locahost:8080启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>自定义事件</p><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取的EventEmitter是个 类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span>=<span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyEventEmitter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> event=<span class="keyword">new</span> <span class="title class_">MyEventEmitter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">event.<span class="title function_">on</span>(<span class="string">&#x27;play&#x27;</span>,<span class="function">(<span class="params">movie</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(movie)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//once：只触发一次</span></span><br><span class="line">event.<span class="title function_">once</span>(<span class="string">&#x27;play&#x27;</span>,<span class="function">(<span class="params">movie</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(movie)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发事件</span></span><br><span class="line">event.<span class="title function_">emit</span>(<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;我和我的祖国&#x27;</span>)</span><br><span class="line">event.<span class="title function_">emit</span>(<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;中国机长&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h2><p>文件操作</p><p>回调是异步</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件夹</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;logs&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//错误优先操作</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;文件夹创建成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改文件夹名字</span></span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;./logs&#x27;</span>,<span class="string">&#x27;./log&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./log&#x27;</span>,()&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件夹目录</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./log&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">lop</span>(result)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件，及文件内容</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>,<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件追加内容</span></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>,<span class="string">&#x27;!!!&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件内容</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(content)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//同步读取</span></span><br><span class="line"><span class="keyword">let</span> res=fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>)</span><br><span class="line"><span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//获取promise对象</span></span><br><span class="line"><span class="keyword">const</span> fsPromise=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">promise</span></span><br><span class="line"><span class="comment">//立即调用函数表达式</span></span><br><span class="line">;(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> res=<span class="keyword">await</span> fsPromise.<span class="title function_">readFile</span>(<span class="string">&#x27;./log/log1.log&#x27;</span>)</span><br><span class="line">    <span class="title function_">log</span>(res)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//fs.watch():监听文件变化</span></span><br><span class="line">fs.<span class="title function_">watch</span>(<span class="string">&#x27;./log/xxx.xx&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;file has changed.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝：fs.copyFileSync()</span></span><br><span class="line">fs.<span class="title function_">copyFileSync</span>(<span class="string">&#x27;3.txt&#x27;</span>,<span class="string">&#x27;4.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历目录的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readDir</span>(<span class="params">dir</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readdir</span>(dir,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//遍历目录</span></span><br><span class="line">        content.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//value：目录中每个文件夹\文件</span></span><br><span class="line">            <span class="keyword">let</span> joinDir=<span class="string">`<span class="subst">$&#123;dir&#125;</span>/<span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">            <span class="comment">//获取目录状态：是文件夹或其他文件</span></span><br><span class="line">            fs.<span class="title function_">stat</span>(joinDir,<span class="function">(<span class="params">err,stats</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//判断是否为文件夹</span></span><br><span class="line">                <span class="keyword">if</span>(stats.<span class="title function_">isDirectory</span>())&#123;</span><br><span class="line">                    <span class="comment">//是文件夹往下遍历</span></span><br><span class="line">                    <span class="title function_">readDir</span>(joinDir)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    rs.<span class="title function_">readFile</span>(joinDir,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">                        <span class="comment">//输出文件内容</span></span><br><span class="line">                        <span class="title function_">log</span>(content)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream模块"><a href="#Stream模块" class="headerlink" title="Stream模块"></a>Stream模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cosnt fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//创建一个可读取的流</span></span><br><span class="line"><span class="keyword">let</span> readStream=fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;文件名&#x27;</span>)</span><br><span class="line"><span class="comment">//事件：监听是否有数据流入到内存，chunk：buffer数据</span></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//结束事件</span></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="comment">//创建可读取的流</span></span><br><span class="line"><span class="keyword">let</span> readStream=fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;文件名&#x27;</span>)</span><br><span class="line"><span class="comment">//创建可写入的流</span></span><br><span class="line"><span class="keyword">let</span> writeStream=fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;文件名&#x27;</span>)</span><br><span class="line"><span class="comment">//把读取的流通过管道添加到写入流</span></span><br><span class="line">readStream.<span class="title function_">pipe</span>(writeStream)</span><br></pre></td></tr></table></figure><h2 id="readline（逐行读取）"><a href="#readline（逐行读取）" class="headerlink" title="readline（逐行读取）"></a>readline（逐行读取）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl=readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>:process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>:process.<span class="property">stdout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">question</span>(<span class="string">&#x27;您如何看待Node.js中文网？&#x27;</span>,<span class="function">(<span class="params">answer</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(answer)</span><br><span class="line">    rl.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="crypto（加密）"><a href="#crypto（加密）" class="headerlink" title="crypto（加密）"></a>crypto（加密）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto=<span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> password=<span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">cosnt hash=crypto</span><br><span class="line">   <span class="comment">//加密方法：sha1、md5</span></span><br><span class="line">  .<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>),</span><br><span class="line">   <span class="comment">//要加密的密码</span></span><br><span class="line">  .<span class="title function_">update</span>(password),</span><br><span class="line">   <span class="comment">//进制</span></span><br><span class="line">  .<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash)</span><br></pre></td></tr></table></figure><h1 id="Zlib"><a href="#Zlib" class="headerlink" title="Zlib"></a>Zlib</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> zlib=<span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gzip=zlib.<span class="title function_">createGzip</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readStream =fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./node.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> writeStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./node2.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">readStream</span><br><span class="line">  .<span class="title function_">pipe</span>(gzip)</span><br><span class="line">  .<span class="title function_">pipe</span>(writeStream)</span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>npm i cors</p><p>app.use(cors)</p><h3 id="middleware-http-proxy-middleware"><a href="#middleware-http-proxy-middleware" class="headerlink" title="middleware(http-proxy-middleware)"></a><strong>middleware(http-proxy-middleware)</strong></h3><p><strong>安装</strong></p><p>npm install http-proxy-middleware -S</p><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;createProxyMiddleware&#125;=<span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取请求的url</span></span><br><span class="line">    <span class="keyword">const</span> urlStr=req.<span class="property">url</span></span><br><span class="line">    <span class="comment">//正则表达式：如果请求的url中包含api</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/\/api/</span>.<span class="title function_">test</span>(urlStr))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(urlStr)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    log</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;createProxyMiddleware&#125;=<span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取请求的url</span></span><br><span class="line">    <span class="keyword">const</span> urlStr=req.<span class="property">url</span></span><br><span class="line">    <span class="comment">//正则表达式：如果请求的url中包含ajax</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/\/ajax/</span>.<span class="title function_">test</span>(urlStr))&#123;</span><br><span class="line">        <span class="keyword">const</span> proxy=<span class="title function_">createProxyMiddleware</span>(<span class="string">&#x27;/ajax&#x27;</span>,&#123;</span><br><span class="line">          <span class="comment">//代理到的目标地址</span></span><br><span class="line">          <span class="attr">target</span>:<span class="string">&#x27;https://lady.vip.com&#x27;</span>,</span><br><span class="line">          <span class="comment">//是否切换源</span></span><br><span class="line">          <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">            <span class="comment">//url中的api重写为空</span></span><br><span class="line">            <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//http://localhost:8080/ajax/xxx =&gt;</span></span><br><span class="line">        <span class="comment">//https://lady.vip.com/ajax/xxx</span></span><br><span class="line">        <span class="title function_">proxy</span>(req,res)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    log</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h1><p><a href="https://yarn.bootcss.com/">官网</a></p><p><strong>查看yarn当前镜像源</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config get registry  </span><br></pre></td></tr></table></figure><p><strong>设置yarn镜像源为淘宝镜像</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p><strong>安装依赖包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add xxx</span><br></pre></td></tr></table></figure><p><strong>查看依赖版本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view xxx version</span><br></pre></td></tr></table></figure><h1 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h1><p>安装express：npm i express</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听get和post请求，并向客户端响应具体的内容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取url中的查询参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;ysk&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取url中的动态参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用app.listen(端口号，启动成功后回调函数)</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载具体的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;get user list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/editList&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;edit user list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由模块</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="应用级别中间件"><a href="#应用级别中间件" class="headerlink" title="应用级别中间件"></a>应用级别中间件</h3><p>作用：在上游挂载自定义属性供下游使用</p><p>注意：路由之前注册中间件、可以调用多个中间件（[..,..]）、不能忘写next()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：有next的函数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    req.<span class="property">startTime</span>=time</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>局部生效的中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zjj = <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是中间件&#x27;</span>)</span><br><span class="line">   <span class="title function_">next</span>() </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zjj 这个中间件只在这个路由生效</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, zjj ,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由级别中间件"><a href="#路由级别中间件" class="headerlink" title="路由级别中间件"></a><strong>路由级别中间件</strong></h3><p>写在路由上的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h3><p>捕获整个项目的异常错误，防止项目崩溃</p><p>注意：注册在所有路由之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Error:&#x27;</span>+err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express内置的中间件"><a href="#Express内置的中间件" class="headerlink" title="Express内置的中间件"></a>Express内置的中间件</h3><p>Express 4.16.0版本开始内置的3个中间件，提高开发效率</p><p>express.static：快速托管静态资源</p><p>express.json：解析JSON格式的请求体数据</p><p>express.urlencoded：解析URL-encode格式的请求体数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =  <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure><h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><h4 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h4><p>解析post表单数据的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =  <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(parser.<span class="title function_">urlencode</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><h4 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h4><p>解析字符串成对象格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment">// 监听req的data事件</span></span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    str += chunk</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听req的end事件</span></span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// str 中存放的是完整的请求体数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="comment">// 把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line">    <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">    req.<span class="property">body</span> = body</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="写接口"><a href="#写接口" class="headerlink" title="写接口"></a>写接口</h2><p>apiRouter.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载对应的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">  <span class="comment">// 向客户端响应数据</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>, <span class="comment">// 0 表示成功，1 表示失败</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;GET 请求成功&#x27;</span>, <span class="comment">// 状态的描述</span></span><br><span class="line">    <span class="attr">data</span>: query <span class="comment">// 需要响应给客户端的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过req.body获取请求体中包含的url-encoded格式的数据</span></span><br><span class="line">  <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,<span class="comment">// 0 表示成功，1 表示失败</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;POST 请求成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: body <span class="comment">// 需要响应给客户端的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./apiRouter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h3><p>注意：主要在服务器端配置、具有兼容性</p><p>安装cors</p><p>npm i cors</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure><p><strong>CORS响应头部</strong></p><p>请求头中添加</p><p>设置允许来自哪的请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>:<span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>CORS仅支持9个请求头，如果需要添加额外的请求头需要写 Access-Control-Allow-Headers</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;Content-Type,X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure><p>CORS仅支持客户端发送GET POST HEAD请求</p><p>如果需要发送PUT DELETE请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;POST,GET,DELETE,HEAD&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Session认证"><a href="#Session认证" class="headerlink" title="Session认证"></a>Session认证</h2><p>配置express-session中间件</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-session</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置session中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>, <span class="comment">// secret 属性的值可以为任意字符串</span></span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,          <span class="comment">// 固定写法</span></span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span> <span class="comment">// 固定写法</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户登录的接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;登陆失败&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">isLogin</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;登陆成功&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户姓名的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出登录的接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 清空session信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h2><p>JWT通常由三部分组成，分别是Header（头部）、Payload（有效荷载）、Signature（签名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.Signature</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><p>两个JWT相关的包</p><p>jsonwebtoken：生成JWT字符串</p><p>express-JWT：将JWT字符串解析还原成JSON对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// const parser = require(&#x27;body-parser&#x27;)</span></span><br><span class="line"><span class="comment">// app.use(parser.urlencode(&#123; extended: false &#125;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义secret密钥，密钥命名为secretKey</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;qizai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册将JWT字符串解析还原成JSON对象 unless：不需要还原（不拦截）的url：&#x27;/api/&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; </span><br><span class="line">    <span class="attr">secret</span>: secretKey, <span class="attr">algorithms</span>: [<span class="string">&#x27;HS256&#x27;</span>]</span><br><span class="line">    &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;未知错误&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> userinfo = req.<span class="property">body</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (userinfo.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置对象，设置当前token的有效期（用户名，密钥，有效时间）</span></span><br><span class="line">  <span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: userinfo.<span class="property">username</span> &#125;, secretKey, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;60s&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: tokenStr</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8080端口启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="自定义中间件-1"><a href="#自定义中间件-1" class="headerlink" title="自定义中间件"></a>自定义中间件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app =  <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加中间件，拦截对URL为/list的请求</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/list&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">query</span>.<span class="property">name</span>!=<span class="string">&#x27;root&#x27;</span>)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;无权限&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//下一个中间件或者路由</span></span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由级中间件"><a href="#路由级中间件" class="headerlink" title="路由级中间件"></a>路由级中间件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app =  <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//托管静态资源到public</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/mylogin&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//监听是否有数据传递，通过回调函数获得结果，chunk是buffer数据</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> str=chunk.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">let</span> obj=querystring.<span class="title function_">parse</span>(str)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="comment">//使用body-parser npm install body-parser</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app =  <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;</span><br><span class="line">    <span class="attr">extend</span>:<span class="literal">false</span> <span class="comment">//表示使用querystring；true为使用qs</span></span><br><span class="line">&#125;))</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/mylogin&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router=express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问xxx时触发</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/xxx&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取请求的参数</span></span><br><span class="line">    <span class="keyword">const</span> query=req.<span class="property">query</span></span><br><span class="line">    <span class="comment">//以json形式返回</span></span><br><span class="line">    res.<span class="title function_">json</span>(query)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/xxx&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> body=req.<span class="property">body</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=router</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app =  <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> bodyParse=<span class="built_in">require</span>(<span class="string">&#x27;body-parse&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> router=<span class="built_in">require</span>(<span class="string">&#x27;./router/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParse.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/xx&#x27;</span>,router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="接口示例"><a href="#接口示例" class="headerlink" title="接口示例"></a>接口示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mysql=<span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line"><span class="keyword">let</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;database&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app=<span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查(分页)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/v1/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj=req.<span class="property">query</span></span><br><span class="line">    connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from xxx&#x27;</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">        res.<span class="title function_">send</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h2><p>对存入数据库的密码加密，提高安全性</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bcryptjs@2.4.3</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcryptjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对用户的密码，进行bcrypt加密，返回值是加密后的密码字符串</span></span><br><span class="line">userinfo.<span class="property">password</span> = bcrypt.<span class="title function_">hashSync</span>(userinfo.<span class="property">password</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><h3 id="优化res-send-代码"><a href="#优化res-send-代码" class="headerlink" title="优化res.send()代码"></a>优化res.send()代码</h3><p>声明全局中间件，req对象中挂载个req.cc()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    req.<span class="property">cc</span>=<span class="keyword">function</span>(<span class="params">err,status=<span class="number">1</span></span>)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            status,</span><br><span class="line">            <span class="attr">message</span>:err <span class="keyword">instanceof</span> <span class="title class_">Error</span> ? err.<span class="property">message</span>: err</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="优化验证"><a href="#优化验证" class="headerlink" title="优化验证"></a>优化验证</h3><h1 id="node第三方依赖"><a href="#node第三方依赖" class="headerlink" title="node第三方依赖"></a>node第三方依赖</h1><h2 id="自定义包结构"><a href="#自定义包结构" class="headerlink" title="自定义包结构"></a>自定义包结构</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;my-tools&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span><span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;说明&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;ye&quot;</span><span class="punctuation">,</span><span class="string">&quot;shang&quot;</span><span class="punctuation">,</span><span class="string">&quot;kun&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span><span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatTime</span> (dataStr) &#123;</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dataStr)</span><br><span class="line">  <span class="keyword">const</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">  <span class="keyword">const</span> M = dt.<span class="title function_">getMonth</span>()</span><br><span class="line">  <span class="keyword">const</span> d = dt.<span class="title function_">getDate</span>()</span><br><span class="line">  <span class="keyword">const</span> h = dt.<span class="title function_">getHours</span>()</span><br><span class="line">  <span class="keyword">const</span> m = dt.<span class="title function_">getMinutes</span>()</span><br><span class="line">  <span class="keyword">const</span> s = dt.<span class="title function_">getSeconds</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;M&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;m&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  formatTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="node进程管理工具"><a href="#node进程管理工具" class="headerlink" title="node进程管理工具"></a><strong>node进程管理工具</strong></h2><p>supervisor、<strong>nodemon</strong>、forever、pm2</p><p><strong>作用</strong></p><p>代码有改动时自动重启服务</p><p><strong>安装nodemon</strong></p><p>npm install nodemon -g</p><p><strong>启用：</strong></p><p>nodemon xxx.js</p><h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a><strong>cross-env</strong></h2><p>运行跨平台设置和使用环境变量的脚本</p><p><strong>出现原因</strong></p><p>window不支持 NODE_ENV&#x3D;production的设置方式</p><p><strong>安装</strong></p><p>npm install –save-dev cross-env</p><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>:<span class="string">&quot;cross-env NODE_ENV=production webpack --config build/webpack.config.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NRM管理源"><a href="#NRM管理源" class="headerlink" title="NRM管理源"></a>NRM管理源</h2><p>NRM(npm registry manager)是npm的镜像源管理工具</p><p><strong>安装</strong></p><p>npm install -g nrm</p><p><strong>使用</strong></p><p>nrm ls 查看可选的源，nrm use xx 切换源，nrm test 测试速度，npm config get registry 查看当前源</p><p><strong>淘宝源</strong></p><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>日志打印工具</p><p><strong>安装</strong></p><p>npm install log4js -D</p><p><strong>使用</strong></p><p>创建log4j.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log4js = <span class="built_in">require</span>(<span class="string">&#x27;log4js&#x27;</span>)</span><br><span class="line">log4js.<span class="title function_">configure</span>(&#123;</span><br><span class="line">  <span class="attr">appenders</span>:&#123;<span class="attr">cheese</span>:&#123;<span class="attr">type</span>:<span class="string">&#x27;file&#x27;</span>,<span class="attr">filename</span>:<span class="string">&#x27;cheese.log&#x27;</span>&#125;&#125;,</span><br><span class="line">  <span class="attr">categories</span>:&#123;<span class="attr">default</span>:&#123;<span class="attr">appenders</span>:[<span class="string">&#x27;cheese&#x27;</span>],<span class="attr">level</span>:<span class="string">&#x27;error&#x27;</span>&#125;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> logger = log4js.<span class="title function_">getLogger</span>(<span class="string">&#x27;cheese&#x27;</span>)</span><br><span class="line">logger.<span class="property">level</span>=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> urlString=<span class="string">&#x27;https://www.baidu.com:443/path/index.html?id=2#tag=3&#x27;</span></span><br><span class="line">logger.<span class="title function_">debug</span>(url.<span class="title function_">parse</span>(urlString))</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p><strong>安装</strong></p><p>npm install mysql</p><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line"><span class="keyword">let</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;database&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行连接</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行sql语句</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from xx&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">connetion.<span class="title function_">query</span>(<span class="string">&#x27;insert into xxx values(?,?,?)&#x27;</span>,[<span class="string">&#x27;xx&#x27;</span>,<span class="string">&#x27;xx&#x27;</span>,<span class="string">&#x27;xx&#x27;</span>],<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据(对象),对象属性名要和表列名一致</span></span><br><span class="line"><span class="keyword">let</span> emp=&#123;</span><br><span class="line">    <span class="attr">birthday</span>:<span class="string">&#x27;2001-2-24&#x27;</span>,</span><br><span class="line">    <span class="attr">salary</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="attr">deptId</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connetion.<span class="title function_">query</span>(<span class="string">&#x27;insert into xxx set ?)&#x27;</span>,[emp],<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;update emp set ? where eid=?&#x27;</span>,[emp,<span class="number">20</span>],<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;delete from emp where eid=?&#x27;</span>,[<span class="number">20</span>],<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数据库连接池方式</span></span><br><span class="line"><span class="keyword">let</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;database&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost/数据库名&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> db=mongoose.<span class="property">connection</span></span><br><span class="line">db.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>,<span class="variable language_">console</span>.<span class="property">error</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>,<span class="string">&#x27;connection error:&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kittySchema=mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> kitten=mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Kitten&#x27;</span>,kittySchema)</span><br><span class="line"><span class="keyword">var</span> felyne=<span class="keyword">new</span> <span class="title function_">kitten</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Felyne&#x27;</span>&#125;)</span><br><span class="line">felyne.<span class="title function_">save</span>()</span><br></pre></td></tr></table></figure><h2 id="npm和npx"><a href="#npm和npx" class="headerlink" title="npm和npx"></a>npm和npx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 初始化一个项目描述文件package.json</span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"># 自动的到package.json文件中的scripts下找到对应的快捷操作名称，通过快捷名称执行对应的命令</span><br><span class="line">npm run 快捷名称</span><br><span class="line"></span><br><span class="line"># 下载安装相应的包</span><br><span class="line">npm install 包的名称</span><br><span class="line"></span><br><span class="line"># 全局安装</span><br><span class="line">npm i 包名 -g</span><br><span class="line"># 卸载全局安装的包</span><br><span class="line">npm uninstall 包名 -g</span><br><span class="line"></span><br><span class="line"># 安装开发时包</span><br><span class="line">npm i 包名 -D</span><br></pre></td></tr></table></figure><p>npx是在npm5.2以后新增，会和npm一块安装</p><p>npx可以自动下载所需要的nodejs版本运行项目，运行完后，自动删除安装的这个版本的nodejs</p><p><strong>npx -p node@8 node -v</strong>：使用npx下载node8版本</p><h2 id="i5ting-toc"><a href="#i5ting-toc" class="headerlink" title="i5ting_toc"></a>i5ting_toc</h2><p>将md文档转html页面的小工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">npm i -g i5ting_toc</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -o</span><br></pre></td></tr></table></figure><h2 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h2><p>路径相关操作</p><p>安装：npm i path</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件后缀</span></span><br><span class="line"><span class="keyword">const</span> ext = path.<span class="title function_">parse</span>(<span class="string">&#x27;xx/xxx/xx.js&#x27;</span>).<span class="property">ext</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接路径</span></span><br><span class="line">cosnt p = path.<span class="title function_">join</span>(<span class="string">&#x27;path1&#x27;</span>,<span class="string">&#x27;path2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回路径中代表文件夹的部分</span></span><br><span class="line">path.<span class="title function_">dirname</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取路径中的最后一部分</span></span><br><span class="line">path.<span class="title function_">basename</span>(路径,扩展名)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取路径中的扩展名</span></span><br><span class="line">path.<span class="title function_">extname</span>(路径)</span><br></pre></td></tr></table></figure><h2 id="mime模块"><a href="#mime模块" class="headerlink" title="mime模块"></a>mime模块</h2><p>获取mime类型</p><p>安装：npm i mime</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// text/html</span></span><br><span class="line"><span class="comment">// 配合ext使用</span></span><br><span class="line"><span class="keyword">const</span> mimeType=mime.<span class="title function_">getType</span>(<span class="string">&#x27;.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>转码器，将ES6专为ES5</p><p>Babel提供babel-cli工具，用于命令行转码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --global babel-cli</span><br><span class="line">babel --version</span><br></pre></td></tr></table></figure><p>配置.babelrc</p><p>Babel的配置文件是.babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件，presets字段设定转码规则，将es2015规则加入.babelrc:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>:[<span class="string">&quot;es2015&quot;</span>],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装转码器</p><p>在项目中安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure><p>转码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 整个目录转码</span><br><span class="line">mkdir dist1</span><br><span class="line"># --out-dir 或 -d 参数指定输出目录</span><br><span class="line">babel src -d dist1</span><br></pre></td></tr></table></figure><p>运行程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node dist1/userComponent.<span class="property">js</span></span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="提取css、js、html示例"><a href="#提取css、js、html示例" class="headerlink" title="提取css、js、html示例"></a>提取css、js、html示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配 &#x27;&lt;style&gt;&lt;/style&gt;&#x27; 的正则表达式</span></span><br><span class="line"><span class="keyword">const</span> regStyle = <span class="regexp">/&lt;style&gt;[\s\S]*&lt;\/style&gt;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlFile = <span class="title function_">readFile</span>(<span class="string">&#x27;./xx.html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,content</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolveCSS</span>(content)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配css的函数</span></span><br><span class="line">fcuntion <span class="title function_">resolveCSS</span>(<span class="params">htmlStr</span>)&#123;</span><br><span class="line">    <span class="comment">// exec()：匹配正则表达式</span></span><br><span class="line">    <span class="keyword">const</span> r1 = regStyle.<span class="title function_">exec</span>(htmlStr)</span><br><span class="line">    <span class="comment">// 提取css的内容</span></span><br><span class="line">    <span class="keyword">const</span> newCSS = r1[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;&lt;style&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&lt;/style&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">// 将提取出的内容写入文件</span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./index.css&#x27;</span>),newCSS,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入样式失败！&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义包示例"><a href="#自定义包示例" class="headerlink" title="自定义包示例"></a>自定义包示例</h2><p>格式化时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
